<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/2019/10/18/shen-kao-bei-he-qian-kao-bei/"/>
      <url>/2019/10/18/shen-kao-bei-he-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li>浅拷贝是对于一个对象的顶层拷贝</li></ul><p>通俗的理解是：拷贝了引用，并没有拷贝内容</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#92188584</span><span class="token comment" spellcheck="true">#92188584</span></code></pre><p>这里就是b只拷贝了a的引用，而不是直接拷贝那个值</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>c<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[11,22,33]</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[11,22,33]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#87652792</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#87206488</span></code></pre><p>两者只是拷贝了值，而不是拷贝引用，c开辟了自己的一个内存空间，但是值和a一样</p><h2 id="copy-copy在面对可变类型和不可变类型是不同的"><a href="#copy-copy在面对可变类型和不可变类型是不同的" class="headerlink" title="copy.copy在面对可变类型和不可变类型是不同的"></a>copy.copy在面对可变类型和不可变类型是不同的</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c1为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>e<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e1为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c2为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e2为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span></code></pre><pre><code>c1为 [[11, 22, 33], [44, 55, 66]]e1为 [[11, 22, 33], [44, 55, 66]]c2为 [[11, 22, 33, 77], [44, 55, 66]]e2为 [[11, 22, 33, 77], [44, 55, 66]]9318524893185248</code></pre><p>copy.copy面对一个不可变类型，直接就是一个浅拷贝</p><p>如果是可变类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c1为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>e<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e1为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c2为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e2为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>c1为 [[11, 22, 33], [44, 55, 66]]e1为 [[11, 22, 33], [44, 55, 66]]c2为 [[11, 22, 33, 77], [44, 55, 66]]e2为 [[11, 22, 33, 77], [44, 55, 66]]8359084083590880</code></pre><p><strong>虽然值是相同的，但是c和e两个内存是不同的。c是把a和b引用组合成一个元组，而e copy了c的引用，就像一个递归一样，e copy了c，c引用了a和b，所以最后也是同样的引用了a和b，所以a和b变化的时候e同样也会变化</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器</title>
      <link href="/2019/10/18/zhuang-shi-qi/"/>
      <url>/2019/10/18/zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器的概念"><a href="#装饰器的概念" class="headerlink" title="装饰器的概念"></a>装饰器的概念</h2><p>装饰器从理论上讲，就是它可以在让其他函数在不需要做任何代码的变动的前提下增加额外的功能</p><p>这里拿个案例来讲：</p><p>开发公司原本是每个部门都调用同样的一个底层函数，后来要在使用函数前加上一个权限验证代码</p><p>很多人一开始可能都是这样想的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>但这种代码违背了<strong>开放封闭原则</strong>，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，<strong>它规定已经实现的功能代码不允许被修改</strong>，但可以被扩展，这个也就是<strong>单例模式</strong>，在不改变别人使用的情况下，在内部写好增加的功能，即：</p><ul><li>封闭：已实现的功能代码块</li><li>开放：对扩展开发</li></ul><p>如果将开放封闭原则应用在上述需求中，那么就不允许在函数 f1 、f2、f3、f4的内部进行修改代码</p><p>根据之前学过的闭包，可以把函数的引用封装进check()函数里面，然后再次调用闭包函数就可以实现每个函数使用前都加上inner函数，代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>f1<span class="token operator">=</span>check<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将f1函数传入check函数里面，然后再去调用</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但是这个代码有很大的问题，也违反了开放封闭原则，就是每个部门都要加上这一行代码<code>f1=check(f1)</code></p><p>所以下面介绍python的特殊写法，也叫做语法糖</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>@check就代替了f1=check(f1)这行代码，这样每个部门都可以像原来的写法那样调用而且又可以加入检察权限函数了</p><h2 id="两个装饰器"><a href="#两个装饰器" class="headerlink" title="两个装饰器"></a>两个装饰器</h2><p>假如有两个装饰器，他</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">makebold</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'&lt;b>'</span><span class="token operator">+</span>fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/b>'</span>    <span class="token keyword">return</span> wrapped<span class="token keyword">def</span> <span class="token function">makeitalic</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test2--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--2--'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'&lt;i>'</span><span class="token operator">+</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/i>'</span>    <span class="token keyword">return</span> wrapped@makebold@makeitalic<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'hello world 3'</span>res<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><pre><code>--test2----test1----1----2--test&lt;b&gt;&lt;i&gt;hello world 3&lt;/i&gt;&lt;/b&gt;</code></pre><p><strong>两个装饰器的运行顺序是这样的：python解释器从上往下执行，执行到@makebold，然后返回值还是一个装饰器，然后接着@makeitalic执行,然后makeitalic返回才是一个函数，所以这个顺序是倒着执行的，是test()–&gt;makeitalic()–&gt;makebold()</strong>，调用的时候是从上往下调用，装饰器执行是从下往上执行</p><h2 id="装饰器的执行时间"><a href="#装饰器的执行时间" class="headerlink" title="装饰器的执行时间"></a>装饰器的执行时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--执行--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#输出 --执行--</span></code></pre><p>从上述代码看出，在执行到@check这一行的时候，就已经执行check函数里面的内容了，而不是要等到f1()的时候再去调用</p><h2 id="装饰器对有参数函数进行装饰"><a href="#装饰器对有参数函数进行装饰" class="headerlink" title="装饰器对有参数函数进行装饰"></a>装饰器对有参数函数进行装饰</h2><p>假如在调用函数的时候需要加入参数，就必须在定义的闭包函数里面也要加入对应的形参，不然会无法调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--执行--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>         func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a是%d,b是%d,c是%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></code></pre><h2 id="带返回值的装饰器"><a href="#带返回值的装饰器" class="headerlink" title="带返回值的装饰器"></a>带返回值的装饰器</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> inner@func<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'23333'</span>ret<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回值是%s'</span><span class="token operator">%</span>ret<span class="token punctuation">)</span></code></pre><pre><code>--test--返回值是23333</code></pre><p>定义返回值也要在闭包函数里面添加相对应的返回值</p><h2 id="有参数的装饰器"><a href="#有参数的装饰器" class="headerlink" title="有参数的装饰器"></a>有参数的装饰器</h2><p>在开发中会出现一个外部变量，如@装饰器名字(‘变量’)的形式，此时就需要多一个闭包函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_args</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arg<span class="token operator">==</span><span class="token string">'2333'</span><span class="token punctuation">:</span>                function<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">return</span> inner    <span class="token keyword">return</span> func@func_args<span class="token punctuation">(</span><span class="token string">'2333'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果 --test--</span></code></pre><p>这样就可以想对什么进行装饰就对什么进行装饰了</p><h2 id="用类当做装饰器进行装饰"><a href="#用类当做装饰器进行装饰" class="headerlink" title="用类当做装饰器进行装饰"></a>用类当做装饰器进行装饰</h2><p>在讲这个之前要懂一个方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>t<span class="token operator">=</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这样直接调用的话会导致<code>TypeError: &#39;Test&#39; object is not callable</code>错误，所以要在类中声明<code>__call__</code>方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>t<span class="token operator">=</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#--test--</span></code></pre><p>这样子就可以运行了</p><p>使用类装饰器的形式是这样子的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'初始化'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数的名字为%s'</span><span class="token operator">%</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__func<span class="token operator">=</span>func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--装饰器的功能--'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__func@Test<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的四种数据结构</title>
      <link href="/2019/10/18/python-shu-ju-lei-xing/"/>
      <url>/2019/10/18/python-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><pre><code>list=[val1,val2,val3,val4]</code></pre><ol><li><p>列表的每一个元素都可变</p></li><li><p>列表的元素都是有序的</p></li><li><p>列表可以容纳Python的任何对象</p></li></ol><h3 id="列表的循环遍历"><a href="#列表的循环遍历" class="headerlink" title="列表的循环遍历"></a>列表的循环遍历</h3><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#for循环遍历</span>    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> namesList<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#xiaoWang</span>    <span class="token comment" spellcheck="true">#xiaoZhang</span>    <span class="token comment" spellcheck="true">#xiaoHua</span>    <span class="token comment" spellcheck="true">#while循环遍历</span>    namesList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>namesList<span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>namesList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">#xiaoWang</span>    <span class="token comment" spellcheck="true">#xiaoZhang</span>    <span class="token comment" spellcheck="true">#xiaoHua</span></code></pre><h3 id="列表添加元素"><a href="#列表添加元素" class="headerlink" title="列表添加元素"></a>列表添加元素</h3><h4 id="列表的append添加元素"><a href="#列表的append添加元素" class="headerlink" title="列表的append添加元素"></a>列表的append添加元素</h4><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#列表的通过append添加元素</span>    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----添加之前，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    A<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"xiaoliu"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----添加之后，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># -----添加之前，列表A的数据-----</span>    <span class="token comment" spellcheck="true"># xiaoWang</span>    <span class="token comment" spellcheck="true"># xiaoZhang</span>    <span class="token comment" spellcheck="true"># xiaoHua</span>    <span class="token comment" spellcheck="true"># -----添加之后，列表A的数据-----</span>    <span class="token comment" spellcheck="true"># xiaoWang</span>    <span class="token comment" spellcheck="true"># xiaoZhang</span>    <span class="token comment" spellcheck="true"># xiaoHua</span>    <span class="token comment" spellcheck="true"># xiaoliu</span></code></pre><h4 id="列表的extend合并元素"><a href="#列表的extend合并元素" class="headerlink" title="列表的extend合并元素"></a>列表的extend合并元素</h4><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, [3, 4]]</span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, [3, 4], 3, 4]</span></code></pre><h4 id="列表的insert插入元素"><a href="#列表的insert插入元素" class="headerlink" title="列表的insert插入元素"></a>列表的insert插入元素</h4><p>insert(index, object) 在指定位置index前插入元素object</p><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 3, 1, 2]</span></code></pre><h4 id="列表修改元素"><a href="#列表修改元素" class="headerlink" title="列表修改元素"></a>列表修改元素</h4><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#定义变量A，默认有3个元素</span>    A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之前，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#修改元素</span>    A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xiaoLu'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----修改之后，列表A的数据-----"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> A<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span></code></pre><h4 id="列表查找元素"><a href="#列表查找元素" class="headerlink" title="列表查找元素"></a>列表查找元素</h4><p>in, not in</p><p>python中查找的常用方法为：</p><ul><li>in（存在）,如果存在那么结果为true，否则为false</li><li>not in（不存在），如果不存在那么结果为true，否则false</li></ul><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#待查找的列表</span>    nameList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xiaoWang'</span><span class="token punctuation">,</span><span class="token string">'xiaoZhang'</span><span class="token punctuation">,</span><span class="token string">'xiaoHua'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#获取用户要查找的名字</span>    findName <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要查找的姓名:'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#查找是否存在</span>    <span class="token keyword">if</span> findName <span class="token keyword">in</span> nameList<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在字典中找到了相同的名字'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有找到'</span><span class="token punctuation">)</span></code></pre><p><strong>index和count在列表的用法和字符串用法相同</strong></p><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意是左闭右开区间，即左边包含右边不包含</span><span class="token comment" spellcheck="true">#    Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#    File "&lt;stdin>", line 1, in &lt;module></span><span class="token comment" spellcheck="true">#    ValueError: 'a' is not in list</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    0</span></code></pre><h3 id="列表删除元素"><a href="#列表删除元素" class="headerlink" title="列表删除元素"></a>列表删除元素</h3><h4 id="del：根据下标进行删除"><a href="#del：根据下标进行删除" class="headerlink" title="del：根据下标进行删除"></a>del：根据下标进行删除</h4><pre class=" language-python"><code class="language-python">  movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'骇客帝国'</span><span class="token punctuation">,</span><span class="token string">'第一滴血'</span><span class="token punctuation">,</span><span class="token string">'指环王'</span><span class="token punctuation">,</span><span class="token string">'霍比特人'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token keyword">del</span> movieName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ------删除之前 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 第一滴血</span>    <span class="token comment" spellcheck="true"># 指环王</span>    <span class="token comment" spellcheck="true"># 霍比特人</span>    <span class="token comment" spellcheck="true"># 速度与激情</span>    <span class="token comment" spellcheck="true"># ------删除之后 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 指环王</span>    <span class="token comment" spellcheck="true"># 霍比特人</span>    <span class="token comment" spellcheck="true"># 速度与激情</span></code></pre><h4 id="pop：删除最后一个元素"><a href="#pop：删除最后一个元素" class="headerlink" title="pop：删除最后一个元素"></a>pop：删除最后一个元素</h4><pre class=" language-python"><code class="language-python">    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'骇客帝国'</span><span class="token punctuation">,</span><span class="token string">'第一滴血'</span><span class="token punctuation">,</span><span class="token string">'指环王'</span><span class="token punctuation">,</span><span class="token string">'霍比特人'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    movieName<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ------删除之前 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 第一滴血</span>    <span class="token comment" spellcheck="true"># 指环王</span>    <span class="token comment" spellcheck="true"># 霍比特人</span>    <span class="token comment" spellcheck="true"># 速度与激情</span>    <span class="token comment" spellcheck="true"># ------删除之后 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 第一滴血</span>    <span class="token comment" spellcheck="true"># 指环王</span>    <span class="token comment" spellcheck="true"># 霍比特人</span></code></pre><h4 id="remove：根据元素的值进行删除"><a href="#remove：根据元素的值进行删除" class="headerlink" title="remove：根据元素的值进行删除"></a>remove：根据元素的值进行删除</h4><pre class=" language-python"><code class="language-python">    movieName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'加勒比海盗'</span><span class="token punctuation">,</span><span class="token string">'骇客帝国'</span><span class="token punctuation">,</span><span class="token string">'第一滴血'</span><span class="token punctuation">,</span><span class="token string">'指环王'</span><span class="token punctuation">,</span><span class="token string">'霍比特人'</span><span class="token punctuation">,</span><span class="token string">'速度与激情'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之前------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    movieName<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'指环王'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------删除之后------'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> tempName <span class="token keyword">in</span> movieName<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tempName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ------删除之前 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 第一滴血</span>    <span class="token comment" spellcheck="true"># 指环王</span>    <span class="token comment" spellcheck="true"># 霍比特人</span>    <span class="token comment" spellcheck="true"># 速度与激情</span>    <span class="token comment" spellcheck="true"># ------删除之后 - -----</span>    <span class="token comment" spellcheck="true"># 加勒比海盗</span>    <span class="token comment" spellcheck="true"># 骇客帝国</span>    <span class="token comment" spellcheck="true"># 第一滴血</span>    <span class="token comment" spellcheck="true"># 霍比特人</span>    <span class="token comment" spellcheck="true"># 速度与激情</span></code></pre><h3 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h3><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。</p><p>reverse方法是将list逆置。</p><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 4, 2, 3]</span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3, 2, 4, 1]</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4]</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [4, 3, 2, 1]</span></code></pre><p>&emsp;</p><h2 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h2><p>Python的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组使用小括号，列表使用方括号</p><pre class=" language-python"><code class="language-python">aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'et'</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">)</span></code></pre><h3 id="Python访问元组"><a href="#Python访问元组" class="headerlink" title="Python访问元组"></a>Python访问元组</h3><pre class=" language-python"><code class="language-python">aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'et'</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">)</span>aTuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#et</span></code></pre><h3 id="Python元组的index和count方法"><a href="#Python元组的index和count方法" class="headerlink" title="Python元组的index和count方法"></a>Python元组的index和count方法</h3><pre class=" language-python"><code class="language-python"> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意是左闭右开区间，即左边包含右边不包含</span><span class="token comment" spellcheck="true">#    Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#    File "&lt;stdin>", line 1, in &lt;module></span><span class="token comment" spellcheck="true">#    ValueError: 'a' is not in list</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    0</span></code></pre><p>Python元素不可修改，所以没有列表的增删改操作</p><p>&emsp;</p><h2 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h2><p>Python的字典与json结构相似，但是有很多不同。字典是一种数据结构，而json是一种数据格式。不同点有如下几种</p><ol><li>python dict 字符串用单引号，Json强制规定双引号</li><li>Json的键必须是字符串，python dict的键必须是可<strong>哈希</strong>的（字典里的key有一个原则，必须可哈希（有个内置函数hash()可以检测是否支持可哈希），因为字典查找数据是通过哈希算法得到的，比元组，列表等的数组类型快很多，这本来也是字典的特性，字典里的key和value一一对应的。<strong>所以所有python自带类型中，除了list、dict、set和内部至少带有上述三种类型之一的tuple之外，其余的对象都能当key</strong>）</li><li>python dict 里可以嵌套tuple, json里只有arrayjson.dumps({1:2}) 的结果是 {“1”:2}，而python中的json模块函数：json.dumps((1,2)) 的结果是[1,2] </li></ol><p><strong>字典形式如下</strong></p><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span></code></pre><h3 id="根据键访问值"><a href="#根据键访问值" class="headerlink" title="根据键访问值"></a>根据键访问值</h3><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="修改值"><a href="#修改值" class="headerlink" title="修改值"></a>修改值</h3><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span>    info<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'请输入新的学号'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改之后的id为%d:'</span><span class="token operator">%</span>info<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>添加元素</strong></p><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span>    info<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'请输入新的学号'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加之后的id为:%d'</span><span class="token operator">%</span>info<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li><h4 id="del删除指定元素"><a href="#del删除指定元素" class="headerlink" title="del删除指定元素"></a>del删除指定元素</h4><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除前,%s'</span><span class="token operator">%</span>info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除后,%s'</span><span class="token operator">%</span>info<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 删除前,班长</span>    <span class="token comment" spellcheck="true"># Traceback (most recent call last):</span>    <span class="token comment" spellcheck="true">#   File "C:/Users/LY/PycharmProjects/untitled2/demo14.py", line 7, in &lt;module></span>    <span class="token comment" spellcheck="true">#     print('删除后,%s' % info['name'])</span>    <span class="token comment" spellcheck="true"># KeyError: 'name'</span></code></pre></li><li><h4 id="del删除整个字典"><a href="#del删除整个字典" class="headerlink" title="del删除整个字典"></a>del删除整个字典</h4><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'monitor'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'China'</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除前,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span>    <span class="token keyword">del</span> info    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除后,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Traceback (most recent call last):</span>    <span class="token comment" spellcheck="true"># 删除前,{'name': 'monitor', 'sex': 'f', 'address': 'China'}</span>    <span class="token comment" spellcheck="true">#   File "C:/Users/LY/PycharmProjects/untitled2/demo14.py", line 7, in &lt;module></span>    <span class="token comment" spellcheck="true">#     print('删除后,%s' % info)</span>    <span class="token comment" spellcheck="true"># NameError: name 'info' is not defined</span></code></pre></li><li><h4 id="clear清空整个字典"><a href="#clear清空整个字典" class="headerlink" title="clear清空整个字典"></a>clear清空整个字典</h4><pre class=" language-python"><code class="language-python">    info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'monitor'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'China'</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'清空前,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span>    info<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'清空后,%s'</span><span class="token operator">%</span>info<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># {}</span></code></pre></li></ul><h3 id="查看字典键值对的个数"><a href="#查看字典键值对的个数" class="headerlink" title="查看字典键值对的个数"></a>查看字典键值对的个数</h3><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4</span></code></pre><h3 id="查看字典的key列表"><a href="#查看字典的key列表" class="headerlink" title="查看字典的key列表"></a>查看字典的key列表</h3><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict_keys(['name', 'id', 'sex', 'address'])</span></code></pre><h3 id="查看字典的values"><a href="#查看字典的values" class="headerlink" title="查看字典的values"></a>查看字典的values</h3><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict_values(['班长', 100, 'f', '地球亚洲中国北京'])</span></code></pre><h3 id="查看字典的所有键值对"><a href="#查看字典的所有键值对" class="headerlink" title="查看字典的所有键值对"></a>查看字典的所有键值对</h3><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dict_items([('name', '班长'), ('id', 100), ('sex', 'f'), ('address', '地球亚洲中国北京')])</span></code></pre><h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h3><h4 id="遍历键"><a href="#遍历键" class="headerlink" title="遍历键"></a>遍历键</h4><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> info<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># name</span><span class="token comment" spellcheck="true"># id</span><span class="token comment" spellcheck="true"># sex</span><span class="token comment" spellcheck="true"># address</span></code></pre><h4 id="遍历值"><a href="#遍历值" class="headerlink" title="遍历值"></a>遍历值</h4><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">for</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 班长</span><span class="token comment" spellcheck="true"># 100</span><span class="token comment" spellcheck="true"># f</span><span class="token comment" spellcheck="true"># 地球亚洲中国北京</span></code></pre><h4 id="遍历所有元素"><a href="#遍历所有元素" class="headerlink" title="遍历所有元素"></a>遍历所有元素</h4><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">for</span> item <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ('name', '班长')</span><span class="token comment" spellcheck="true"># ('id', 100)</span><span class="token comment" spellcheck="true"># ('sex', 'f')</span><span class="token comment" spellcheck="true"># ('address', '地球亚洲中国北京')</span></code></pre><h4 id="遍历键值对"><a href="#遍历键值对" class="headerlink" title="遍历键值对"></a>遍历键值对</h4><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'班长'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span><span class="token string">'地球亚洲中国北京'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key是%s,value是%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># key是name,value是班长</span><span class="token comment" spellcheck="true"># key是id,value是100</span><span class="token comment" spellcheck="true"># key是sex,value是f</span><span class="token comment" spellcheck="true"># key是address,value是地球亚洲中国北京</span></code></pre><p>&emsp;</p><h2 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h2><p>python集合与之前列表、元组类似，可以存储多个数据，但是这些数据是不重复的</p><p><strong>集合形式如下</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'C', 'B', 'A'}</span><span class="token comment" spellcheck="true"># {'C', 'A', 'B'}</span><span class="token comment" spellcheck="true">#结果可能与原来的列表不相同，因为集合是无序的</span></code></pre><p><strong>访问set</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><p><strong>遍历set</strong></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># B A C</span></code></pre><p><strong>set添加元素</strong></p><pre class=" language-python"><code class="language-python"> s <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {1, 2, 3, 4}</span></code></pre><p><strong>set删除元素</strong></p><pre><code> s = set([1, 2, 3，4]) s.remove(4) print(s) # {1, 2, 3}</code></pre><p><strong>此外set还可以进行交并补等操作</strong></p><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">&amp;</span> s2<span class="token comment" spellcheck="true">#{2, 3}</span>s1 <span class="token operator">|</span> s2<span class="token comment" spellcheck="true">#{1, 2, 3, 4}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高阶函数</title>
      <link href="/2019/10/18/gao-jie-han-shu/"/>
      <url>/2019/10/18/gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h2><p><strong>简单的说就是过滤函数</strong></p><p>filter()是python内置的高阶函数，filter()函数接收一个函数 f 和一list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><pre class=" language-python"><code class="language-python"> filter<span class="token punctuation">(</span>function <span class="token operator">or</span> None<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> <span class="token operator">or</span> string</code></pre><ul><li>function:接受一个参数，返回布尔值True或False</li><li>sequence:序列可以是str，tuple，list</li></ul><p>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为<strong>True</strong>的元素。</p><p>返回值的类型和参数sequence的类型相同</p><p>这里拿个案例说明这个函数</p><pre class=" language-python"><code class="language-python">filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#在python中，非0为True</span><span class="token comment" spellcheck="true">#1作为x，1%2=1为True。</span><span class="token comment" spellcheck="true">#2作为x,2%2=0为Fasle。</span><span class="token comment" spellcheck="true">#3作为x，3%2=1为True</span><span class="token comment" spellcheck="true">#4作为x,4%2=0为Fasle</span>filter<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">"she"</span><span class="token punctuation">)</span><span class="token string">'she'</span></code></pre><p>其他案例如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果[1, 7, 9, 17]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除空字符串</span><span class="token keyword">def</span> <span class="token function">is_not_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">and</span> len<span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span>filter<span class="token punctuation">(</span>is_not_empty<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">'END'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果['test', 'str', 'END']</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#返回1-100的所有的平方根为整数的数</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">is_sqr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token operator">*</span>r<span class="token operator">==</span>x<span class="token keyword">print</span> filter<span class="token punctuation">(</span>is_sqr<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h2><p><strong>map函数会根据提供的函数对指定序列做映射</strong></p><p><strong>map()函数是python内置的高阶函数，可以把一个 list 转换为另一个 list，只需要传入转换函数</strong></p><pre class=" language-python"><code class="language-python">map<span class="token punctuation">(</span>function<span class="token punctuation">,</span> sequence<span class="token punctuation">[</span><span class="token punctuation">,</span> sequence<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> list</code></pre><ul><li>function:是一个函数</li><li>sequence:是一个或多个序列,取决于function需要几个参数</li><li>返回值是一个list</li></ul><p>案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#函数需要一个参数</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里就是把1作为x，然后拿x平方</span><span class="token comment" spellcheck="true">#2作为x，然后拿x去平方</span><span class="token comment" spellcheck="true">#3作为x，然后拿3去平方。</span><span class="token comment" spellcheck="true">#所以结果为:[1, 4, 9]</span><span class="token comment" spellcheck="true">#函数需要两个参数</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取出1和4，然后拿1和4相加。</span><span class="token comment" spellcheck="true">#取出2和5，然后拿2和5相加。</span><span class="token comment" spellcheck="true">#取出3和6，然后拿3和6相加。</span><span class="token comment" spellcheck="true">#结果为:[5, 7, 9]</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span>  l2 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'Sun'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'S'</span> <span class="token punctuation">]</span>l3 <span class="token operator">=</span> map<span class="token punctuation">(</span> f1<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果为:[(0, 'Sun'), (1, 'M'), (2, 'T'), (3, 'W'), (4, 'T'), (5, 'F'), (6, 'S')]</span></code></pre><p>其余案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把[1, 2, 3, 4, 5, 6, 7, 8, 9]每个都平方</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token keyword">print</span> map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把首字母大写，其余的小写</span><span class="token keyword">def</span> <span class="token function">format_name</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> map<span class="token punctuation">(</span>format_name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'adam'</span><span class="token punctuation">,</span> <span class="token string">'LISA'</span><span class="token punctuation">,</span> <span class="token string">'barT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></pre><p>&emsp;</p><h2 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h2><p><strong>reduce是一个累积函数</strong></p><p>reduce()函数是python的一个高阶计算函数，会对list的里面的每个元素不断的调用，方法和map函数类似，但是reduce接入的参数可以为两个或者三个</p><pre class=" language-python"><code class="language-python">reduce<span class="token punctuation">(</span>function<span class="token punctuation">,</span> sequence<span class="token punctuation">[</span><span class="token punctuation">,</span> initial<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value</code></pre><ul><li>function:该函数有两个参数</li><li>sequence:序列可以是str，tuple，list</li><li>initial:固定初始值</li></ul><p>reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。 第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial 作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。 注意function函数不能为None。</p><p>案例如下：</p><pre class=" language-python"><code class="language-python">reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#10</span><span class="token comment" spellcheck="true">#1作为x，2作为y，x+y=1+2=3，然后把得出的3赋值给x，把列表的3赋值给y，3+3=6，然后把6赋值给x，4赋值给y，x+y=10，得出最后结果为10</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#15</span><span class="token comment" spellcheck="true">#这里多加个5的意思是把5作为初始值x</span><span class="token comment" spellcheck="true">#5作为x，从列表中取1作为y,5+1=6，6作为x，x作为y，6+2=8，8作为x，3组我诶y，8+3=11，11作为x，4作为y，11+4=15,得出最后的结果为15</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dd'</span><span class="token punctuation">)</span><span class="token string">'ddaabbcc'</span><span class="token comment" spellcheck="true">#原理和上面的一样</span></code></pre><p>其余案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> yreduce<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>结果为25过程如下：先计算头两个元素：f(1, 3)，结果为4；再把结果和第3个元素计算：f(4, 5)，结果为9；再把结果和第4个元素计算：f(9, 7)，结果为16；再把结果和第5个元素计算：f(16, 9)，结果为25；由于没有更多的元素了，计算结束，返回结果25。</code></pre><p>&emsp;</p><h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h2><p><strong>sorted是一个搜索函数</strong></p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> cmp<span class="token operator">=</span>None<span class="token punctuation">,</span> key<span class="token operator">=</span>None<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> new sorted list</code></pre><p><strong>sorted()</strong>函数是python的一个高阶函数，可以接受函数来实现自定义排序，<strong>sorted()</strong>函数与<strong>sort</strong>函数是有一定区别的，比如</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Credit', 'Zoo', 'about', 'bob']</span><span class="token comment" spellcheck="true">#此时需要忽略大小写sort函数是不足以完成的</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用sorted函数</span><span class="token keyword">def</span> <span class="token function">cmp_ignore_case</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    u1 <span class="token operator">=</span> s1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    u2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> u1 <span class="token operator">&lt;</span> u2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> u1 <span class="token operator">></span> u2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">print</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmp_ignore_case<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['about', 'bob', 'Credit', 'Zoo']</span></code></pre><p>sorted()函数也可以对数字进行排序，<strong>如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0</strong></p><p>假如要实现数字的倒序排序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reversed_cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">></span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">0</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reversed_cmp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[36, 21, 12, 9, 5]</span></code></pre><p>假如要实现字符串的ASCII大小排序</p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Credit', 'Zoo', 'about', 'bob']</span></code></pre><p>但是一般的排序的话使用sort足够了，除非要自定义排序才用sorted</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>enumerate函数</title>
      <link href="/2019/10/18/enumerate/"/>
      <url>/2019/10/18/enumerate/</url>
      
        <content type="html"><![CDATA[<h2 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate() 函数"></a>enumerate() 函数</h2><p><strong>enumerate() 函数</strong>可以使得列表添加索引</p><p>比如</p><pre class=" language-python"><code class="language-python"> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token string">'Paul'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span> name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name<span class="token comment" spellcheck="true">#0 - Adam</span><span class="token comment" spellcheck="true">#1 - Lisa</span><span class="token comment" spellcheck="true">#2 - Bart</span><span class="token comment" spellcheck="true">#3 - Paul</span></code></pre><p>这个函数实际上原理是把<strong>[‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]</strong>转换成了<strong>[(0, ‘Adam’), (1, ‘Lisa’), (2, ‘Bart’), (3, ‘Paul’)]</strong></p><p>每一次迭代都是一个元组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> t <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name</code></pre><p>所以就可以简写为</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> index<span class="token punctuation">,</span> name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python闭包</title>
      <link href="/2019/10/18/bi-bao/"/>
      <url>/2019/10/18/bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h2><p><strong>闭包的作用通俗的来说就是强调，闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性</strong></p><p>闭包的基本形式如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demoA</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        使用demoA的变量    <span class="token keyword">return</span> demoB<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demoA</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demoB</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--2--'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'demoA形参是'</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span><span class="token string">'demoB传入的形参是'</span><span class="token punctuation">,</span>number2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--3--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> demoBres<span class="token operator">=</span>demoA<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>res<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></code></pre><pre><code>--1----3----2--demoA形参是 100 demoB传入的形参是 200</code></pre><p>从上面的案例看出，在调用完demoA的时候，并没有把demoA销毁，返回值保存了demoB的引用，所以demoB里面还保存着demoA传入的变量</p><p>这里再拿个案例来说明，拿一个数学的二元函数来打比方<code>y=ax^2+b</code>,假如a和b是确定变量，只需要调x的参数，就可以使用闭包的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">line_conf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>x <span class="token operator">+</span> b    <span class="token keyword">return</span> lineline1 <span class="token operator">=</span> line_conf<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>line2 <span class="token operator">=</span> line_conf<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>line1<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>line2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果拿函数定义的方法来解决的话，就要不断的输入3个参数，这样显得更麻烦，所以闭包在一定程度上提高了代码复用率</p><h2 id="闭包弊端"><a href="#闭包弊端" class="headerlink" title="闭包弊端"></a>闭包弊端</h2><pre><code>1.闭包似优化了变量，原来需要类对象完成的工作，闭包也可以完成2.由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，会导致内存消耗很大，在一定程度上会影响性能</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python匿名函数</title>
      <link href="/2019/10/18/ni-ming-han-shu/"/>
      <url>/2019/10/18/ni-ming-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="匿名函数概念"><a href="#匿名函数概念" class="headerlink" title="匿名函数概念"></a>匿名函数概念</h2><p>有些时候我们使用函数的时候不一定要显示的定义函数，可以直接传输匿名函数来定义</p><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算所有数的平方</span><span class="token keyword">print</span><span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span></code></pre><p>上面的这个匿名函数实际上是</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x</code></pre><p><strong>关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。</strong></p><p><strong>匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假如要对字典的名字进行排序，一般的sort函数是无法完成这个任务的，此时就可以用到匿名函数</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"ly"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zz"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[{'name': 'aa', 'age': 22}, {'name': 'ly', 'age': 21}, {'name': 'zz', 'age': 19}]</span><span class="token comment" spellcheck="true">#第一个x是遍历列表的三个字典，第二个x是把字典里面的'name'这个变量取出来，所以相当于key='name'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#倒叙排序列表</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> <span class="token operator">-</span>cmp<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[9, 5, 3, 1, 0]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把数值转换为正数</span>myabs <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">else</span> x myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>myabs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#比如要简化filter()的示例代码</span><span class="token comment" spellcheck="true">#def is_not_empty(s):</span><span class="token comment" spellcheck="true">#    return s and len(s.strip()) > 0</span><span class="token comment" spellcheck="true">#filter(is_not_empty, ['test', None, '', 'str', '  ', #'END'])</span><span class="token keyword">print</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">and</span> len<span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">'END'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span><span class="token comment" spellcheck="true">#['test', 'str', 'END']</span></code></pre><h2 id="匿名函数小应用"><a href="#匿名函数小应用" class="headerlink" title="匿名函数小应用"></a>匿名函数小应用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>func<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> resultnum<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span></code></pre><p>这样就可以自定义想要实现的函数了</p><h2 id="匿名函数面试题"><a href="#匿名函数面试题" class="headerlink" title="匿名函数面试题"></a>匿名函数面试题</h2><p>只用一行代码就对字典的age进行排序</p><p><code>a=[{&quot;name&quot;:&quot;ly&quot;,&quot;age&quot;:21},{&quot;name&quot;:&quot;aa&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;zz&quot;,&quot;age&quot;:19}]</code></p><p>答案：</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"ly"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zz"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><blockquote><p>这里留个坑，等我到时候拿更多的面试题来详细讲解匿名函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天生鲜项目总结（二）</title>
      <link href="/2019/10/16/tian-tian-sheng-xian-zong-jie-er/"/>
      <url>/2019/10/16/tian-tian-sheng-xian-zong-jie-er/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Redis作为Django的缓存来存储用户登录状态"><a href="#使用Redis作为Django的缓存来存储用户登录状态" class="headerlink" title="使用Redis作为Django的缓存来存储用户登录状态"></a>使用Redis作为Django的缓存来存储用户登录状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常网站用的都是session和cookie作为记录用户信息的存储，Django默认是把session存储在数据库中，每一次用户使用网站，都要从数据库从读取session，但是直接读取数据库的速度是比较慢的。其次，网站如果每次用户访问都是从数据库进行读取，那么对服务器的压力也是不小的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在小网站可以这样子做，如果大型网站人流量一大，每一个人访问网站都会对数据库进行一次读取，对服务器是个不小的压力，而如果使用Redis作为缓存存储数据就不会出现这类问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Django使用Redis作为缓存的使用手册如下：<a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://django-redis-chs.readthedocs.io/zh_CN/latest/</a>，这里只简述使用方法:</p><p>安装Django-redis</p><pre class=" language-python"><code class="language-python">pip install django<span class="token operator">-</span>redis</code></pre><p>然后在setting文件里面添加配置项</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Django的缓存配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>        <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379/9"</span><span class="token punctuation">,</span>        <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;</p><p>其次Django默认的存储方式有如下三种：</p><ol><li><p>存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.db'</span></code></pre><p>Django默认的存储方式就是在数据中存储，所以在<code>setting</code>字段里面有个</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p>在使用命令<code>migrate</code>和<code>makemigrations</code>后在数据库就会生成一个django_session字段，如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571198881213.png" alt></p></li><li><p>存储在缓存中：存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.cache'</span></code></pre></li><li><p>混合存储：优先从本机内存中存取，如果没有则从数据库中存取。</p><pre class=" language-python"><code class="language-python"> SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.cached_db'</span></code></pre></li></ol><p>&emsp;</p><p>项目需要的是把redis缓存替换默认方法，依照官方文档的方法：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571199075048.png" alt></p><p>在setting里面添加如下两个字段：</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE <span class="token operator">=</span> <span class="token string">"django.contrib.sessions.backends.cache"</span>SESSION_CACHE_ALIAS <span class="token operator">=</span> <span class="token string">"default"</span></code></pre><p>这样就可以完成使用Redis来存储session了</p><p>&emsp;</p><h2 id="个人中心页面登陆限制"><a href="#个人中心页面登陆限制" class="headerlink" title="个人中心页面登陆限制"></a>个人中心页面登陆限制</h2><p>按照逻辑来说，个人中心的信息在没登录的时候即使输入了URL地址也是直接跳转到登陆信息的，当登陆完成之后再返回登陆之前访问的页面。本项目就按照这个逻辑去写。</p><p>Django有一套验证系统，可以记录用户访问前的地址和可以让登陆后再返回之前访问的地址</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571214022489.png" alt></p><p>上述验证方法有两个方法可以实现：</p><h3 id="方法一：在路由里面添加"><a href="#方法一：在路由里面添加" class="headerlink" title="方法一：在路由里面添加"></a>方法一：在路由里面添加</h3><p>在每个单独的包的路由里面设置一个<code>login_required</code>，如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571214344034.png" alt></p><p>配置完之后，紧接着要在setting里面添加你的登陆地址，当访问个人中心页面自动跳转到登陆页面</p><pre class=" language-python"><code class="language-python">LOGIN_URL <span class="token operator">=</span> <span class="token string">'/login'</span></code></pre><p>重启项目，输入地址栏访问个人中心查看</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571215011716.png" alt></p><p>最重要的一步来了，就是表单继续提交的时候会发现情况不对，返回的还是首页页面，这个原因是因为form表单action提交的还是原来的地址，这里注意要删掉action字段，因为form表单如果不加上action就是提交到url地址的那栏，也就是<code>127.0.0.1:8000/user/login?next=/user/</code>，这个时候我们就要去修改登陆的方法类，也就是post请求要修改一下</p><p>这是我原来的代码：</p><pre class=" language-python"><code class="language-python">login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#在登陆成功之后跳转到首页</span><span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>127.0.0.1:8000/user/login?next=/user/</code>这个地址一看就是get方法请求的，我们直接在Request里面获取即可</p><pre class=" language-python"><code class="language-python">login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span>next_url<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果拿不到next，就默认赋值为goods:index，也就是默认跳转到首页</span>response<span class="token operator">=</span>redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> response<span class="token comment" spellcheck="true">#这里我修改了下我的写法，原理是一样的，都是跳转到要响应的页面</span></code></pre><p>经过上述配置，就可以完成开头所说的逻辑了</p><p>&emsp;</p><h3 id="方法二：使用LoginRequiredMixin类"><a href="#方法二：使用LoginRequiredMixin类" class="headerlink" title="方法二：使用LoginRequiredMixin类"></a>方法二：使用LoginRequiredMixin类</h3><p>在方法一里面，虽然是可以完成逻辑上的方法，但是这样未免很麻烦，每需要一个要限制登陆的页面，都要在路由里面添加限制，一两个无所谓，但是如果很多歌页面都需要限制登陆那未免就显得十分的麻烦。对于这种情况，我们应该封装在一个类里面做而不是在路由里面写。详细实现方法如下：</p><p>&emsp;</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571216461437.png" alt="官方文档"></p><p>官方文档写的也是十分的详细，虽然是全英文<del>~</del>整体而言方法是定义一个类，在类里面进行判断即可</p><p>对于这种对于全局都有作用的函数我封装到一个<code>utils</code>的文件夹里，并且取名为<code>Mixin.py</code></p><p>我们自定义一个类，类名我取名为<code>LoginRequiredMixin</code></p><p>先点击ctrl+as_view()查看类的实现方法</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571216810096.png" alt></p><p>这个方法我看了看，使用的是类方法来执行的</p><p>不管他，我直接copy过来</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">class</span> <span class="token class-name">LoginRequiredMixin</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>然后继承父类的方法，完整的代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">class</span> <span class="token class-name">LoginRequiredMixin</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        view <span class="token operator">=</span> super<span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> login_required<span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这样我就可以定义一个是否需要被限制登陆的类了</span></code></pre><p>然后在定义个人中心、订单、地址的类方法中继承这个方法即可，详情如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserInfoView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">UserOrderView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">UserAddressView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>这样就可以实现更为简便的方法了</p><p>这个方法的原理还是跟方法一一模一样的，<code>return login_required(view)</code>还是在view外面包装了一个<code>login_required</code>，只是这样写会没那么乱</p><p>&emsp;</p><h2 id="添加用户历史浏览记录"><a href="#添加用户历史浏览记录" class="headerlink" title="添加用户历史浏览记录"></a>添加用户历史浏览记录</h2><p>添加用户历史浏览记录我这里使用的是<code>hash</code>数据结构存储。依照逻辑来说，能记录用户浏览记录肯定是要先登录的，所以要先对用户判断是否登陆，具体代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 用户已经登录</span>conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>cart_key <span class="token operator">=</span> <span class="token string">'cart_%d'</span> <span class="token operator">%</span> user<span class="token punctuation">.</span>id<span class="token comment" spellcheck="true"># 获取用户购物车中的商品条目数</span>cart_count <span class="token operator">=</span> conn<span class="token punctuation">.</span>hlen<span class="token punctuation">(</span>cart_key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># hlen hash中的数目</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>cart_count<span class="token operator">=</span>cart_count<span class="token punctuation">)</span></code></pre><h2 id="显示历史浏览记录"><a href="#显示历史浏览记录" class="headerlink" title="显示历史浏览记录"></a>显示历史浏览记录</h2><p>每次访问商品详情页的时候，都会使用Redis的list数据结构去保存用户浏览信息，在获取浏览记录的时候 使用<code>lrange key start stop</code>就可以自定义取多少条数据，假如要取A1的所有数据：<code>lrange A1 0 -1</code></p><p>根据Django-redis的官方文档显示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232502432.png" alt></p><p>这里面的<code>default</code>就是之前配置的字段，如图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232579990.png" alt></p><p>在连接redis数据库之后，在数据字段里面显示前五个商品信息</p><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>history_key<span class="token operator">=</span><span class="token string">'history_%d'</span><span class="token operator">%</span>user<span class="token punctuation">.</span>idsku_ids<span class="token operator">=</span>con<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>history_key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>goods_li<span class="token operator">=</span>GoodSKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__in<span class="token operator">=</span>sku_ids<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用两层列表的原因是因为输入[2,1,3]，在mysql得出的结果顺序依然为1，2，3，所以只能用两层循环去遍历</span>goods_res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> a_id <span class="token keyword">in</span> sku_ids<span class="token punctuation">:</span>    <span class="token keyword">for</span> goods <span class="token keyword">in</span> goods_li<span class="token punctuation">:</span>        <span class="token keyword">if</span> a_id<span class="token operator">==</span>goods<span class="token punctuation">.</span>id<span class="token punctuation">:</span>            goods_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>goods<span class="token punctuation">)</span></code></pre><h2 id="后台自定义使用FastDFS存储资源"><a href="#后台自定义使用FastDFS存储资源" class="headerlink" title="后台自定义使用FastDFS存储资源"></a>后台自定义使用FastDFS存储资源</h2><p>Django默认保存资源是保存在Media_root指定目录下方，现在我这个项目要改成FastDFS服务器上，所以这里要修改文件的默认存储路径，这里还是直接查看Django文档</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232579990.png" alt></p><p>也就是说Django保存文件使用的是<code>FileSystemStorage</code>这个类，其中save方法实现了保存</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571233304579.png" alt></p><p>但是我们不能直接去修改源码，所以Django内置好了一套给我们自己去定义的存储类，我们只需要去继承<code>FileSystemStorage</code>的父类<code>Storage</code>就可以，继承<code>Storage</code>还必须要实现save和open方法，这里保存图片只需要实现save方法即可</p><p>同样我自定义存储类的方法卸载一个单独的文件夹下，这里我定义在utils里面的FastDFS文件夹下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571235260232.png" alt></p><p>里面的蓝色的<code>storage</code>就是自定义的文件，<code>client.conf</code>是我FasDFS的配置文件，基本上的功能，上传图片资源的模块我都已经写好了，直接修改自己的服务器IP就可以经行第二次开发</p><h2 id="页面资源静态化"><a href="#页面资源静态化" class="headerlink" title="页面资源静态化"></a>页面资源静态化</h2><p>在网站中，无论用户是否登陆都显示同一个页面，而如果人流量访问的越多，每个人访问都从数据库调用一遍就是一个非常伤服务器的操作，所以要把网站的常用页面给静态化。这里用的还是Celery去异步操作，具体的操作代码上的注释写的很详细，我这里只讲解我对这个问题的解决方案。</p><p>&emsp;</p><p>Django默认的后台<code>admin</code>是有一个<code>save_model</code>方法，也就是新增或更新数据时会自动调用，而我这个项目使用的是<code>xadmin</code>，不能直接调用<code>admin</code>的方法，依照网上博客的方法也不行，又不能去改写源代码，所以我想了个办法：在每次<code>return</code>返回给<code>index.html</code>数据的前，我都会先写一个缓存，这个缓存保存了返回给前端的数据，如果第二次访问的时候发现缓存改变了就给异步发送请求重新加载静态页面，如果没有改变就只进行一次对比之后返回静态页面，关键代码如下：</p><pre class=" language-python"><code class="language-python"> context <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'types'</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>            <span class="token string">'index_banner'</span><span class="token punctuation">:</span> index_banner<span class="token punctuation">,</span>            <span class="token string">'promotion_banner'</span><span class="token punctuation">:</span> promotion_banner<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> context <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置缓存数据,缓存的名字，内容，过期的时间</span>            cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'index_page_data'</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> context<span class="token operator">!=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'index_html_data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            generate_static_index_html<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>分页这个其实官方文档说的比较清楚了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571237664233.png" alt></p><p>初次之外还有一个方法，在github上start也有几百了，地址如下：<a href="https://github.com/jamespacileo/django-pure-pagination" target="_blank" rel="noopener">https://github.com/jamespacileo/django-pure-pagination</a></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571237740809.png" alt></p><p>这个功能也是比较完善的，还具备前一页后一页的功能，最重要的是还带有省略号的功能，而且使用起来也挺简单的，不过这里因为我的图片资源本来就少，用不着折腾这个所以就没用</p><h2 id="商品搜索"><a href="#商品搜索" class="headerlink" title="商品搜索"></a>商品搜索</h2><p>在商品搜索功能上，Django有一个全文检索框架<code>haystack</code>，开发者可以通过全文检索框架去使用搜索引擎,<code>haystack</code>支持whoosh、solr、Xapian、Elasticsearch四种全文检索引擎</p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>首先先安装<code>haystack</code></p><pre class=" language-python"><code class="language-python">pip install django<span class="token operator">-</span>haystack<span class="token comment" spellcheck="true">#你要用哪个搜索引擎就下载哪个，我这里用的是whoosh</span>pip install whoosh</code></pre><p>然后在setting的INSTALLED_APPS添加<code>haystack</code>，紧接着要在setting里面添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全文检索框架配置</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 使用whoosh引擎</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.whoosh_backend.WhooshEngine'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 索引文件路径</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 当添加、修改、删除数据时，自动生成索引</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><h3 id="配置索引文件"><a href="#配置索引文件" class="headerlink" title="配置索引文件"></a>配置索引文件</h3><p>在你需要被检索的包里面新建一个<code>search_indexes.py</code>文件，里面需要你配置的只有三个地方，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token comment" spellcheck="true">#第一个地方，导入你的模型类</span><span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU<span class="token comment" spellcheck="true">#第二个地方：索引类的格式名：模型类+Index</span><span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#索引字段document=True指定根据表的哪些字段简历索引文件制定在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author = indexes.CharField(model_attr='user')</span>    <span class="token comment" spellcheck="true"># pub_date = indexes.DateTimeField(model_attr='pub_date')</span><span class="token comment" spellcheck="true">#第三个地方：返回你的模型类</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> GoodsSKU    <span class="token comment" spellcheck="true"># 建立索引数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回所有数据就是对所有的数据进行索引</span></code></pre><p>配置完上面的字段后，需要自定义需要被检索的字段，格式为<code>模型类名的小写_text.txt</code>，比如我的是<code>GoodsSKU</code>，格式就为<code>goodssku_text.txt</code>,这个文件建立的地方是有要求的，比如我这里的形式如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571240232653.png" alt></p><p>search和indexes是固定的，goods是你的应用名字就是什么名字。<code>goodssku_text.txt</code>里面填写你要索引的字段，我的如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 指定根据表中的哪些字段建立索引数据</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的名称建立索引</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>desc <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的简介建立索引</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>goods<span class="token punctuation">.</span>detail <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的详情建立索引</span></code></pre><p>然后使用python shell命令<code>python manage.py rebuild_index</code>就可以生成你的索引文件</p><h3 id="搜索的页面"><a href="#搜索的页面" class="headerlink" title="搜索的页面"></a>搜索的页面</h3><p>搜索地址框搜索出来的页面也是单独设定的，首先搜索框的action的地址应该改为<code>&lt;form method=&#39;get&#39; action=&#39;/search&#39;&gt;</code></p><p>这里的action写什么，url地址那里就写什么，我的是search，所以url地址就是search</p><p>然后在全局的url地址那里添加<code>url(&#39;search/&#39;, include(&#39;haystack.urls&#39;)),  # 全文检索框架</code></p><p>最后要写一个搜索后出现的页面，搜索的页面要在indexes文件夹下，新建的搜索页面名字为<code>search.html</code>,里面关键展示部分的数据如下：</p><pre class=" language-python"><code class="language-python">搜索的关键字： <span class="token punctuation">{</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>当前页的Page对象： <span class="token punctuation">{</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> page <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>object <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>分页Paginator对象<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> paginator <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span></code></pre><p>自己去定义一个搜索后的页面，显示部分改成如上关键词就可以了</p><h3 id="使用jieba进行分词处理"><a href="#使用jieba进行分词处理" class="headerlink" title="使用jieba进行分词处理"></a>使用jieba进行分词处理</h3><p>我们汉语向来都是博大精深，不像英语一个单词就是一个意思，所以我们可以使用jieba包去对搜索的文字进行分词处理</p><p>首先先安装jieba分词</p><pre class=" language-python"><code class="language-python">pip install jieba</code></pre><p>然后去找haystack的源码目录</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571242333996.png" alt></p><p>创建一个<code>ChineseAnalyzer.py</code>文件，输入以下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">yield</span> t<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个代码其实就是对搜索框输入的字符串进行jieba分词处理</p><p>然后复制<code>whoosh_backend.py</code>文件为<code>whoose_cn_backend.py</code>，因为最好不要去修改源码</p><p>在新的文件<code>whoose_cn_backend.py</code>修改一些字段：</p><pre><code>#第一处要导入刚刚的jieba分词的包from .ChineseAnalyzer import ChineseAnalyzer第164行改成 TEXT(stored=True, analyzer=ChineseAnalyzer()</code></pre><p>最后修改setting的<code>&#39;ENGINE&#39;: &#39;haystack.backends.whoosh_backend.WhooshEngine&#39;</code>改为<code>&#39;ENGINE&#39;:&#39;haystack.backends.whoosh_cn_backend.WhooshEngine&#39;</code></p><p>最后执行python shell命令`python manage.py rebuild_index重新生成索引文件就可以jieba分词搜索了</p><h2 id="订单并发"><a href="#订单并发" class="headerlink" title="订单并发"></a>订单并发</h2><p>在Django的订单页面，处理订单的高并发处理有两种方法，一种叫悲观锁，另一种叫乐观锁</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>当查询某条记录时，即让数据库为该记录加锁，锁住记录后别人无法操作，使用类似如下语法</p><pre class=" language-python"><code class="language-python">select stock <span class="token keyword">from</span> tb_sku where id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">for</span> update<span class="token punctuation">;</span>SKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>select_for_update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>这个跟多线程的互斥锁原理十分的相像</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁不是锁，只是在修改数据库库存的时候跟修改前的数据做对比，判断修改时的库存是不是跟之前查询的库存一样，连续判断两次，如果不一样就不执行这个操作，一样就执行更改</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>这个其实不止有如上两个方法的，比如还有延迟队列、Redis集群来设计，但是单单对于Django来说这两个方法也足够应付了</p>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis和RabbitMQ作为消息队列的对比</title>
      <link href="/2019/10/15/redis-yu-rabbitmq/"/>
      <url>/2019/10/15/redis-yu-rabbitmq/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  这篇博客是属于一个总结，我在天天生鲜这个项目用到了消息中间件，所以就查阅了这方面的知识，对网上大部分的博客做一个总结</p><p>参考文章：</p><p><a href="https://blog.csdn.net/fengxiaolu311/article/details/82904217" target="_blank" rel="noopener">https://blog.csdn.net/fengxiaolu311/article/details/82904217</a></p><p><a href="https://blog.csdn.net/qq_42253147/article/details/93327939" target="_blank" rel="noopener">https://blog.csdn.net/qq_42253147/article/details/93327939</a></p><p><a href="https://blog.csdn.net/dd18709200301/article/details/79077839" target="_blank" rel="noopener">https://blog.csdn.net/dd18709200301/article/details/79077839</a></p></blockquote><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是一个专门的AMQP协议队列，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗，他的优势就在于提供可靠的队列服务，使得不同的应用可以通过同一个协议去共享数据，并且可做到异步。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis众所周知是一个内存级别的数据库，通过键值对的方式才存储数据，但虽然Redis本身是一个数据库，但是Redis本身是支持MQ（Message Queue，即消息队列）的，而且MQ的一些常用功能使用Redis也能实现，如果要求没那么高的话使用Redis作为中间件是一个不错的选择，完全可以当做一个轻量级的队列服务来使用。</p><h2 id="两者间具体的对比"><a href="#两者间具体的对比" class="headerlink" title="两者间具体的对比"></a>两者间具体的对比</h2><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>Redis：</p><ol><li>没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话，这条消息将丢失，不会存在内存中；</li><li>如果订阅者消费失败，消息丢失，这个时候就需要开发者手动处理；</li></ol><p>RabbitMQ：</p><ol><li>具有消息消费确认机制，如果发布一条消息，还没有消费者消费该队列，那么这条消息将一直存放在队列中，直到有消费者消费了该条消息，以此可以保证消息的可靠消费；</li><li>即使消费者消费失败，也会自动使消息体返回原队列，同时可全程持久化，保证消息体被正确消费；</li></ol><p>&emsp;</p><h3 id="可靠发布"><a href="#可靠发布" class="headerlink" title="可靠发布"></a>可靠发布</h3><p>Redis：Redis是不提供这方面的服务的，需要开发者自行实现；</p><p>RabbitMQ：具有发布确认功能，保证消息被发布到服务器；</p><p>&emsp;</p><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>Redis：Redis的持久化是针对于整个redis缓存的内容，它有RDB和AOF两种持久化方式，可以将整个redis实例持久化到磁盘，以此来做数据备份，防止异常情况下导致数据丢失；</p><p>RabbitMQ：队列，每一条消息，都可以选择是否持久化；</p><p>&emsp;</p><h3 id="队列监控"><a href="#队列监控" class="headerlink" title="队列监控"></a>队列监控</h3><p>Redis：不提供，需自行实现；</p><p>RabbitMQ：后台可以监控所有创建的队列的所有信息（内存，磁盘，消费者，生产者，速率等），良好的后台管理平台可以方面我们更好的使用；</p><p>&emsp;</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>RabbitMQ：RabbitMQ队列可以被多个消费者同时监控消费，但是每一条消息只能被消费一次，由于RabbitMQ的消费确认机制，因此它能够根据消费者的消费能力而调整它的负载；</p><p>Redis：Redis发布订阅模式，一个队列可以被多个消费者同时订阅，当有消息到达时，会将该消息依次发送给每个订阅者，她是一种消息的广播形式，redis本身不做消费者的负载均衡，因此消费效率存在瓶颈；</p><p>&emsp;</p><h3 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h3><p>Redis：采用主从模式，读写分离，但是故障转移还没有非常完善的官方解决方案；</p><p>RabbitMQ：集群采用磁盘、内存节点，任意单点故障都不会影响整个队列的操作；</p><p>&emsp;</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>Redis：不提供，需自行实现；</p><p>RabbitMQ：服务器过载的情况，对生产者速率会进行限制，保证服务可靠性；</p><p>&emsp;</p><h3 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h3><p>Redis：Redis是一个高效的缓存服务器，所有数据都保存在内存当中，所以它具备更高的实时性；</p><p>&emsp;</p><h3 id="出入队性能"><a href="#出入队性能" class="headerlink" title="出入队性能"></a>出入队性能</h3><p>对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlcy5jbml0YmxvZy5jb20vaS80NTI2NzEvMjAxNDA3LzAyMTQ0ODM5MzI0ODU3OC5wbmc" alt></p><p>实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><p>&emsp;</p><h2 id="两者的应用场景"><a href="#两者的应用场景" class="headerlink" title="两者的应用场景"></a>两者的应用场景</h2><p>Redis：轻量级，高并发，延迟敏感，即时数据分析、秒杀计数器、缓存等</p><p>RabbitMQ：重量级，高并发，异步批量数据异步处理、并行任务串行化，高负载任务的负载均衡等</p><blockquote><p>这篇博客的内容待继续完善，现在这里主要是总结了网上的经验，等我完全熟悉这两个数据库的时候我会拿案例来说明</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天生鲜项目总结（一）</title>
      <link href="/2019/10/14/tian-tian-sheng-xian-zong-jie-yi/"/>
      <url>/2019/10/14/tian-tian-sheng-xian-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做天天生鲜项目的时候使用了太多的技术，很多不会的我参考了很多的博客才做出来，这里记录这个项目的常用技术点，以便于我开发第二个系统</p></blockquote><h2 id="使用Django内置的方法发送邮件"><a href="#使用Django内置的方法发送邮件" class="headerlink" title="使用Django内置的方法发送邮件"></a>使用Django内置的方法发送邮件</h2><p>首先先在setting.py文件里面配置你的邮件服务器，邮件服务器在QQ邮箱、网易163邮箱可以免费注册。</p><p>将SMTP服务器的配置信息放到setting.py文件里面，配置信息如以下格式：</p><pre class=" language-python"><code class="language-python">EMAIL_HOST <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">"***************"</span>EMAIL_USE_TLS<span class="token operator">=</span> <span class="token boolean">False</span>EMAIL_FROM <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span></code></pre><p>然后在需要发送邮件的方法内导入需要的包就可以使用Django内置的发送邮件函数了</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入setting刚刚配置的文件</span><span class="token keyword">from</span> dailyfreshshop<span class="token punctuation">.</span>settings <span class="token keyword">import</span> SECRET_KEY<span class="token punctuation">,</span>EMAIL_FROM<span class="token comment" spellcheck="true">#使用Django内置的发送方法</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mailemail_title <span class="token operator">=</span> <span class="token string">"天天生鲜注册激活链接"</span>email_body <span class="token operator">=</span> <span class="token string">''</span>sender <span class="token operator">=</span> EMAIL_FROMreceiver <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span>html_message <span class="token operator">=</span> <span class="token string">"&lt;h1>%s，欢迎您注册天天生鲜商城，请点击下面的连接激活你的账号&lt;/h1>"</span> \<span class="token string">"&lt;a href='http://127.0.0.1:8000/active/%s'>http://127.0.0.1:8000/active/%s&lt;/a>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>    username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>send_mail<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> email_body<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#发送函数的参数</span><span class="token comment" spellcheck="true">#第一个参数email_title是标题</span><span class="token comment" spellcheck="true">#第二个参数email_body是内容，但是这个内容只能是字符串，如果再html_message写了这里就可以不写</span><span class="token comment" spellcheck="true">#第三个参数sender是setting配置好的SMTP服务器内容</span><span class="token comment" spellcheck="true">#第四个参数receiver是要发送的人的邮箱账号</span><span class="token comment" spellcheck="true">#第五个参数html_message=html_message，这个是如果你的内容共有html标签的话可以解析成html内容</span></code></pre><h2 id="邮箱注册，用户信息加密"><a href="#邮箱注册，用户信息加密" class="headerlink" title="邮箱注册，用户信息加密"></a>邮箱注册，用户信息加密</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在发送邮件注册验证码的时候，为了防止有心人注册之后使用发送过来的激活码调整激活码中用户的ID，不停地输入修改后的激活码就会给服务器带来压力，所以在发送邮箱激活码的时候一定要加密，并且设置时间</p><p>&emsp;</p><p>使用文档：<a href="https://itsdangerous.readthedocs.io/en/1.1.x/" target="_blank" rel="noopener">https://itsdangerous.readthedocs.io/en/1.1.x/</a></p><p>安装加密库：</p><pre><code>pip install -U itsdangerous</code></pre><p>&emsp;</p><p>打开python shell模拟使用方法：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDYyNCwiZXhwIjoxNTcxMDQ0MjI0fQ.IjEyMyI.jvwwArkwJP0sBMDyO8ydqIndyd1EqvrvsHAYah4sMqWhR4PFvaoQJ3rpybXmJMjbX4GTHNf1Fw_cCCFfuaixpQ'</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token string">'123'</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"------------------把过期时间设置成2秒-------------------------"</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info2<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDc2NiwiZXhwIjoxNTcxMDQwNzY4fQ.IjEyMyI.ePHmZzoJN1bPNhfI-QOM22ZcqUXjdYLuReDSd2AMu3Sgn1zCwcWTjTSTZq5ZD97WnzVou8J65qgb2fRh_Elpgg'</span><span class="token operator">>></span><span class="token operator">></span> 两秒后<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"C:\Users\LY\Envs\dailyfresh\lib\site-packages\itsdangerous\jws.py"</span><span class="token punctuation">,</span> line <span class="token number">205</span><span class="token punctuation">,</span> <span class="token keyword">in</span> loads    date_signed<span class="token operator">=</span>self<span class="token punctuation">.</span>get_issue_date<span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">,</span>itsdangerous<span class="token punctuation">.</span>exc<span class="token punctuation">.</span>SignatureExpired<span class="token punctuation">:</span> Signature expired</code></pre><p>以如上的测试依据，添加代码</p><p><strong>注册发送邮箱激活码的类：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#邮箱的激活码是由用户的ID去加密而成的</span>serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><p><strong>激活验证码的类</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AciveUserView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            info<span class="token operator">=</span>serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#获取info的用户id</span>            user_id<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token string">'confirm'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#根据id来获取用户信息</span>            user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>user_id<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>is_active<span class="token operator">=</span><span class="token number">1</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> SignatureExpired <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#激活链接过期了</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'激活链接过期，请重新提交'</span><span class="token punctuation">)</span></code></pre><p>这样就可以保证每一次发送的激活码都唯一，这样就保证了激活码的安全性</p><h2 id="异步方式"><a href="#异步方式" class="headerlink" title="异步方式"></a>异步方式</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/3.png" alt="Celery流程图"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; broker可以选择RabbitMQ和Redis作为消息中间人去处理耗时任务，RabbitMQ是生产环境中最佳的选择，使用文档如下：<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>，Redis也是一款功能完备的broker选项，虽然整体而言是肯定不如RabbitMQ的，但它本身支持MQ功能，RabbitMQ有的Redis也能基本上实现，所以完全可以当做一个轻量级的队列服务来使用。关于Redis和RabbitMQ之间的比较可以看我这篇博客：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网站设计中，邮件发送等操作还算是比较耗时的，如果发送邮件和完成跳转是同步进行的话，要等邮件发送完成再跳转到指定页面，停顿的那几秒就会给用户带来很不好的体验，所以异步耗时操作最好是交给异步方法去执行。这个项目我拿的是redis作为中间件来执行</p><h2 id="异步发送邮件"><a href="#异步发送邮件" class="headerlink" title="异步发送邮件"></a>异步发送邮件</h2><p>第一步当然是redis服务器能够正常启动啦，我的redis服务器是部署到本地的</p><p>第二步是把需要异步操作的任务封装成函数，然后把原来同步操作的步骤使用异步的函数代替</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mail<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true">#--------------这一段是异步任务执行端必须加入以下代码--------------------</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#celery_tasks是我存放异步任务的文件夹</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'celery_tasks.tasks'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1/8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#必须加上装饰器才可以变成异步任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">send_register_active_email</span><span class="token punctuation">(</span>to_email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""发送激活邮件"""</span>    <span class="token comment" spellcheck="true"># 组织邮件信息</span>    subject <span class="token operator">=</span> <span class="token string">'天天生鲜欢迎信息'</span>    message <span class="token operator">=</span> <span class="token string">''</span>    sender <span class="token operator">=</span> settings<span class="token punctuation">.</span>EMAIL_FROM  <span class="token comment" spellcheck="true"># 发送人</span>    receiver <span class="token operator">=</span> <span class="token punctuation">[</span>to_email<span class="token punctuation">]</span>    html_message <span class="token operator">=</span> <span class="token string">'&lt;h1>%s, 欢迎您成为天天生鲜注册会员&lt;/h1>请点击下面链接激活您的账户&lt;br/>&lt;a href="http://127.0.0.1:8000/user/active/%s">http://127.0.0.1:8000/user/active/%s&lt;/a>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>    send_mail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> message<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span></code></pre><p>&emsp;</p><p>最后需要执行命令</p><p>windows端：</p><pre class=" language-python"><code class="language-python">celery <span class="token operator">-</span>A celery_tasks<span class="token punctuation">.</span>tasks worker <span class="token operator">-</span>l info <span class="token operator">-</span>P eventlet</code></pre><p>Linux端：</p><pre><code>celery -A celery_tasks.tasks worker -l info</code></pre><p>看到ready就表示异步任务已经就绪啦，等待发送异步请求。而在原来的需要同步发送邮件的地方只需要改成异步函数的代码即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> send_register_active_email<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerUsername'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password1 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPassword'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPasswords'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        email <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registeremail'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password1 <span class="token operator">==</span> password2<span class="token punctuation">:</span>            password <span class="token operator">=</span> password1        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token string">"两次密码不一致，请重新填写"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># all可以自动验证数据是否完整</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        register_form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> register_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"email_msg"</span><span class="token punctuation">:</span> <span class="token string">"邮箱已注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"user_msg"</span><span class="token punctuation">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>is_active <span class="token operator">=</span> <span class="token boolean">False</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#加密用户的id发送链接</span>            serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>            token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>            token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># email_title = "天天生鲜注册激活链接"</span>            <span class="token comment" spellcheck="true"># email_body = ''</span>            <span class="token comment" spellcheck="true"># sender = EMAIL_FROM</span>            <span class="token comment" spellcheck="true"># receiver = [email]</span>            <span class="token comment" spellcheck="true"># html_message = "&lt;h1>%s，欢迎您注册天天生鲜商城，请点击下面的连接激活你的账号&lt;/h1>" \</span>            <span class="token comment" spellcheck="true">#                "&lt;a href='http://127.0.0.1:8000/active/%s'>http://127.0.0.1:8000/active/%s&lt;/a>" % (</span>            <span class="token comment" spellcheck="true">#                    username, token, token)</span>            <span class="token comment" spellcheck="true"># send_mail(email_title, email_body, sender, receiver, html_message=html_message)</span>            <span class="token comment" spellcheck="true">#---------------------------------------------------------</span>            send_register_active_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'邮箱验证码已经发送到您的邮箱，请点击连接激活'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'表单不准确'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Django注册登录表单验证"><a href="#Django注册登录表单验证" class="headerlink" title="Django注册登录表单验证"></a>Django注册登录表单验证</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Django有一套自己的表单验证方法，所以在注册登录等提交表单的操作时，可以在进行数据操作前使用表单验证一遍先，然后注册登录Django都有自己内置的方法，比如验证用户名密码不用我们自己去重写登陆逻辑，只需要<code>authenticate</code>内填上账号密码的参数就可以登陆。登陆方法也不用我们去写cookie等方法，直接一个login调用即可， 这里我拿项目的案例来说明</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新建一个froms.py文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#要添加以下两个包</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> captcha<span class="token punctuation">.</span>fields <span class="token keyword">import</span> CaptchaField<span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    这里的两个字段必须跟前台input定义的name相同    """</span>    username<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    这里对注册的表单进行验证和生成验证码，验证码的方法captcha已经写好了    验证码会在前台生成一个hidden的input框，后台会生成一长串的字符串，然后联合查询验证码的正确与否    """</span>    registerUsername<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    registerPassword<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    registeremail<span class="token operator">=</span>forms<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#使用forms.EmailField会对邮箱进行正则表达式的匹配，就不用开发者自己来写了</span>    captcha <span class="token operator">=</span> CaptchaField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"invalid"</span><span class="token punctuation">:</span><span class="token string">"验证码错误"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>类只需要继承<code>forms.Form</code>就可以定义表单验证系统了。<code>Form</code>内部自定义了表单验证的错误信息和验证系统，<code>EmailField</code>如果你的邮箱格式不对也会返回一个错误。<code>captcha</code>是验证码字段，<code>CaptchaField(error_messages={&quot;invalid&quot;:&quot;&quot;})</code>是可以自定义文件错误</p><p>&emsp;</p><p>在进行数据库操作的时候可以先进行数据的验证，案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#注册逻辑</span><span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        register_form<span class="token operator">=</span>RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'register.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'register_form'</span><span class="token punctuation">:</span>register_form<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerUsername'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password1 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPassword'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPasswords'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        email <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registeremail'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password1 <span class="token operator">==</span> password2<span class="token punctuation">:</span>            password <span class="token operator">=</span> password1            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token string">"两次密码不一致，请重新填写"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># all可以自动验证数据是否完整</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#重点在这里，从这里定义我刚刚写的form表单验证</span>            register_form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>            <span class="token keyword">if</span> register_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"email_msg"</span><span class="token punctuation">:</span> <span class="token string">"邮箱已注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"user_msg"</span><span class="token punctuation">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>                user<span class="token punctuation">.</span>is_active <span class="token operator">=</span> <span class="token boolean">False</span>                user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#加密用户的id发送链接</span>                serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>                info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>                token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>                token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>                send_register_active_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'邮箱验证码已经发送到您的邮箱，请点击连接激活'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'表单不准确'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#登陆逻辑</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">:</span>            username<span class="token operator">=</span>request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            checked<span class="token operator">=</span><span class="token string">'checked'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            username<span class="token operator">=</span><span class="token string">''</span>            checked<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span>username<span class="token punctuation">,</span><span class="token string">'checked'</span><span class="token punctuation">:</span>checked<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        password<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        login_form<span class="token operator">=</span>LoginForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> login_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user<span class="token operator">=</span>authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span>password<span class="token operator">=</span>password<span class="token punctuation">)</span>            <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>is_active<span class="token punctuation">:</span>                    login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#login方法是Django后台自定义的登陆方法，内置了cookie和session的方法</span>                    <span class="token comment" spellcheck="true">#默认登陆后跳转到首页</span>                    next_url<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    response<span class="token operator">=</span>redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#判断是否记住用户名</span>                    remember<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'remember'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> remember <span class="token operator">==</span> <span class="token string">"on"</span><span class="token punctuation">:</span>                        response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>max_age<span class="token operator">=</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        response<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> response                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"login.html"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"email_msg"</span><span class="token punctuation">:</span><span class="token string">"你的邮箱未激活"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"user_msg"</span><span class="token punctuation">:</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"login.html"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"login_form"</span><span class="token punctuation">:</span>login_form<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><p>在写前端的时候，在定义好的表单错误样式里，写上这么一条语句</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registerPassword %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>           <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registerPassword<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        密码必须在6~10位之间    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-passwords<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registerPassword %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>           <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registerPasswords<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        两次密码必须相同 且在6~10位之间    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registeremail %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registeremail<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-username-error<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>is-invalid invalid-feedback<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ email_msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        邮箱格式不正确    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试之常用模型</title>
      <link href="/2019/10/11/ruan-jian-ce-shi/"/>
      <url>/2019/10/11/ruan-jian-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试分类总览"><a href="#软件测试分类总览" class="headerlink" title="软件测试分类总览"></a>软件测试分类总览</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570813998688.png" alt="软件测试分类图"></p><p>单元测试：集中编码和单元测试中，大多数时候用来开发自测、自我校验的一个手段</p><p>冒烟测试：在后续需求中，对主要流程进行测试</p><p>集成测试：模块与模块之间的测试</p><p>系统测试：通过测试用例的执行来完成过程</p><p>α测试：α测试就是让用户、开发人员、测试人员共同参与的测试</p><p>β测试：β测试就是交给最终用户测试 ，简明而言就是游戏内测</p><p>……</p><h2 id="软件测试常用模型"><a href="#软件测试常用模型" class="headerlink" title="软件测试常用模型"></a>软件测试常用模型</h2><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，瀑布模型的软件生命周期是分为：<strong>计划、分析、设计、编码、测试和维护6个阶段</strong>，瀑布模型的缺点就是早期的错误只能到后期的测试阶段才能知道。V模型就是对瀑布模型做了个改进，在软件开发的生命周期里，软件开发和测试活动同时进行，这样机会极大的减少Bug的几率。</p><p>​        <img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570853745995.png" alt="V模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V模型最大的价值就是标明了测试过程中分开了很多个级别，同时也描述了开发过程阶段和测试阶段的对应关系：<strong>单元测试以详细设计为参考、集成测试以概要设计为参考、系统测试以需求分析为参考、到客户的验收测试以用户需求为参考</strong>，一一对应的关系十分明确，但是还是有局限性：<strong>测试还是在编码阶段的最后一个活动，比如需求分析的错误还是要到系统测试才能发现，有十分大的滞后性</strong>，所以这就产生了一个新的模型：<strong>W模型</strong></p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于V模型而言，W模型更为科学，W模型是V模型的一个发展，强调测试的过程伴随着整个开发周期，测试的对象也不仅仅只是程序，需求、功能、设计也同样需要测试，测试和开发也就是变成了同步执行，有利于尽早的发现问题，对于那种高性能、高风险的互联网软件、或者难以进行模块化的大型软件，使用V模型就有一定的困难和风险了，需要更强调迭代的开发模型和敏捷开发模型，这个时候使用W模型就会更好一些。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型就是从V模型演化而来，相对于V模型，W模型增加了软件各开发阶段中应同步进行的验证和确认活动，W模型明确了测试和开发的并行关系，测试与开发同步进行更利于发现问题和降低风险。</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570854774951.png" alt="W模型过程"></p><p>图中一条线是软件开发研发线，一条是测试线</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型自身也具有局限性：<strong>W模型和V模型一样，都把软件开发的周期当做一个串行的活动，没有办法支持迭代</strong>，后来针对于V模型和W模型的局限性开发了一个H模型</p><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H模型中，真正的测试级别中不存在严格的次序关系，各阶段之间可以反复的触发、迭代、增量。H模型把测试活动完全独立出来，贯穿于整个产品的周期里，和其他流程是并发执行的。H模型的特点就是只要测试条件成立，就可以马上开始测试，也就是软件测试是一个独立的流程</p><h3 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570855415109.png" alt="X模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型就是把一个程序分为多个片段，左边是针对于一个单独的程序片段进行互相分离的编码和测试，后面进行频繁的集成和交接，最终集成为一个可以执行的程序，然后再进行测试。这样就对一个程序进行反复的迭代。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型也是唯一一个定位了探索性测试的测试模型，是一种特殊的类型的测试：前面进行了各个程序片段的单独测试，到集成测试的时候，更多依赖于没有事先计划的特殊类型的测试方式，让有经验的人可以发现更多的软件错误，X模型也就是对测试人员要求比较高的一个模型方式，可迭代、可集成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型对测试人员要求比较高，就目前而言，用的最多的可能是W模型的一个变换、或者是W和H的一个结合，测试的内容以W模型为准，测试的周期方法进度以H模型作为一个指导的，X模型更多时候是对于最终测试或熟练性测试的一个模板</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy下载中间件使用和配置</title>
      <link href="/2019/10/11/scrapy4/"/>
      <url>/2019/10/11/scrapy4/</url>
      
        <content type="html"><![CDATA[<blockquote><p> scrapy在请求网站的时候必须经过这个下载中间件</p><p>一些网站反爬虫措施做的比较严谨的时候，如果你并发过高就会封你ip等反爬虫操作，这个时候就可以使用一些代理、随机请求头来躲避这些反爬虫措施</p></blockquote><h2 id="常见的反爬虫策略"><a href="#常见的反爬虫策略" class="headerlink" title="常见的反爬虫策略"></a>常见的反爬虫策略</h2><ul><li><p>动态设置User-Agent（随机切换User-Agent，模拟不同用户的浏览器信息）</p></li><li><p>禁用Cookies（也就是不启用cookies middleware，不向Server发送cookies，有些网站通过cookie的使用发现爬虫行为）</p><ul><li>可以通过<code>COOKIES_ENABLED</code> 控制 CookiesMiddleware 开启或关闭</li></ul></li><li><p>设置延迟下载（防止访问过于频繁，设置为 2秒 或更高）</p></li><li><p>Google Cache 和 Baidu Cache：如果可能的话，使用谷歌/百度等搜索引擎服务器页面缓存获取页面数据。</p></li><li><p>使用IP地址池：VPN和代理IP，现在大部分网站都是根据IP来ban的。</p></li><li><p>使用 <a href="https://scrapinghub.com/crawlera" target="_blank" rel="noopener">Crawlera</a>（专用于爬虫的代理组件），正确配置和设置下载中间件后，项目所有的request都是通过crawlera发出（也就是爬虫代理商，直接使用他们给你的账号密码就可以不停地切换IP来反爬虫）</p><pre class=" language-python"><code class="language-python">  DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'scrapy_crawlera.CrawleraMiddleware'</span><span class="token punctuation">:</span> <span class="token number">600</span>  <span class="token punctuation">}</span>  CRAWLERA_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>  CRAWLERA_USER <span class="token operator">=</span> <span class="token string">'注册/购买的UserKey'</span>  CRAWLERA_PASS <span class="token operator">=</span> <span class="token string">'注册/购买的Password'</span></code></pre></li></ul><h2 id="设置下载中间件（Downloader-Middlewares）"><a href="#设置下载中间件（Downloader-Middlewares）" class="headerlink" title="设置下载中间件（Downloader Middlewares）"></a>设置下载中间件（Downloader Middlewares）</h2><p>下载中间件是处于引擎(crawler.engine)和下载器(crawler.engine.download())之间的一层组件，可以有多个下载中间件被加载运行。</p><ol><li>当引擎传递请求给下载器的过程中，下载中间件可以对请求进行处理 （例如增加http header信息，增加proxy信息等）；</li><li>在下载器完成http请求，传递响应给引擎的过程中， 下载中间件可以对响应进行处理（例如进行gzip的解压等）</li></ol><p>要激活下载器中间件组件，将其加入到 DOWNLOADER_MIDDLEWARES 设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。</p><h2 id="下载中间件字段"><a href="#下载中间件字段" class="headerlink" title="下载中间件字段"></a>下载中间件字段</h2><h3 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h3><ul><li><p>当每个request通过下载中间件时，该方法被调用。</p></li><li><p>process_request() 必须返回以下其中之一：一个 None 、一个 Response 对象、一个 Request 对象或 raise IgnoreRequest:</p><ul><li>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</li><li>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</li><li>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</li><li>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li><p>参数:</p><ul><li><p><code>request (Request 对象)</code> – 处理的request</p></li><li><p><code>spider (Spider 对象)</code> – 该request对应的spider</p></li></ul></li></ul><h3 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h3><p>当下载器完成http请求，传递响应给引擎的时候调用</p><ul><li>process_request() 必须返回以下其中之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。<ul><li>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</li><li>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</li><li>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li>参数:<ul><li><code>request (Request 对象)</code> – response所对应的request</li><li><code>response (Response 对象)</code> – 被处理的response</li><li><code>spider (Spider 对象)</code> – response所对应的spider</li></ul></li></ul><h2 id="编写中间件字段"><a href="#编写中间件字段" class="headerlink" title="编写中间件字段"></a>编写中间件字段</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先先设置你的UserAgent和PROXIES的数据，可以在setting里面设置，也可以在中间件里面设置，但是setting直接导入就好了更方便，在类里面设置还得用个self。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如我的setting.py文件</p><pre class=" language-python"><code class="language-python">USER_AGENTS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/9.27 (Windows NT 5.2; U; zh-cn)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/8.0 (Macintosh; PPC Mac OS X; U; en)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Linux; U; Android 4.0.3; zh-cn; M032 Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13'</span><span class="token punctuation">]</span>PROXIES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"ip_port"</span><span class="token punctuation">:</span> <span class="token string">"IP地址:端口号"</span><span class="token punctuation">,</span> <span class="token string">"user_passwd"</span><span class="token punctuation">:</span> <span class="token string">"账号:密码"</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token punctuation">]</span></code></pre><p>然后编写中间件字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> base64<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> USER_AGENTS<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> PROXIES<span class="token comment" spellcheck="true"># 随机的User-Agent</span><span class="token keyword">class</span> <span class="token class-name">RandomUserAgent</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        useragent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>USER_AGENTS<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print useragent</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> useragent<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RandomProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>PROXIES<span class="token punctuation">)</span>        <span class="token keyword">if</span> proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 没有代理账户验证的代理使用方式</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 对账户密码进行base64编码转换</span>            base64_userpasswd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对应到代理服务器的信令格式里</span>            request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Proxy-Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Basic '</span> <span class="token operator">+</span> base64_userpasswd            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span></code></pre><p>HTTP代理登陆的时候是要使用登陆验证的，原因如下：</p><blockquote><p>为什么HTTP代理要使用base64编码：</p><p>HTTP代理的原理很简单，就是通过HTTP协议与代理服务器建立连接，协议信令中包含要连接到的远程主机的IP和端口号，如果有需要身份验证的话还需要加上授权信息，服务器收到信令后首先进行身份验证，通过后便与远程主机建立连接，连接成功之后会返回给客户端200，表示验证通过，就这么简单，下面是具体的信令格式：</p></blockquote><pre class=" language-python"><code class="language-python">CONNECT <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span>Proxy<span class="token operator">-</span>Authorization<span class="token punctuation">:</span> Basic bGV2I1TU5OTIzUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> OpenFetion</code></pre><blockquote><p>其中<code>Proxy-Authorization</code>是身份验证信息，Basic后面的字符串是用户名和密码组合后进行base64编码的结果，也就是对username:password进行base64编码。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy模拟登陆的方法</title>
      <link href="/2019/10/10/scrapy3/"/>
      <url>/2019/10/10/scrapy3/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 以下三个策略以人人网作为案例来描述</p></blockquote><h2 id="策略一：使用保存的cookie登陆（100-成功）"><a href="#策略一：使用保存的cookie登陆（100-成功）" class="headerlink" title="策略一：使用保存的cookie登陆（100%成功）"></a>策略一：使用保存的cookie登陆（100%成功）</h2><h3 id="登陆后查看自己的cookie信息"><a href="#登陆后查看自己的cookie信息" class="headerlink" title="登陆后查看自己的cookie信息"></a>登陆后查看自己的cookie信息</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570770626349.png" alt="cookie信息"></p><h3 id="重写Spider类的start-requests方法"><a href="#重写Spider类的start-requests方法" class="headerlink" title="重写Spider类的start_requests方法"></a>重写Spider类的start_requests方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为所有的爬虫类都是继承于Spider的，所以重写start_requests方法可以适用于所有的爬虫类</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最重要记得要把setting.py的COOKIES_ENABLED开启起来</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的setting.py文件关键配置如下：</p><pre class=" language-python"><code class="language-python">COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>然后使用命令创建一个新的爬虫文件(renren.py)</p><h3 id="编写爬虫字段"><a href="#编写爬虫字段" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>renren.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    cookies <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"JSESSIONID"</span><span class="token punctuation">:</span> <span class="token string">"abc6L9jo347Dw9fWUf52w"</span><span class="token punctuation">,</span>    <span class="token string">"anonymid"</span> <span class="token punctuation">:</span> <span class="token string">"k1lmx3wm-pdg03r"</span><span class="token punctuation">,</span>    <span class="token string">"_r01_"</span> <span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"depovince"</span> <span class="token punctuation">:</span> <span class="token string">"GW"</span><span class="token punctuation">,</span>    <span class="token string">"springskin"</span> <span class="token punctuation">:</span> <span class="token string">"set"</span><span class="token punctuation">,</span>    <span class="token string">"jebe_key"</span> <span class="token punctuation">:</span> <span class="token string">"09e48352-6a6a-490c-a137-d78928ffe419%7C18edbeb77a97f6145ca4db5e06940ded%7C1570768484510%7C1%7C1570768487369"</span><span class="token punctuation">,</span>    <span class="token string">"t"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"societyguester"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span> <span class="token punctuation">:</span> <span class="token string">"972451360"</span><span class="token punctuation">,</span>    <span class="token string">"xnsid"</span> <span class="token punctuation">:</span> <span class="token string">"46d5aac1cccccccc"</span><span class="token punctuation">,</span>    <span class="token string">"loginfrom"</span> <span class="token punctuation">:</span> <span class="token string">"null"</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"deng.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>爬取得到的结果如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570776253453.png" alt></p><p>这个方法虽然麻烦，但是肯定是可以成功的</p><h2 id="策略二：使用post请求来模拟登陆"><a href="#策略二：使用post请求来模拟登陆" class="headerlink" title="策略二：使用post请求来模拟登陆"></a>策略二：使用post请求来模拟登陆</h2><h3 id="找到表单登陆请求地址"><a href="#找到表单登陆请求地址" class="headerlink" title="找到表单登陆请求地址"></a>找到表单登陆请求地址</h3><p>如果使用post请求的话就一定要找到人人网登陆表单的请求地址，人人网的请求地址如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570769345282.png" alt="人人网表单"></p><p>得到的地址就为’<a href="http://www.renren.com/PLogin.do&#39;" target="_blank" rel="noopener">http://www.renren.com/PLogin.do&#39;</a></p><h3 id="编写爬虫字段-1"><a href="#编写爬虫字段-1" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.renren.com/972451360/newsfeed/photo']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/PLogin.do'</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> formdata<span class="token operator">=</span>data<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>        <span class="token keyword">yield</span> request    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>这个方法其实就先访问登陆页面的表单，然后登陆成功之后再去爬取想要的页面</p><h2 id="策略三：模拟正规的登陆流程来模拟登陆"><a href="#策略三：模拟正规的登陆流程来模拟登陆" class="headerlink" title="策略三：模拟正规的登陆流程来模拟登陆"></a>策略三：模拟正规的登陆流程来模拟登陆</h2><h3 id="编写爬虫字段-2"><a href="#编写爬虫字段-2" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>这个方法不同于前两种，前两种是重写start_requests方法，这个方法是模拟用户的登陆流程：先访问登陆页面，输入账号密码之后再访问详情页面</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"你的邮箱"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"你的密码"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page            <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 处理响应内容</span>    <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h2 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单单爬取人人网这类的简单网站用以上三个方法是没问题的，但是类似于知乎这种使用<code>Django</code>作为后台的网站，登陆注册都有个<code>_xsrf</code>字段放在form表单的末尾，这个字段是Django为了防止 跨站域请求伪造攻击而添加的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以在使用模拟登陆前一定要查看表单有没有这个字段，如果有就用xpath或者正则表达式提取出来，然后一起提交。比如我这里拿最后一个方法来说明：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        _xsrf <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//_xsrf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"xxx@163.com"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token string">"_xsrf"</span> <span class="token punctuation">:</span> _xsrf <span class="token punctuation">}</span><span class="token punctuation">,</span>        callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>        <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 处理响应内容</span>        <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>                filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之CrawlSpider类</title>
      <link href="/2019/10/09/crawlspider/"/>
      <url>/2019/10/09/crawlspider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>爬虫文件继承的类不仅只有scrapy.Spider类，还有很多类，但是Spider是所有爬虫类的基类。这里我介绍一下CrawlSpider类的使用、说明和spider类和CrawlSpider类的对比</p></blockquote><h2 id="Spider与CrawlSpider案例对比"><a href="#Spider与CrawlSpider案例对比" class="headerlink" title="Spider与CrawlSpider案例对比"></a>Spider与CrawlSpider案例对比</h2><h3 id="Spider爬取有页码的数据"><a href="#Spider爬取有页码的数据" class="headerlink" title="Spider爬取有页码的数据"></a>Spider爬取有页码的数据</h3><p>Spider在爬取有页码的数据的时候要使用回调函数，在请求完一页的数据之后使用回调函数继续执行下一个页面</p><p>比如我这要爬取的是csdn的论坛网站</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570709064975.png" alt></p><p>下面有五页数据，从第二页开始url地址就会增加个pages，所以在每次请求完页面的时候都给pages+1去重新爬取新的页面。</p><p>部分源码如下：</p><p>scdemo.py（爬虫文件）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ScdemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'scdemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://sou.zhaopin.com/?jl=763']</span>    pages<span class="token operator">=</span><span class="token number">1</span>    url<span class="token operator">=</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page='</span>    start_urls <span class="token operator">=</span><span class="token punctuation">[</span>url<span class="token operator">+</span>str<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pages<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pages<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pages<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># with open("bbs.html", "wb+") as f:</span>        <span class="token comment" spellcheck="true">#     f.write(response.body)</span></code></pre><p>pipelines.py（管道文件）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">ZlzhaopingPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"zp.json"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>里面代码关键的就是确定爬取的页码是多少，然后每一次请求玩一页的数据都让pages+1，这样就可以循环出所有的页码的数据了。不过使用CrawlSpider会更简单，CrawlSpider可以创建自己的规则,比如只要存在还有跳转到下一页页码的url字段，就反复请求。</p></blockquote><h3 id="CrawlSpider爬取有页码的数据"><a href="#CrawlSpider爬取有页码的数据" class="headerlink" title="CrawlSpider爬取有页码的数据"></a>CrawlSpider爬取有页码的数据</h3><p>crawlSpider我先演示一下同样是爬取同一个网页</p><p>使用如下命令快捷创建CrawlSpider</p><pre class=" language-python"><code class="language-python">$ scrapy genspider <span class="token operator">-</span>t crawl clidemo https<span class="token punctuation">:</span><span class="token operator">//</span>bbs<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>forums<span class="token operator">/</span>OL_Script?page<span class="token operator">=</span><span class="token number">0</span></code></pre><p>clidemo.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ClidemoSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'clidemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://bbs.csdn.net/forums/OL_Script?page=2']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page=0'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span>r<span class="token string">'page=\d+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian</code></pre><blockquote><p>运行之后就可以直接把所有的页面全部爬完了,方法比Spider来写方便很多。</p><p>唯一不足的地方就是CrawlSpider一次性把全部的页码请求完，而Spider可以设置一个停止条件，不必全部爬完。</p></blockquote><h2 id="CrawlSpider的字段详解"><a href="#CrawlSpider的字段详解" class="headerlink" title="CrawlSpider的字段详解"></a>CrawlSpider的字段详解</h2><p>CrawlSpider源码没啥好解释的，写的挺清楚的，这里解释一下CrawlSpider的匹配规则和提取规则</p><p><strong>LinkExtractor：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> allow<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restrict_xpaths<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 tags<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonicalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> process_value<span class="token operator">=</span>None<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>None<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>其中主要的参数如下：</p><ul><li><code>allow</code>：满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</li><li><code>deny</code>：与这个正则表达式(或正则表达式列表)不匹配的URL一定不提取。</li><li><code>allow_domains</code>：会被提取的链接的domains。</li><li><code>deny_domains</code>：一定不会被提取链接的domains。</li><li><code>restrict_xpaths</code>：使用xpath表达式，和allow共同作用过滤链接。</li></ul><p><strong>Rule：</strong></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> follow<span class="token operator">=</span>None<span class="token punctuation">,</span> process_links<span class="token operator">=</span>None<span class="token punctuation">,</span> process_request<span class="token operator">=</span>identity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor        self<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback        self<span class="token punctuation">.</span>cb_kwargs <span class="token operator">=</span> cb_kwargs <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>process_links <span class="token operator">=</span> process_links        self<span class="token punctuation">.</span>process_request <span class="token operator">=</span> process_request        <span class="token keyword">if</span> follow <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">if</span> callback <span class="token keyword">else</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> follow</code></pre><ul><li><p><code>link_extractor</code>：是一个Link Extractor对象，用于定义需要提取的链接。</p></li><li><p><code>callback</code>： 从link_extractor中每获取到链接时，参数所指定的值作为回调函数，该回调函数接受一个response作为其第一个参数。</p><blockquote><p>注意：当编写爬虫规则时，避免使用parse作为回调函数。由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</p></blockquote></li><li><p><code>follow</code>：是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进(就是是否根据爬取到的页面继续点进去爬取)。 如果callback为None，follow 默认就为True。如果写了callback，follow默认就为False</p></li><li><p><code>process_links</code>：指定该spider中哪个的函数将会被调用，从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。（比如一些网站，在你快速爬取的时候回给你一些错误的链接让你中断爬取，通常会修改url地址的某些参数，比如说&amp;改成？，但是使用CrawlSpider的话，只要写一个函数来修改就可以了，方法如 process_links=”deal_links”）</p></li><li><p><code>process_request</code>：指定该spider中哪个的函数将会被调用， 该规则提取到每个request时都会调用该函数。 (用来过滤request)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy框架初识</title>
      <link href="/2019/10/07/scrapy/"/>
      <url>/2019/10/07/scrapy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>​        我们原生爬虫需要使用urllib、requests等库去请求指定的网址，然后通过正则表达式、xpath、css选择等去解析网址，得到自己想要的信息，然后再写一个函数存储到数据库或者本地文件中，这样思路虽然说很清晰，但是流程总归而言还是比较麻烦的，而scrapy框架则帮我们封装好了所有的流程，我们只需要编写几行代码就可以爬取我们需要的资源。</p></blockquote><h2 id="scrapy架构图"><a href="#scrapy架构图" class="headerlink" title="scrapy架构图"></a>scrapy架构图</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/scrapy_all.png" alt="scrapy架构图"></p><ul><li><p><code>Scrapy Engine</code>就是爬虫的引擎，负责<code>Spider</code>、<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>之间的通讯</p></li><li><p><code>Scheduler(调度器)</code>：负责引擎传递过来的request请求，并且按照一定的方式整理排列</p></li><li><p><code>Downloader（下载器）</code>：负责下载引擎传递过来的所有request请求，然后将得到的Responses还给引擎，由引擎交给<code>spiders</code>处理</p></li><li><p><code>Downloader Middlewares（下载中间件）</code>：自定义扩展下载功能的地方，比如需要添加下载的代理等</p></li><li><p><code>Spider（爬虫）</code>：负责从Responses分析提取出所要的数据，如果Responses还有需要的URL数据，就把这些数据交给引擎，由引擎传递给<code>Scheduler(调度器)</code>去处理</p></li><li><p><code>Spider Middlewares（Spider中间件）</code>：一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests），这个很少用到</p></li><li><p><code>Item Pipeline(管道)</code>：负责处理spiders获取到的item，并且对这些数据进行存储、分析、过滤等处理</p></li></ul><h2 id="scrapy文件配置详解"><a href="#scrapy文件配置详解" class="headerlink" title="scrapy文件配置详解"></a>scrapy文件配置详解</h2><p>创建项目：</p><pre><code>scrapy startproject demo(你的项目名)</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570425985011.png" alt></p><p>然后就可以进入刚刚创建的demo项目了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426136366.png" alt></p><p>scrapy.cfg里面是确定项目的配置文件是哪个</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426236269.png" alt></p><p>如图，项目的配置文件就是<code>demo/setting.py</code></p><p>项目的所有文件如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426417062.png" alt></p><p><code>items.py</code>是根据要爬取的数据的字段进行设置</p><p><code>pipelines.py</code>是管道文件，即把爬取下来的数据进行存储和过滤等操作</p><p><code>setting.py</code>是核心配置文件</p><pre class=" language-python"><code class="language-python"><span class="token number">12</span><span class="token punctuation">.</span> BOT_NAME <span class="token operator">=</span> <span class="token string">'demo'</span>                            <span class="token comment" spellcheck="true">#项目名字</span><span class="token number">14</span><span class="token punctuation">.</span> SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'demo.spiders'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#项目模板位置</span><span class="token number">15</span><span class="token punctuation">.</span> NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'demo.spiders'</span>            <span class="token comment" spellcheck="true">#新爬虫模板位置</span><span class="token number">22</span><span class="token punctuation">.</span> ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span>                         <span class="token comment" spellcheck="true">#是否遵守robots协议</span><span class="token number">25</span><span class="token punctuation">.</span> CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">32</span>                    <span class="token comment" spellcheck="true">#爬虫的并发量</span><span class="token number">30</span><span class="token punctuation">.</span> DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span>                            <span class="token comment" spellcheck="true">#爬虫延迟</span><span class="token number">36</span><span class="token punctuation">.</span> COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token comment" spellcheck="true">#是否启用cookie，不想爬虫留下自己的痕迹就不用开启</span><span class="token number">42</span><span class="token punctuation">.</span> DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">#42-45 默认的请求头</span><span class="token number">43</span><span class="token punctuation">.</span>   <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">.</span>   <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token number">49</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#SPIDER_MIDDLEWARES = {                        #爬虫中间件设置，数字越小优先级越大</span><span class="token number">50</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoSpiderMiddleware': 543,</span><span class="token number">51</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">55</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#DOWNLOADER_MIDDLEWARES = {                    #下载中间件</span><span class="token number">56</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoDownloaderMiddleware': 543,</span><span class="token number">57</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">67</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#ITEM_PIPELINES = {                            #管道文件</span><span class="token number">68</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.pipelines.DemoPipeline': 300,</span><span class="token number">69</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span></code></pre><p>更多的详细配置可见<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref" target="_blank" rel="noopener">官方文档</a></p><h2 id="第一个scrapy爬虫"><a href="#第一个scrapy爬虫" class="headerlink" title="第一个scrapy爬虫"></a>第一个scrapy爬虫</h2><p>scrapy的所有命令都可以用cmd看到</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570517173800.png" alt></p><p>创建爬虫文件：</p><pre><code>scrapy genspider bilibili(爬虫文件名) https://www.bilibili.com/(要爬虫的网站)</code></pre><p>刚刚创建的爬虫项目内容如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true">#允许访问的域</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://https://www.bilibili.com//'</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#开始爬取的网站地址</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>                                        <span class="token comment" spellcheck="true">#解析方法</span>        <span class="token keyword">pass</span></code></pre><p>现在编写一些请求函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/v/game/stand_alone/?spm_id_from=333.6.b_7072696d6172795f6d656e75.41#/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"demo.html"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>然后执行命令</p><pre class=" language-python"><code class="language-python">scrapy crawl bilibili</code></pre><p>就可以请求bilibili的页面，然后把源代码写到demo.html文件了</p><h2 id="将scrapy得到的结果保存到第三方格式"><a href="#将scrapy得到的结果保存到第三方格式" class="headerlink" title="将scrapy得到的结果保存到第三方格式"></a>将scrapy得到的结果保存到第三方格式</h2><p>scrapy是默认有xpath解析库的，所以可以直接使用xpath，这里拿传播智客的讲师页面来演示</p><p>创建一个爬虫文件</p><pre class=" language-python"><code class="language-python">scrapy genspider itcast http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>cn<span class="token operator">/</span></code></pre><p>首先先编写要确定爬取的部分</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570469433346.png" alt></p><p>得到如上页面说明爬取的内容正确</p><p>然后在<code>items.py</code>编写要存储的字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DemoItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    title<span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后再编写爬虫文件，将爬取的内容存储到这些字段中</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            teacherItem<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Item<span class="token punctuation">)</span>        <span class="token keyword">return</span> teacherItem</code></pre><p>最后再执行命令：</p><pre><code>$ scrapy crawl itcast -o itcast.csv</code></pre><p>可以保存为（json，csv，xml）等格式</p><h2 id="使用管道来存储文件"><a href="#使用管道来存储文件" class="headerlink" title="使用管道来存储文件"></a>使用管道来存储文件</h2><p>管道就是在爬取数据之后的处理过程，这里拿个案例来说明</p><p>与上面不同的是爬取的结果不是直接return返回，因为return之后程序就结束了，所以使用yield返回</p><p>itcast.py文件(你的爬虫文件)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.itcast.cn/']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># teacherItem = []</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># teacherItem.append(Item)</span>            <span class="token keyword">yield</span> Item        <span class="token comment" spellcheck="true"># return teacherItem</span></code></pre><p>然后在piplines.py编写存储的方式，这里我用的是存储到json文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">DemoPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"teacher.json"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="scrapy-shell的使用"><a href="#scrapy-shell的使用" class="headerlink" title="scrapy shell的使用"></a>scrapy shell的使用</h2><p>scrapy shell可以帮助我们快速查看网页的请求，一般我们在爬取网站的时候，可以先试一下使用scrapy shell启动，因为有些网页是使用ajax或者js来显示的，直接以上面演示的方式请求只能请求到一个空的网页，比如我现在要爬取一个智联招聘的页面：</p><pre class=" language-python"><code class="language-python">$ scrapy shell  https<span class="token punctuation">:</span><span class="token operator">//</span>sou<span class="token punctuation">.</span>zhaopin<span class="token punctuation">.</span>com<span class="token operator">/</span>?jl<span class="token operator">=</span><span class="token number">763</span><span class="token operator">&amp;</span>kw<span class="token operator">=</span>python<span class="token operator">&amp;</span>kt<span class="token operator">=</span><span class="token number">3</span><span class="token operator">&amp;</span>sf<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>st<span class="token operator">=</span><span class="token number">0</span></code></pre><p> 进入shell命令行之后输入命令</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> view<span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>然后就可以通过你的默认浏览器看到请求后的结果，如果爬取后的网页是跟浏览器输入地址访问的一样的话，那么就可以直接像我上面演示的方式请求。如果请求后发现重要数据为空的话，比如我这样：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570623395604.png" alt="scrapy直接爬取智联招聘页面"></p><p>因为智联招聘的页面是通过js去请求的，所以这些数据都没有显示在request请求的页面上，因为这部分的数据都是使用js去加载的，所以只要打开调试网页查看js的请求地址，然后去请求js的请求地址就可以获取这部分的数据了。</p><p>更多关于如何提取异步加载的数据可以在《scrapy爬取动态网页》博客可以详解</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五大数据结构的介绍及基本命令使用</title>
      <link href="/2019/09/28/redis2/"/>
      <url>/2019/09/28/redis2/</url>
      
        <content type="html"><![CDATA[<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><h3 id="String的限制"><a href="#String的限制" class="headerlink" title="String的限制"></a>String的限制</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String类型可以存储任何形式的字符串，比如整型，数字，二进制数据，json对象等，但是在有一个内存大小限制，最大只能存储512M</p><h3 id="字符串的API"><a href="#字符串的API" class="headerlink" title="字符串的API"></a>字符串的API</h3><ul><li>赋值：<ul><li>set ：<code>set key value</code>，加键值对，无论key是否存在都设置</li><li>setnx ：<code>setnx key value</code>，key不存在才添加键值对</li><li>set  xx：<code>set key value xx</code>，key存在才设置键值对</li><li>mset ：<code>mset key1 value1 key2 value2</code>，设置多个键值对，时间复杂度为O(n)</li><li>getset ：<code>getset key newvalue</code>，添加新的值并且返回老的值</li><li>append ：<code>append key value</code>，将value追加到旧的value</li><li>setrange ：<code>setrange key index value</code>，设置指定下标所有对应的值，比如hello的值为world，setrange hello 0 L就是得到Lorld</li></ul></li><li>查询：<ul><li>get ：<code>get key</code>，获取键值对</li><li>mget ：<code>mget key1 key2</code>，批量获取key，原子操作，时间复杂度为O(n)</li><li>strlen ：<code>strlen key</code>，返回字符串的长度(中文一个字占两个字符)</li><li>getrange ：<code>getrange key start end</code>，获取字符串指定下标的所有值，比如hello的值为world，getrange hello 0 2就是得到wor</li></ul></li><li>删除：<ul><li>del：<code>del key</code>，删除键值对</li></ul></li><li>自增：<ul><li>incr ：<code>incr key</code>，key自增1，如果key不存在，自增后get(key)=1</li><li>incrby ：<code>incrby key</code>，key自增k，如果key不存在，自增后get(key)=k</li><li>incrbyfloat ：<code>incrbyfloat key</code>，是浮点数的自增操作</li></ul></li><li>自减：<ul><li>decrby ：<code>decrby key</code>，key自减k，如果key不存在，自增后get(key)=-k</li><li>decr ：<code>decr key</code>，key自减1，如果key不存在，自增后get(key)=-1</li></ul></li></ul><h3 id="String的使用场景"><a href="#String的使用场景" class="headerlink" title="String的使用场景"></a>String的使用场景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String一般适用于缓存（网站记录用户登录状态、视频缓存等）、计数器（比如每次观看视频，次数就+1，而且因为redis是单线程的，计数器是完全不会出错的），分布式锁等等</p><h2 id="hash-哈希"><a href="#hash-哈希" class="headerlink" title="hash(哈希)"></a>hash(哈希)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash其实还是一个key-value结构，但是跟String有不同，hash类似于mysql的一个表的结构数据，每一个key都有一个field和value，field不能相同。就相当于key是mysql的一个表，filed是一个字段，value是值</p><h3 id="哈希的API"><a href="#哈希的API" class="headerlink" title="哈希的API"></a>哈希的API</h3><ul><li>赋值：<ul><li>hset：哈希赋值，比如hset user:1:info age 23</li><li>hmset ：<code>hmset key1 vaule 1 key2 value2</code>批量设置一批key和value</li><li>hsetnx ：<code>hsetnx key field value</code>设置hash key对应field的value（如果存在就设置失败）</li></ul></li><li>查询：<ul><li>hget：哈希取值，比如hget user:1:info age</li><li>hgetall：获取所有的属性和值，比如hgetall user:1:info，时间复杂度O(n)</li><li>hvals：<code>hvals key</code>返回hash key对应所有的field的value，比如hvals user:1:info，时间复杂度O(n)</li><li>hkeys ：<code>hkeys key</code>：返回hash key对应所有的field，时间复杂度O(n)</li><li>hexists ：<code>hexists key field</code>：判断 hash key是否存在field，比如hlen user:1:info name</li><li>hlen：<code>hlen key</code>：获取hash key field数量，比如hlen user:1:info</li><li>hmget ：<code>hmget key field1 field2</code>：批量获取key一批的field值</li></ul></li><li>删除：<ul><li>hdel：删除哈希的值，比如hdel user:1:info</li></ul></li><li>自增：<ul><li>hincrby ：<code>hincrby key field intCounter</code>hash key对应的field的value自增intCounter</li><li>hincrbyfloat ：<code>hincrbyfloat key field floatCounter</code>增加浮点数</li></ul></li></ul><h2 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h2><p>list是有序的列表，可以接受重复值</p><h3 id="列表的API"><a href="#列表的API" class="headerlink" title="列表的API"></a>列表的API</h3><ul><li>覆盖值：<ul><li>lset：<code>lset key index newValue</code>设置列表索引值为newValue</li></ul></li><li>插入值：<ul><li>lpush：从左端插入值</li><li>rpush：从右端插入值，如rpushlistkey c b a，就是从右边插入c b a</li><li>linsert：<code>linsert key before|after value newValue</code>，时间复杂度O(n)</li></ul></li><li>弹出值：<ul><li>rpop：从右端弹出值</li><li>lpop：从左端弹出值</li></ul></li><li>删除：<ul><li>lrem：<code>lrem key count value</code>根据count来删除所有value相等的项，时间复杂度为O(n)<ul><li>count&gt;0，从左到右，删除最多的count个value相等的项</li><li>count&lt;0，从右到左，删除最多的Math.abs(count)个value相等的项</li><li>count=0，删除所有的value相等的项</li></ul></li><li>ltrim：<code>ltrim key start end</code>，时间复杂度为O(n)，即只保留下标start到end的，时间复杂度为O(n)</li></ul></li><li>查询：<ul><li>lrange：<code>lrange key start end(包含end)</code>，这是一个查询的API，只查询start到end的，负号就是从右边开始，时间复杂度为O(n)</li><li>lindex：<code>lindex key index</code>获取列表指定索引的value，时间复杂度为O(n)</li><li>llen：<code>llen key</code>获取列表的长度</li></ul></li><li>阻塞版：b就是阻塞，比如一个空队列的话使用lpop会立刻弹出，但是使用blpop就会等待有值再弹出<ul><li>blpop：<code>blpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li><li>brpop：<code>brpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li></ul></li></ul><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h2><h3 id="集合特征"><a href="#集合特征" class="headerlink" title="集合特征"></a>集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合是一个<strong>无序和无重复元素</strong>的的，还可以使用<strong>集合操作</strong>，集合就相当于我们高中学的数学的那个集合，两个集合可以交、并、补操作，同时集合是无序和不能重复的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合的value是由field和value组成</p><h3 id="集合的API"><a href="#集合的API" class="headerlink" title="集合的API"></a>集合的API</h3><ul><li>添加：<ul><li>sadd：<code>sadd key element1 [element2]</code>向集合添加element，如果element已存在就添加失败，返回结果为0</li></ul></li><li>删除：<ul><li>srem：<code>srem key element</code>将集合key中的element删掉</li><li>spop：<code>spop key [count]</code>随机弹出集合的随机count个元素，如果没填就默认是1，改变原有的集合</li></ul></li><li>查询<ul><li>scard：<code>scard key</code>返回集合元素的数量</li><li>sismember：<code>SISMEMBER KEY VALUE</code> 计算元素是否在集合当中，是就返回1，不存在返回0</li><li>srandmember：<code>srandmember count</code> 返回集合中随便count 个元素，如果count没填就默认为1，不改变原有的集合</li><li>smembers：<code>smembers key [count]</code> 取出集合中所有的元素</li></ul></li><li>集合间的操作：<ul><li>sdiff：也就是数学集合中的差集  <code>sdiff key1 key2</code> </li><li>sinter：数学中的交集 <code>sinter key1 key2</code></li><li>sunion：数学中的并集 <code>sunion key1 key2</code></li></ul></li><li>保存集合操作的结果：<ul><li>sdiffstore：<code>sdiffstore newValue key1 key2</code>,保存key1和key2的差集结果在newValue中</li><li>sinterstore：<code>sinterstore newValue key1 key2</code>,保存key1和key2的交集结果在newValue中</li><li>sunionstore：<code>sunionstore newValue key1 key2</code>,保存key1和key2的并集结果在newValue中</li></ul></li></ul><h2 id="sorted-set-有序集合"><a href="#sorted-set-有序集合" class="headerlink" title="sorted set(有序集合)"></a>sorted set(有序集合)</h2><h3 id="有序集合特征"><a href="#有序集合特征" class="headerlink" title="有序集合特征"></a>有序集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序集合是无重复元素的、有序，有序集合的的value是由element和score共同组成，有序集合所有的API都是z开头</p><p>有序集合的score可以重复，element不可以重复</p><h3 id="zset跟list和set的区别"><a href="#zset跟list和set的区别" class="headerlink" title="zset跟list和set的区别"></a>zset跟list和set的区别</h3><table><thead><tr><th>集合(set)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>无重复元素</td><td>无重复元素</td></tr><tr><td>无序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><table><thead><tr><th>列表(list)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>可以有重复元素</td><td>无重复元素</td></tr><tr><td>有序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><h3 id="有序集合API"><a href="#有序集合API" class="headerlink" title="有序集合API"></a>有序集合API</h3><ul><li>zadd：<code>zadd key score element(可以是多个)</code>O(logN)</li><li>zrem：<code>zrem key element</code> 删除元素(可以是多个)</li><li>zscore：<code>zscore key element</code>查询分数</li><li>zincrby：<code>zincrby key increScore element</code>，给key增加increScore 分数</li><li>zcard：<code>zcard key</code>返回元素总个数</li><li>zrank：</li><li>zrange：<code>zrange key start end [withscore]</code>，返回指定范围内的排名数，时间复杂度为O(log(n)+m)</li><li>zrangebyscore：<code>zrangebyscore key minScore maxScore [withscore]</code>，返回指定范围的分数段，时间复杂度为O(log(n)+m)</li><li>zcount：<code>zcount key minScore maxScore</code>，返回指定分数范围内的个数</li><li>zremrangebyrank：<code>zremrangebyrank key start end</code>，删除指定排名内的升序元素，时间复杂度为O(log(n)+m)</li><li>zrevrank：从高到低的排名</li><li>zrevrange：</li><li>zrevrangebyscore</li><li>zunionstore：</li><li>zinterstore：</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis初步认识</title>
      <link href="/2019/09/27/redis1/"/>
      <url>/2019/09/27/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的五大数据结构"><a href="#Redis的五大数据结构" class="headerlink" title="Redis的五大数据结构"></a>Redis的五大数据结构</h2><ul><li>String</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h2><ol><li>速度快：因为redis是保存在内存当中的</li><li>持久化：Redis的数据保存在内存中，一般的保存在内存中突然断电内存就会丢失，所以redis在保存数据的时候会异步的保存在硬盘中</li><li>支持多种数据结构：Redis支持(字符串、列表、哈希、集合、有序集合)这五种数据结构，在新版本中也支持BitMaps(位图，使用很小的内存来实现高效的存储)、HyperLoglog(超小内存唯一计数，即使用12K)、GEO(地理信息定位 )这三种衍生的数据结构</li><li>支持多种语言：基本上现在的主流语言都是支持redis的</li><li>功能丰富：支持发布订阅、Lua脚本、事物，pipeline(提高客服端的并发效率)</li><li>简单性：Redis不依赖任何外部库和使用的是单线程模型</li><li>主从复制：主服务器的数据可以同步到从服务器上，给高可用和分布式提供了一个很好的基础</li><li>高可用、分布式：Redis单单靠主从复制是不能进行高可用分布式的，所以Redis2.8版本提供了Redis-Sentinel来支持高可用，Redis3.0版本提供了Redis-Cluster来支持分布式</li></ol><h2 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis应用场景十分的广泛，缓存(比如在网站中可以使用Redis缓存来代替session和cookie)、计数器(比如微博的转发、评论数)、消息队列(比如Celery和redis结合来使用异步任务)、排行榜、实时系统(垃圾邮件过滤功能)、社交系统(比如youtube那些社交网站的共同关注数、粉丝数)等，大多数企业都使用了Redis</p><h2 id="Redis的常用命令"><a href="#Redis的常用命令" class="headerlink" title="Redis的常用命令"></a>Redis的常用命令</h2><ul><li><code>keys</code>：这个一般不在生产环境中使用，其一是因为key是一个很重的命令，时间复杂度为O(n)如果有上万个键值对一下子遍历出来会很慢，这个可以在不在生产环境中使用的从节点使用比较重的命令，不会对生产环境产生危害即可<ul><li><code>keys *</code>：查看所有的键</li><li><code>keys [pattern]</code>：keys支持正则表达式，比如<code>keys he*</code>,就可以选择出所有he开头的key</li></ul></li><li><code>dbsize</code>：计算keys的总数，这个是可以在生产环境中使用的，因为这个不是遍历所有的表，而是内置的一个计数器，所以时间复杂度是O(1)</li><li><code>exists keys</code>：判断一个key是否存在，存在返回1，不存在返回0</li><li><code>del key</code>：删除制定的key-value，成功删除返回1，不成功返回0</li><li><code>expire key seconds</code>：(设置过期时间)，一般用于网站记录用户缓存，seconds就是秒数，seconds为30就是30秒后过期<ul><li><code>ttl key</code>：查看key的过期时间，返回值为-2代表key不存在了，-1表示没有过期时间</li><li><code>persist key</code>：去除key过期时间</li></ul></li><li><code>type key</code>：查看key的数据类型</li><li><code>select number</code>：选择使用第number个数据库</li><li><code>info</code>：查看客户端的所有信息</li></ul><table><thead><tr><th>命令</th><th>时间复杂度</th></tr></thead><tbody><tr><td>keys</td><td>O(n)</td></tr><tr><td>dbsize</td><td>O(1)</td></tr><tr><td>exists keys</td><td>O(1)</td></tr><tr><td>del key</td><td>O(1)</td></tr><tr><td>expire key seconds</td><td>O(1)</td></tr><tr><td>type key</td><td>O(1)</td></tr></tbody></table><h2 id="Redis的数据结构和内部编码"><a href="#Redis的数据结构和内部编码" class="headerlink" title="Redis的数据结构和内部编码"></a>Redis的数据结构和内部编码</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个数据结构都有自己的内部编码，在开发过程中，如果一些元素比较小的时候可以通过空间换时间的操作，这些得看开发中的具体要求和操作来定制</p><h2 id="Redis-的单线程操作"><a href="#Redis-的单线程操作" class="headerlink" title="Redis 的单线程操作"></a>Redis 的单线程操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis的单线程就像一个队列，每一个瞬间只能执行一个命令，所以在开发中，一定要注意不要轻易使用很长时间的命令，不然后面的命令都会阻塞在那</p><p>Redis单线程还这么快的原因跟node.js部分很像，快的原因如下</p><ul><li>Redis采用的是纯内存的存储，内存的存储是非常的快的(这个是主要的原因)</li><li>非阻塞IO</li><li>避免了线程的切换和竞态的消耗</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全文搜索方法的使用</title>
      <link href="/2019/09/26/sou-suo-fang-fa/"/>
      <url>/2019/09/26/sou-suo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="基于-haystack来使用whoosh检索引擎"><a href="#基于-haystack来使用whoosh检索引擎" class="headerlink" title="基于 haystack来使用whoosh检索引擎"></a>基于 haystack来使用whoosh检索引擎</h2><p>这篇博客是基于Django来编写的案例，haystack可以自定义搜索，开发者可以通过haystack间接使用搜索引擎，并且他可以像DJango的ORM一样，只需改少量代码就可以自由切换引擎</p><p>这里拿haystack使用whoosh引擎来作为案例</p><h3 id="基本安装和配置"><a href="#基本安装和配置" class="headerlink" title="基本安装和配置"></a>基本安装和配置</h3><p>首先先安装这两个包</p><pre><code>pip install django-haystackpip install whoosh</code></pre><p>然后在setting.py注册应用haystack</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/18.png" alt></p><p>并且在setting.py文件添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全文检索框架配置</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 使用whoosh引擎</span>        <span class="token comment" spellcheck="true"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.whoosh_backend.WhooshEngine'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 索引文件路径</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 当添加、修改、删除数据时，自动生成索引</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><p>以上的是默认的配置，如果要添加jieba文字的话要另外配置</p><h3 id="生成索引文件"><a href="#生成索引文件" class="headerlink" title="生成索引文件"></a>生成索引文件</h3><p>在你要检索的模型类的那个包中，添加一个文件</p><p>如我要检索的是所有的商品文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/19.png" alt></p><p>里面的search_indexes.py就是我写的文件</p><p>内容如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU<span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#索引字段document=True指定根据表的哪些字段简历索引文件制定在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author = indexes.CharField(model_attr='user')</span>    <span class="token comment" spellcheck="true"># pub_date = indexes.DateTimeField(model_attr='pub_date')</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> GoodsSKU    <span class="token comment" spellcheck="true"># 建立索引数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回所有数据就是对所有的数据进行索引</span></code></pre><p>然后要定义你检索出来的那个界面</p><p>创建如下文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20.png" alt></p><p>goodssku_text.txt就是定义你可以检索的字段，我的检索字段如下：</p><pre><code># 指定根据表中的哪些字段建立索引数据{{ object.name }}  # 根据商品的名称建立索引{{ object.desc }}  # 根据商品的简介建立索引{{ object.goods.detail }}  # 根据商品的详情建立索引</code></pre><p>然后使用命令</p><pre><code>python manage.py rebuild_index</code></pre><p>这样会生成索引文件</p><p>如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/21.png" alt></p><h3 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h3><p>在搜索的那个表单上，填写内容如下</p><pre><code>&lt;form action=&quot;/search&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code></pre><p>然后要添加url路径</p><pre><code>url(&#39;search/&#39;, include(&#39;haystack.urls&#39;)),  # 全文检索框架</code></pre><p>搜索完后结果会提交到一个search.html页面，会传递这几个变量</p><pre><code>query：搜索关键字page：当前页的page对象 –&gt;遍历page对象，获取到的是SearchResult类的实例对象，对象的属性object才是模型类的对象。paginator：分页paginator对象</code></pre><p>然后自定义一个搜索列表的模板，将这三个变量使用Django传递变量的方式添加进去即可</p><h3 id="汉语分词检索"><a href="#汉语分词检索" class="headerlink" title="汉语分词检索"></a>汉语分词检索</h3><p>如果是英文的话一个单词就是一个商品，但是汉语远远比英语复杂的多，比如搜索你好，可以分为你和好</p><p>Python有个jieba包可以帮助我们进行汉语分词</p><p>首先先安装jieba包</p><pre><code>pip install jieba</code></pre><p>要对原来的分词结果使用汉语分词的话就要对下载下来的包进行jieba分词</p><p>进入对pip下载的haystack包里面添加ChineseTokenizer.py文件，内容如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">yield</span> t<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后拷贝原来的whoosh_backend.py文件，改名为whoosh_cn_backend.py</p><p>添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#对原来导入的包添加</span><span class="token keyword">from</span> <span class="token punctuation">.</span>ChineseAnalyzer <span class="token keyword">import</span> ChineseAnalyzer<span class="token comment" spellcheck="true"># 第163行的</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(),      </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span><span class="token comment" spellcheck="true"># 改为</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),  </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span></code></pre><p>然后回去setting.py修改成’ENGINE’: ‘haystack.backends.whoosh_cn_backend.WhooshEngine’</p><p>然后再进行一次索引就可以使用汉语的jieba分词了</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 全文检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastDFS安装及在Django中的部署</title>
      <link href="/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/"/>
      <url>/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS在阿里云服务器的安装和配置"><a href="#FastDFS在阿里云服务器的安装和配置" class="headerlink" title="FastDFS在阿里云服务器的安装和配置"></a>FastDFS在阿里云服务器的安装和配置</h2><p>FastDFS安装在这篇<a href="https://blog.csdn.net/busishenren/article/details/83584885" target="_blank" rel="noopener">博客</a>讲解的很清楚了，这里我就不再赘述，只作为补充</p><p>如果你是在轻量云服务器安装的话，方法跟esc服务器一样的，直接在控制台开启防火墙规则端口</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/15.png" alt></p><p>开启了防火墙端口还不够</p><p>在进入服务器下，使用这条命令查看防火墙的状态</p><pre><code>firewall-cmd --state</code></pre><p>如果防火墙已开启，则看开放的所有端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果防火墙关闭，那么开启防火墙</p><pre><code>systemctl start firewalld.service</code></pre><p>如果嫌麻烦就把防火墙关了也行，但是不建议这么做</p><p>查看开放的所有端口后，如果没有开启22122和23000端口，那么开启他</p><pre><code>firewall-cmd --zone=public --add-port=22122/tcp --permanent #开启22122端口firewall-cmd --zone=public --add-port=23000/tcp --permanent #开启23000端口firewall-cmd --reload   # 配置立即生效</code></pre><p>再一次查看端口是否开启</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>在部署完FastDFS并且开启storage和tracker服务后，看一下端口是否被监听</p><pre><code>netstat -lnpt</code></pre><p>能看到23000和22122端口被监听那么就说明成功</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/16.png" alt></p><h2 id="FastDFS在Django中的使用"><a href="#FastDFS在Django中的使用" class="headerlink" title="FastDFS在Django中的使用"></a>FastDFS在Django中的使用</h2><p>在Django中，所有资源都是来自于后台的部署，Django后台数据库采用的是ORM模式，Django默认文件的上传是上传到指定的文件夹下面的，如果要修改的话要在一个文件中自定义文件的存储类，也就是继承django.core.files.storage.Storage</p><p>关于文件存储官网文档有很清楚的描述</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/17.png" alt></p><p>在setting.py配置你服务器的fastDFS的ip和端口号</p><pre><code># 设置Django的文件存储类DEFAULT_FILE_STORAGE = &#39;utils.fdfs.storage.FDFSStorage&#39;# 设置fdfs使用的client.conf文件路径FDFS_CLIENT_CONF = &#39;./utils/fdfs/client.conf&#39;# 设置fdfs存储服务器上nginx的IP和端口号FDFS_URL = &#39;&#39;</code></pre><p>然后在一个单独的文件夹(比如utils)里面加入以下两个文件</p><p>storage.py</p><pre><code>from django.core.files.storage import Storagefrom django.conf import settingsfrom fdfs_client.client import *class FDFSStorage(Storage):    def __init__(self, client_conf=None, base_url=None):        &quot;&quot;&quot;初始化&quot;&quot;&quot;        if client_conf is None:            client_conf = settings.FDFS_CLIENT_CONF        self.client_conf = client_conf        if base_url is None:            base_url = settings.FDFS_URL        self.base_url = base_url    def _open(self, name, mode=&#39;rb&#39;):        # 打开文件时使用        pass    def _save(self, name, content):        client=Fdfs_client(&#39;./utils/fdfs/client.conf&#39;)        res = client.upload_by_buffer(content.read())        if res.get(&#39;Status&#39;) != &#39;Upload successed.&#39;:            raise Exception(&#39;上传文件到FastDFS失败&#39;)        filename = res.get(&#39;Remote file_id&#39;)        return filename    def exists(self, name):        &quot;&quot;&quot;Django判断文件名是否可用&quot;&quot;&quot;        return False    def url(self, name):        &quot;&quot;&quot;返回访问文件url路径，不然后台保存的时候会报错&quot;&quot;&quot;        return self.base_url + name</code></pre><p>client.conf(修改相应的字段)</p><pre><code># connect timeout in seconds# default value is 30sconnect_timeout=30# network timeout in seconds# default value is 30snetwork_timeout=60# the base path to store log files# 你的个人电脑的存储日志，必须要有这个路径base_path=/Users/LY/Python_log# tracker_server can ocur more than once, and tracker_server format is#  &quot;host:port&quot;, host can be hostname or ip addresstracker_server=你服务器的IP:22122#standard log level as syslog, case insensitive, value list:### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debuglog_level=info# if use connection pool# default value is false# since V4.05use_connection_pool = false# connections whose the idle time exceeds this time will be closed# unit: second# default value is 3600# since V4.05connection_pool_max_idle_time = 3600# if load FastDFS parameters from tracker server# since V4.05# default value is falseload_fdfs_parameters_from_tracker=false# if use storage ID instead of IP address# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# default value is false# since V4.05use_storage_id = false# specify storage ids filename, can use relative or absolute path# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# since V4.05storage_ids_filename = storage_ids.conf#HTTP settingshttp.tracker_server_port=80#use &quot;#include&quot; directive to include HTTP other settiongs##include http.conf</code></pre><p>文件上传的路径可以随便写，因为这个都没用，上传后Django会自动按照你自己写的自定义存储方法去上传文件</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery异步框架的使用</title>
      <link href="/2019/09/24/celery/"/>
      <url>/2019/09/24/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery是什么"><a href="#Celery是什么" class="headerlink" title="Celery是什么"></a>Celery是什么</h2><p>​    Celery是一个实时处理和任务调度的分布式任务队列，简单的说所就是分布式应用队列，队列的意思就是把任务放在队列中执行，通常应用是把一些耗时的任务放在队列里面，主任务继续执行，耗时任务在队列中执行。</p><p>​    Celery本身只是一个任务队列，或者严格的说是管理分布式任务队列的工具，封装了常用的任务队列操作，通过Celery来管理任务队列的执行和管理，celery本身不含消息服务，它使用第三方消息服务来传递任务，目前，celery支持的消息服务RabbitMQ,redis甚至是数据库，redis是最佳选择，RabbitMQ(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>)、Redis(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis</a>)处理任务队列的方式，两者的使用文档写的很清楚</p><p>​    在实际应用中，可以把一些比如邮件注册、手机注册、网站页面静态化等耗时操作交给Celery队列中，然后让Redis或者RabbitMQ去执行。下面我拿我项目中的案例来演示一下，也便于自己加深印象</p><h2 id="Celery演示"><a href="#Celery演示" class="headerlink" title="Celery演示"></a>Celery演示</h2><p>这里我拿的都是我最熟悉的Django框架和redis来演示</p><p>首先要导入Celery包</p><p>一般第三方的处理文件都会专门放到一个文件夹里面，我的直接命名Celery_tasks</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>直接使用装饰器就可以使得普通的方法变成异步方法</p><p>上面的是uwsgi使用的服务器的代码，在运行异步方法的服务器还要加上这一行代码， 整体代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#dailyfreshshop是我的项目名</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>把原本的同步的方法转换为Celery异步的代码运行即可</p><p>如果你在linux系统上运行Celery代码，就在linux服务器端运行<code>celery -A celery_tasks.tasks worker -l info</code></p><p>如果是windows系统上运行Celery代码，就运行<code>celery -A celery_tasks.tasks worker -l info -P eventlet</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维人员的gitlab基本操作</title>
      <link href="/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/"/>
      <url>/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本篇讲解了运维人员在后端的基本使用：创建开发项目、定义开发总监、开发人员等</p></blockquote><h2 id="管理员的操作"><a href="#管理员的操作" class="headerlink" title="管理员的操作"></a>管理员的操作</h2><p>点击上面的扳手图标可以进入后台管理界面<br><img src="https://img-blog.csdnimg.cn/20190922092307422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>点击左边的monitoring标签<br><img src="https://img-blog.csdnimg.cn/20190922092435431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>第一个system info是服务器的资源使用情况<br><img src="https://img-blog.csdnimg.cn/20190922092634854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>logs就是gitlab的应用日志和使用日志</p><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>以下两种方法都可以添加账号<br>点击overview的new user按钮，可以为使用者创建账号<br><img src="https://img-blog.csdnimg.cn/20190922093118594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190922093433289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击右上角的new user按钮就可以给项目主负责人创建账号</p><h2 id="给项目添加人员"><a href="#给项目添加人员" class="headerlink" title="给项目添加人员"></a>给项目添加人员</h2><p>我这里原先就已经创建好了一个名为test的仓库<br>我这里给test仓库添加人员<br>点击project1<br><img src="https://img-blog.csdnimg.cn/20190922093735602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>再点击你需要操作的仓库<br><img src="https://img-blog.csdnimg.cn/20190922093800821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点击manage access<br><img src="https://img-blog.csdnimg.cn/20190922093832764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里你要给项目添加的是什么权限可以自定义<br><img src="https://img-blog.csdnimg.cn/20190922094119996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>master就是有合并分支的权限，developer就是可以用自己的分支写代码的权限<br><img src="https://img-blog.csdnimg.cn/20190922094248435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="给人员修改自己的密码"><a href="#给人员修改自己的密码" class="headerlink" title="给人员修改自己的密码"></a>给人员修改自己的密码</h2><p>点击扳手按钮重回管理界面，点击user<br><img src="https://img-blog.csdnimg.cn/20190922094452932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以给人员信息进行修改了<br><img src="https://img-blog.csdnimg.cn/20190922094506428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>可以修改密码<br><img src="https://img-blog.csdnimg.cn/20190922094616363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="模拟企业开发者和负责人的使用流程"><a href="#模拟企业开发者和负责人的使用流程" class="headerlink" title="模拟企业开发者和负责人的使用流程"></a>模拟企业开发者和负责人的使用流程</h2><p>这里我不用git原始命令操作，因为比较麻烦，我贪方便就用sourcetree操作，原理是一样的</p><p>开发者使用自己的分支来编写代码</p><p>黏贴这个地址<br><img src="https://img-blog.csdnimg.cn/20190922095222895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>我随便写了一个test文件，我上传上去的时候会让我给账号密码，就是你刚刚设置的devloper账号密码<br><img src="https://img-blog.csdnimg.cn/20190922104059340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以显示我刚刚上传的分支了<br><img src="https://img-blog.csdnimg.cn/20190922104108895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点右上角蓝色的create merge request<br><img src="https://img-blog.csdnimg.cn/20190922104243370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>assign是项目负责人的账号就行了，其他的你随便填<br>然后用同样的方法打开负责人账号lead<br><img src="https://img-blog.csdnimg.cn/20190922104425940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>右上角有个橙色的消息，点开<br><img src="https://img-blog.csdnimg.cn/20190922104503516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>就可以看到开发者提交的申请<br><img src="https://img-blog.csdnimg.cn/20190922104537582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击merge就可以合并分支<br>这里还可以给开发者回复<br><img src="https://img-blog.csdnimg.cn/20190922104737164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>重新返回项目，就可以看到你刚刚操作的文件合并到主分支了<br><img src="https://img-blog.csdnimg.cn/20190922104839441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab部署与使用</title>
      <link href="/2019/09/21/gitlab/"/>
      <url>/2019/09/21/gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="gitlab的安装"><a href="#gitlab的安装" class="headerlink" title="gitlab的安装"></a>gitlab的安装</h2><p>gitlab和github的区别想必大家都懂，这里我就不再赘述</p><p>这里我来用阿里云学生服务器centos7来演示gitlab的安装过程</p><p>首先打开你的防火墙控制台，开启防火墙规则</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE6.png" alt></p><p><strong>注(这里我用的是服务器安装，一般的服务器都默认安装了ssh的，服务器ssh这里可以输入命令也可以不用，如果是用虚拟机的就要一定要安装ssh，并且在命令前加上sudo)</strong></p><p>首先安装ssh，</p><pre><code>yum install -y curl policycoreutils-pythonopenssh-server</code></pre><p>将SSH服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable sshd</code></pre><p>启动SSH服务，安装命令：</p><pre><code>systemctl start sshd</code></pre><p>安装防火墙：</p><pre><code>yum install firewalld systemd -y</code></pre><p>开启防火墙：</p><pre><code>service firewalld  start</code></pre><p>添加http服务到防火墙：</p><pre><code>firewall-cmd --permanent --add-service=http</code></pre><p>然后重启防火墙：</p><pre><code>systemctl reload firewalld</code></pre><p>安装Postfix以发送通知邮件：</p><pre><code>yum install postfix</code></pre><p>将postfix服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable postfix</code></pre><p>启动postfix</p><pre><code>systemctl start postfix</code></pre><p><strong>注意：这里如果成功那么没啥，可能会出现以下这个问题</strong></p><p><code>Job for postfix.service failed because the control process exited with error code. See &quot;systemctl st</code></p><p>这个时候不要慌</p><p>修改/etc/postfix/main.cf这个文件</p><pre><code>vim /etc/postfix/main.cf</code></pre><p>修改这两个字段为：</p><pre><code>inet_interfaces = allinet_protocols = ipv4</code></pre><p>接下来添加gitlab镜像：(这里的我用的是centos7的，centos6的话另外找资料)</p><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>安装gitlab 安装命令：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p><strong>注意，这里可能出现如下错误</strong></p><p><code>warning: gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</code> </p><p>这个是缺少gitlab 的依赖</p><p>下载依赖：</p><pre><code>yum -y install policycoreutils openssh-server openssh-clients postfix</code></pre><p>然后再执行：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>然后修改gitlab的配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p>找到external_url这个字段，把里面的值修改为<code>http://你的服务器ip:你的端口</code>，比如<code>http://36.102.3.26:8899</code>，然后保存退出</p><p><strong>这里注意啦！！！</strong></p><p>这里我用的是开启防火墙配置的，所以要先看看防火墙开启没有</p><pre><code>firewall-cmd --state</code></pre><p>如果没开启就开启防火墙：<code>systemctl stop firewalld.service</code></p><p>然后看一下你有没有开启你配置的端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果没有就添加端口，并且重启</p><pre><code>firewall-cmd --zone=public --add-port=8899/tcp --permanent   # 开放8899端口firewall-cmd --reload   # 配置立即生效</code></pre><p>然后执行命令</p><pre><code>gitlab-ctl reconfigure</code></pre><p>然后</p><pre><code>gitlab-ctl restart</code></pre><p>这样就可以通过你的服务器ip:你的端口就可以访问gitlab了，这个是成功画面</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE7.png" alt></p><p>这个是要你重新配置你的密码，默认的账号是root</p><h2 id="502错误解决和优化"><a href="#502错误解决和优化" class="headerlink" title="502错误解决和优化"></a>502错误解决和优化</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE9.png" alt></p><p><strong>注意，第一时间是看错误日志，而不是立马去谷歌百度，因为每一个人的错误都是不同的</strong></p><p>第一时间要查看错误日志，而不是查百度，因为每个人的错误都不同</p><pre><code># 看看unicorn启动日志cat /var/log/gitlab/unicorn/unicorn_stderr.log# 然后再看看gitlab日志，看看是哪里出错tail -100 /var/log/gitlab/gitlab-rails/production.log</code></pre><p><strong>每个人的错误都不同，根据错误日志的问题再去百度谷歌才是正道理</strong></p><h3 id="端口错误问题"><a href="#端口错误问题" class="headerlink" title="端口错误问题"></a>端口错误问题</h3><p><strong>端口错误都是端口被占用，当然按照我上面的方法是不会出现这个情况的</strong></p><p>此时继续修改配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p><strong>看看你的错误日志，我的是8080端口被占用，改端口就行了</strong></p><p>找到以下字段取消注释并且修改：</p><pre><code># unicorn[&#39;port&#39;] = 8090   #千万不要是原来的8899端口啊，8090也是我打开过的端口，一样的话好像会报404的</code></pre><h3 id="内存爆满和内存消耗过大的问题"><a href="#内存爆满和内存消耗过大的问题" class="headerlink" title="内存爆满和内存消耗过大的问题"></a>内存爆满和内存消耗过大的问题</h3><p>但是最大的问题就是内存爆满，用命令看看<code>free -h</code>,或者用<code>htop</code>没有htop命令就下载一下<code>yum install htop</code></p><p>看一下结果我相信大部分人都跟我一样，物理内存爆满，然后发现swap居然是0有点奇怪</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE10.png" alt></p><p>然后我去去谷歌找了一下原因，发现阿里云默认情况下是不启用swap的，所以我们要自己添加swap来解决</p><h4 id="使用swap分区来减少内存消耗"><a href="#使用swap分区来减少内存消耗" class="headerlink" title="使用swap分区来减少内存消耗"></a>使用swap分区来减少内存消耗</h4><ol><li>查看当前系统中是否已经启用swap分区</li></ol><pre><code>cat /proc/swaps</code></pre><ol start="2"><li>如果没有启用swap分区功能，则新建一个专门的文件用于swap分区</li></ol><pre><code>dd if=/dev/zero of=/data/swap bs=512 count=8388616</code></pre><p><strong>swap的大小是count的大小乘以bs大小，上面命令的大小是4294971392，即4GB</strong></p><ol start="3"><li>通过mkswap命令将上面新建出的文件做成swap分区</li></ol><pre><code>mkswap /data/swap</code></pre><ol start="4"><li>查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调整成30或者60</li></ol><pre><code>cat /proc/sys/vm/swappinesssysctl -w vm.swappiness=60#永久修改若想永久修改，则编辑/etc/sysctl.conf文件，改文件中有vm.swappiness变量配置，默认为0</code></pre><p><strong>注：若想永久修改，则编辑/etc/sysctl.conf文件</strong></p><ol start="5"><li>启用此交换分区的交换功能</li></ol><pre><code>swapon /data/swapecho “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</code></pre><ol start="6"><li>然后再看看swap分区是否启动</li></ol><pre><code>cat /proc/swaps </code></pre><ol start="7"><li>然后重启gitlab看看</li></ol><pre><code>gitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE11.png" alt></p><p>哦吼，这不就，好起来了吗</p><p>再运行gitlab看看</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE12.png" alt></p><p>运行速度如丝般顺滑，刚部署好不知道多少倍，除此之外可能还有其他的bug，但是这个看错误日志修改就好了</p><p><strong>注意：如果修改了配置文件，一定要执行以下命令</strong></p><pre><code>gitlab-ctl reconfiguregitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE8.png" alt></p><p><strong>如果配置了还是502，耐心等一等，等那么一分钟左右就好了</strong></p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>​    这个运行速度慢折腾了我一下午，问题归根结底就是…..服务器配置太烂了，性能差就会经常出现502，因为官方推荐的服务器性能是最低 双核 + 8GB RAM，所以这里只能使用swap才能正常使用</p><p>​    gitlab的使用方法是和github差不多的，可以用git命令行执行，也可以用sourcetree直接clone下来</p><p><strong>解决问题使用到的博客</strong></p><blockquote><p><a href="https://blog.csdn.net/qq_25283709/article/details/78207881" target="_blank" rel="noopener">gitlab服务器经常出现502(阿里云搭建)</a></p></blockquote><blockquote><p><a href="https://blog.51cto.com/dgd2010/1762907?spm=a2c4e.10696291.0.0.2d4919a42dBKR8" target="_blank" rel="noopener">阿里云云主机添加swap分区与swap性能优化</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/wanchaopeng/article/details/84771195" target="_blank" rel="noopener">gitlab占用内存过大</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitbook搭建github上的书城</title>
      <link href="/2019/09/21/gitbook/"/>
      <url>/2019/09/21/gitbook/</url>
      
        <content type="html"><![CDATA[<h2 id="gitbook的安装和使用"><a href="#gitbook的安装和使用" class="headerlink" title="gitbook的安装和使用"></a>gitbook的安装和使用</h2><p>安装Gitbook前应该先安装node.js，安装这里就不赘述了，直接进入node交互界面</p><pre><code>$ npm install gitbook-cli -g</code></pre><p>检验是否安装成功</p><pre><code>$ gitbook -V</code></pre><p>进入一个空文件夹</p><pre><code>$ gitbook init</code></pre><p>然后会创建 <code>README.md</code> 和 <code>SUMMARY.md</code> 这两个文件， <code>README.md</code> 是说明文件， <code>SUMMARY.md</code>是书的章节目录，然后输入</p><pre><code>$ gitbook serve</code></pre><p>就可以创建gitbook了，默认端口是4000，地址输入<a href="http://localhost:4000就可以进入页面，可以用一些markdown编辑器来写，然后就可以在网页上看到实时编辑的内容了。" target="_blank" rel="noopener">http://localhost:4000就可以进入页面，可以用一些markdown编辑器来写，然后就可以在网页上看到实时编辑的内容了。</a></p><p>目录结构如图</p><p><img src="https://img-blog.csdnimg.cn/20190720225822792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190720225836562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>gitbook的目录结构就是缩进，语法结构一看就懂</p><p>gitbook写完后可以输入命令</p><pre><code>$ gitbook build</code></pre><p>使用这个命令后在本地会生成一个_book的文件夹，里面是自动生成的html文件，这些htm文件在本地打开是不具备跳转效果的，要部署到网上才可以具备全部效果</p><h2 id="部署gitbook到github上"><a href="#部署gitbook到github上" class="headerlink" title="部署gitbook到github上"></a>部署gitbook到github上</h2><p>根据上面的操作，通过 <code>$ gitbook build</code> 把</p><p>先在自己的github上创建一个新的仓库，然后把刚刚_book里面的文件上传到github上，这部分的方法是个程序员都应该掌握，这里不再赘述，上传完之后点击setting，拉倒最下面有个github page的，如图</p><p><img src="https://img-blog.csdnimg.cn/20190720230934856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>上面绿色这个地址就是你的网上书籍地址了</p><p>如果要给你自己的gitbook设置一个域名，方法如我上一篇<a href="https://www.ly-blog.top/2019/09/05/hello-world/" target="_blank" rel="noopener">博客</a>的自定义域名部分</p><h2 id="gitbook-安装插件"><a href="#gitbook-安装插件" class="headerlink" title="gitbook 安装插件"></a>gitbook 安装插件</h2><p>单单使用gitbook来写，写出来的界面不是特别的好看，功能也没有那么多，gitbook是可以添加插件的，比如返回顶部、折叠、添加版权信息、分享等功能</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客并部署域名</title>
      <link href="/2019/09/05/hexo/"/>
      <url>/2019/09/05/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ol><li><p>安装node</p><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>(电脑是多少位的就下载多少位)</p><p>安装成功之后在cmd输入命令</p><pre><code>node -v</code></pre><p>可以看到版本就安装成功</p></li><li><p>安装Git</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>git配置百度查一查，这里不多说</p></li><li><p>安装Hexo</p><pre><code>$ npm install -g hexo</code></pre><p>输入 <code>hexo -v</code>可以看到版本就安装成功</p></li></ol><h2 id="开始第一个博客"><a href="#开始第一个博客" class="headerlink" title="开始第一个博客"></a>开始第一个博客</h2><p>在命令行模式下进入个空文件夹，输入</p><pre><code>hexo init</code></pre><p>就开始创建hexo博客文件(可能需要一定时间)</p><p>然后输入命令安装博客所需要的包</p><pre><code>npm install</code></pre><p>此时博客就已经安装好了</p><p>输入命令开启你的第一个博客</p><pre><code>hexo server#或者hexo s</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/01.png" alt></p><p>如图所示，第一个博客就已经搭建好了</p><p>​    博客的主题是可以修改的，可以参照网上流传的主题，有很多很漂亮的主题可以使用，比如我这里使用的是<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">hexo-theme-matery-1.0.1</a>,主题可以参照这个网站</p><p>​    需要修改主题的话只需要把下载下来的主题文件,放到刚刚搭建的博客文件夹的theme文件夹下,然后修改博客根目录的_config.yml文件的theme字段修改成主题的名字即可</p><pre><code>theme: hexo-theme-matery-1.0.1</code></pre><p>这里我用的是上面提到的主题，效果如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/05.png" alt></p><h3 id="添加markdown文章"><a href="#添加markdown文章" class="headerlink" title="添加markdown文章"></a>添加markdown文章</h3><p>接下来我要添加自己的字段</p><p>在根目录的<code>_posts</code>文件夹就是首页展示的文章</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/02.png" alt></p><p>直接在<code>_posts</code>文件夹添加markdown文件就可以在前端展示文章</p><h3 id="添加标签tags页"><a href="#添加标签tags页" class="headerlink" title="添加标签tags页"></a>添加标签tags页</h3><p>(如果你的source目录没有<code>tags/index.md</code> 文件，那么就看以下步骤)</p><p>就使用命令添加<code>tags</code>文件夹</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>然后在<code>tags</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: tagsdate: 2019-09-4 18:37.25type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><p>然后在<code>_posts</code>文件夹下的markdown文件的头部添加tags字段</p><p>例如：</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - github---</code></pre><p>tags最好用这种方法来写，多个标签就填多个</p><p>效果截图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/06.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/07.png" alt></p><h3 id="添加分类categories页"><a href="#添加分类categories页" class="headerlink" title="添加分类categories页"></a>添加分类categories页</h3><p>(如果你的source目录没有<code>categories/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>然后在<code>categories</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: categoriesdate: 2019-09-4 18:39.36type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><p>然后在markdown文件的头部添加<code>categories</code>字段</p><p>例如</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - githubcategories:    - hexo---</code></pre><p>效果如图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/08.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/09.png" alt></p><h3 id="新建关于我about页"><a href="#新建关于我about页" class="headerlink" title="新建关于我about页"></a>新建关于我about页</h3><p>(如果你的source目录没有<code>about/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>然后在<code>about</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: aboutdate: 2019-09-4 18:41.56type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><p>效果截图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/11.png" alt></p><p>about页面的内容是可以通过<code>themes\hexo-theme-matery-1.0.1\_config.yml</code>来修改</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/12.png" alt></p><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>然后在<code>friends</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> 2019<span class="token punctuation">-</span>09<span class="token punctuation">-</span>4 18<span class="token punctuation">:</span><span class="token number">45.36</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><strong>文章还有一个description字段，是显示在主页的摘要，如果不填就是默认取内容的前70个字</strong></p><h2 id="Hexo-Theme-Matery主题的配置"><a href="#Hexo-Theme-Matery主题的配置" class="headerlink" title="Hexo-Theme-Matery主题的配置"></a>Hexo-Theme-Matery主题的配置</h2><p>Hexo-Theme-Matery主题的其他配置可以看他们的<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">主题文档</a></p><p>如果要对Hexo-Theme-Matery主题进行个性化的修改的话，可以参考这个<a href="https://www.jianshu.com/p/2e6ae2123d57" target="_blank" rel="noopener">大神的文章</a></p><p>这里对上面主题修改的文章有说不明白的地方进行补充说明</p><h3 id="自定义每日一言"><a href="#自定义每日一言" class="headerlink" title="自定义每日一言"></a>自定义每日一言</h3><p>如果你不喜欢文章里面的每日一言，想换一个比如<a href="https://api.ooopn.com/ciba/api.php?type=json" target="_blank" rel="noopener">金山每日一言</a>那些的话，就直接在主题文件里面的hexo-theme-matery-1.0.1/layout/index.exj文件添加个ajax代码<br>例如:</p><pre><code>&lt;script&gt;(function () {        $.ajax({            url: &quot;https://api.ooopn.com/ciba/api.php?type=json&quot;,//向本地的json文件发送请求            type: &quot;GET&quot;,            success: function (data) {                ciba=data.ciba  #ciba就是你插入片段的id                document.getElementById(&quot;ciba&quot;).innerHTML=ciba            },            error: function (error) {                document.getElementById(&quot;ciba&quot;).innerHTML=error            }        })    })();&lt;/script&gt;</code></pre><h3 id="评论的gittalk配置"><a href="#评论的gittalk配置" class="headerlink" title="评论的gittalk配置"></a>评论的gittalk配置</h3><p>gittalk主题配置说明没有说清楚，我这里补充一下，因为主题配置说推荐gittalk，所以我这里也拿gittalk来说明</p><p>首先要申请github授权，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请地址</a></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><ul><li>Application name：项目名，随便填</li><li>Homepage URL：博客地址，也就是要访问的地址，我的是<a href="https://373005226.github.io">https://373005226.github.io</a></li><li>Application description：应用描述，这个随便填</li><li>Authorization callback URL:这个如果你有自己的域名就填自己的域名，没有就和上面的Homepage URL一样就好了</li></ul><p>输入完后会给你一个Client ID和Client Secret</p><p>打开主题配置文件的_config.yml，找到gittalk的这一行</p><pre><code>gitalk:  enable: true        #默认是false，改为true才可以开启评论  owner:             #这里是你的github用户名&#39;  repo:             #这里是你的博客地址  oauth:    clientId:         #刚刚申请的id    clientSecret:     #刚刚申请的密码  admin:             #一般都是你的github用户名了</code></pre><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>上传到你的博客就可以看到评论地址搞定了</p><h2 id="hexo的常见命令"><a href="#hexo的常见命令" class="headerlink" title="hexo的常见命令"></a>hexo的常见命令</h2><p>常见命令</p><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>缩写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>组合命令：</p><pre><code>hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h2 id="将hexo博客部署到github上"><a href="#将hexo博客部署到github上" class="headerlink" title="将hexo博客部署到github上"></a>将hexo博客部署到github上</h2><p>首先要注册一个github账号，注册步骤就跳过了</p><p>新建一个仓库，名字格式最好如下:</p><p>账号名.github.io</p><p>比如我的账号是373005226，仓库的名字就是373005226.github.io</p><p>然后新建一个index.html文件，内容随便写，如图</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/13.png" alt></p><p>然后输入刚刚的仓库名就可以看到自己刚刚写的东西了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/14.png" alt></p><p>紧接着在博客源文件的_config.yml文件下修改如下字段:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/15.png" alt></p><p>!!!格式要像我这样一样啊，或者填<a href="https://github.com/373005226/373005226.github.io.git" target="_blank" rel="noopener">https://github.com/373005226/373005226.github.io.git</a></p><p>然后再命令行输入这三行代码</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>根据上述步骤就可以上传到github了</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>github可以绑定自己买的域名</p><p>域名可以去各大服务商买，这里我用的是阿里云</p><p>购买完域名后，进入域名解析</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/16.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/17.png" alt></p><p>这里的记录值好像是不一定的，记录值就是你打开cmd命令行，ping 你的账号.github.io</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/18.png" alt></p><p>先使用<code>hexo d</code>上传好代码到github上之后，然后在github上新建一个CNAME(没有后缀)文件，里面填写你购买的域名(加不加www都可以)<br><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/19.png" alt></p><p>然后点击settings找到Github Pages填写自己的域名</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/21.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/22.png" alt></p><p>然后就可以绑定自己的域名了</p><h2 id="写markdown注意事项"><a href="#写markdown注意事项" class="headerlink" title="写markdown注意事项"></a>写markdown注意事项</h2><p>写markdown有时候本地编辑没问题，但是上传到服务器的图片有时候是失效的，所以最好图片之类的媒体资源放到腾讯云、七牛云等服务商上面。他们都有对象存储功能，可以把媒体文件上传到他们的服务器，然后再通过URL地址来访问，这样就不用怕自己本地写的markdown文件上传到服务器的图片资源访问不了的问题了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
