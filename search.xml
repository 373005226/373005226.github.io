<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>axios</title>
      <link href="/2020/01/04/axios/"/>
      <url>/2020/01/04/axios/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios这个方法十分的简单，都是如如下形式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>  method<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>axios默认是get请求，params是get请求附带的参数，如果是post请求的话参数就放在data里面</p><h2 id="axios-all"><a href="#axios-all" class="headerlink" title="axios.all"></a>axios.all</h2><p>这个是如果要两个或者以上的请求都完成后再进行下一步</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="axios-spread"><a href="#axios-spread" class="headerlink" title="axios.spread"></a>axios.spread</h2><p>spread是对结果的延展</p><p>这里写一个案例</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'http://101.200.180.194:8000/goods/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'http://101.200.180.194:8000/category/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果是如上的写法的话，得到的结果是</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104170932.png" alt></p><p>spread的功能就是</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'http://101.200.180.194:8000/goods/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'http://101.200.180.194:8000/category/'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104171348.png" alt></p><h2 id="axios全局配置"><a href="#axios全局配置" class="headerlink" title="axios全局配置"></a>axios全局配置</h2><p>比如axios在配置的时候有很多是重复的，比如超时时间、请求头、地址的重复字段如http:127.0.0.1等</p><p>如果都重复写很臃肿，所以可以用default属性</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'http://101.200.180.194:8000/'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout<span class="token operator">=</span><span class="token number">5000</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'goods'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'category'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样还是可以请求到结果的</p><h2 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h2><p>这个还是上面的那个全局配置问题，如果项目里面有两个或者以上的不同配置，比如请求头的地址不一样，那么如果不用全局配置写法的话，那么就会很多重复，如果用了全局配置的话，那么剩下的不同配置的文件就会报错</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> instance1 <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span><span class="token string">'http://101.200.180.194:8000/'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">instance1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'goods'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">instance1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'category'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> instance2 <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span><span class="token string">'http://127.0.0.1/'</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">instance2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'person'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样就可以有两个不同的配置了</p><h2 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h2><p>axios如果是要使用的话要封装在一个包里面，如果使用的是如下的写法的话，那么如果axios不更新了或者是出现了什么大的bug，那么就要一个文件一个文件的修改</p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104173614.png" style="zoom:67%;"><p>如上的写法是可以，而且很常见，比如在uniapp里面的写法什么的…….</p><p>这些请求最好还是封装在一个包里面去调用，如果需要修改了，那么就可以只修改一个地方，就可以修改全局了</p><p>通常用的都是如下的写法：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104174417.png" alt></p><p>然后在组件中调用就是</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./API"</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'goods'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104174828.png" style="zoom:67%;"><p>组件内的方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./API"</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseConfig<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104175237.png" style="zoom:67%;"><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./API"</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'goods'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>因为axios本身就是由promise构造的</p><h3 id="最终写法："><a href="#最终写法：" class="headerlink" title="最终写法："></a>最终写法：</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104175721.png" style="zoom:67%;"><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./API"</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span><span class="token string">'goods'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>因为在axios里面的<code>.then</code>、<code>.catch</code>都是多余的，instance的返回值本身就是promise</p><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><p>拦截器有<strong>在请求之前进行拦截、请求之后进行拦截、响应成功之前拦截、响应之后拦截</strong>这四种方法</p><p>请求前拦截和请求后拦截：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104181544.png" style="zoom:67%;"><p>响应前拦截和响应后拦截：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104181630.png" style="zoom:67%;"><p>这个用于比如只需要返回res.data的值，就可以在响应前拦截中返回需要的值即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2020/01/01/vuex/"/>
      <url>/2020/01/01/vuex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h2><p><code>Vuex</code>在很多网站讲解都是状态管理工具，这个说白了其实就是如果有很多个组件需要传递变量，可以通过<code>Vuex</code>来存储这些变量，<strong>也就是说Vuex就是存储全局变量的地方</strong></p><p>如果两个组件之间变量状态传递，那么可以通过<code>props</code>传递，如果是有很多个组件或者组件之间没有联系的话，通过<code>props</code>传递就会很麻烦</p><p>这个一般是创建一个文件夹，里面创建一个<code>js</code>文件去填写配置</p><p>如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101224536.png" alt></p><p>然后在编写文件之后要去<strong>main.js</strong>挂载才能正常使用</p><p>顺带一提，在<strong>main.js</strong>挂载其实本质就是在<strong>main.js</strong>执行</p><pre><code>Vue.prototype.$store = store</code></pre><h2 id="Vue的单一状态树"><a href="#Vue的单一状态树" class="headerlink" title="Vue的单一状态树"></a>Vue的单一状态树</h2><p>Vue单一状态树其实就是个单一数据源，通俗的讲就是所有数据都只有一个数据源提交。</p><p>如果拿生活中的例子就是，按照以前的公积金政策，每个档案的信息都是分布的，个人档案分到个人档案管理中心，社保分在社保局。但是如果要换个城市入户的话，就要在哪个城市每个地方都提交一份档案，最后再去一个地方提交所有信息，如果有一个部门的信息错误就要回去重新提交一份，原本的方法显得十分的低效。如果换成代码的话，那么就是如果状态信息都保存到多个Store对象中，那么之后的维护和管理都是十分的困难的。</p><p>这也就是我们国家正在完善公积金系统，无论是有多少个城市的公积金，都可以在一个城市里面办理，放在state里面也就是说，无论是有多少个仓库信息，都只调用一个state。无论多少个方法属性都只在一个store存放</p><p>也就是说无论有多少个数据，都只建议创建一个store</p><h2 id="Vuex的结构"><a href="#Vuex的结构" class="headerlink" title="Vuex的结构"></a>Vuex的结构</h2><p>一般的话默认是有如下结构的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101231128.png" style="zoom:67%;"><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>这个就是存储全局变量的地方了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101231403.png" style="zoom:67%;"><p>如果在这里定义变量的话，那么如果要调用它的话，那么就要使用到<code>$store.state.变量</code></p><p>调用方法如图所示：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101232112.png" style="zoom:67%;"><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>这个其实就相当于vue里面的methods方法</p><h4 id="使用-store-state-counter改变值（错误写法）"><a href="#使用-store-state-counter改变值（错误写法）" class="headerlink" title="使用$store.state.counter改变值（错误写法）"></a>使用$store.state.counter改变值（错误写法）</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101232500.png" alt="官方给出的图" style="zoom:67%;"><p>这个<code>devtools</code>是官方推出的插件，<strong>只要使用如上图的流程</strong>，使用这个插件可以跟踪到属性的更改</p><p>比如一个案例：要使用<code>vuex</code>的属性去在页面显示加减法，如果使用如下方法的话，那么达到目的是肯定可以的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101233545.png" style="zoom:67%;"><p><code>vuex</code>的变量也可以跟着去修改</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101233519.png" style="zoom:67%;"><p>这个方法其实就是<code>state</code>和<code>Vue Components</code>之间互相改变，虽然是可以达到目的，但是这样就无法使用<code>devtools</code>工具去监听数据的改变了</p><p>所以这个时候要使用<code>mutations</code>去改变<code>vuex</code>属性的值</p><h4 id="使用mutations去改变值（正确写法）"><a href="#使用mutations去改变值（正确写法）" class="headerlink" title="使用mutations去改变值（正确写法）"></a>使用mutations去改变值（正确写法）</h4><p>先在Vuex里面定义方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101234657.png" style="zoom:67%;"><p>然后在组件的使用方法如图</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101235100.png" style="zoom:67%;"><p>在组件内使用要使用到<code>this.$store.commit</code>去调用vuex的方法</p><p>此时在<strong>devtools</strong>工具也能监听到属性的改变了</p><h4 id="mutations传入一个参数"><a href="#mutations传入一个参数" class="headerlink" title="mutations传入一个参数"></a>mutations传入一个参数</h4><p>这里拿个案例来说明，这里需要在组件里面传入值的话，那么就可以在mutations里面添加一个形参</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102231831.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102232128.png" style="zoom:67%;"><p>在组件内使用mutations方法的话跟emit方法一样的</p><h4 id="mutations传入多个参数"><a href="#mutations传入多个参数" class="headerlink" title="mutations传入多个参数"></a>mutations传入多个参数</h4><p>传入对象的话方法还是一样的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102232705.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102232735.png" style="zoom:67%;"><p>在组件的methods传入的值有个专属的名词叫<strong>payload：负载</strong></p><h4 id="mutations的另外一种提交风格"><a href="#mutations的另外一种提交风格" class="headerlink" title="mutations的另外一种提交风格"></a>mutations的另外一种提交风格</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102233351.png" style="zoom:67%;"><p>但是这种方法传递到vuex的值就不一样了，就不仅仅是一个数字了，而是一个对象，因为这个时候传入过去的就是一个payload对象了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102233533.png" style="zoom:67%;"><h4 id="mutations响应规则"><a href="#mutations响应规则" class="headerlink" title="mutations响应规则"></a>mutations响应规则</h4><p>Vuex里面所有的state方法都是响应式的，只要state的数据发生了改变，那么Vue组件就会自动更新</p><p>但是做到响应式有两个前提：</p><ul><li>在store里面定义好所需要的属性</li><li>在state中对象添加属性的时候，使用如下的方式<ul><li>方法1：使用Vue.set(obj,’newProp’,123)</li><li>方法2：用新的对象给旧对象重新赋值</li></ul></li></ul><p>这里拿个案例来说明</p><p>先定义一个新属性</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102234336.png" style="zoom:67%;"><p>在mutations中添加方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102234527.png" style="zoom:67%;"><p>最后在组件内添加方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102234741.png" style="zoom:50%;"><p>这样子的方法是属于响应式的，这个是每个对象都有一个Dep，一个Dep定义着好多个watcher，Dep来监听属性的变化</p><p>Dep就是个观察者模式，先观看数据有没有变化，如果属性发生了变化，就会通知使用到该属性的地方发生改变</p><p>如果里面修改的不是在state里面定义好的属性</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102235443.png" style="zoom:50%;"><p>position属性在state里面没有被定义，所以即便是添加了这个属性能在<strong>devtools</strong>工具监听到，也不能提交到响应式系统里面</p><p>所以如果是要添加属性的话，最好是使用<code>Vue.set</code>方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102235826.png" style="zoom:67%;"><p>相对应的，如果是要删除方法就使用<code>Vue.delete</code>方法</p><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>这个就相当于vue中的计算属性</p><h4 id="只需要一个形参state"><a href="#只需要一个形参state" class="headerlink" title="只需要一个形参state"></a>只需要一个形参state</h4><p>这里做个案例，比如说是要做一个<code>counter</code>的平方</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102214303.png" style="zoom:67%;"><p>然后在组件中要引用的话，那么就直接使用</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104124900.png" alt></p><p><code>getters</code>还可以做一些过滤功能，比如要过滤年龄大于20岁的数据</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102214939.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102215037.png" style="zoom:67%;"><h4 id="有两个形参：state和getters"><a href="#有两个形参：state和getters" class="headerlink" title="有两个形参：state和getters"></a>有两个形参：state和getters</h4><p><code>getters</code>方法是有第二个形参的，第二个形参实际指向的是自己的<code>getters</code>方法</p><p>比如要调用上述<code>more20stu</code>方法的个数</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102225448.png" style="zoom:67%;"><h4 id="需要在方法中传入值而非定义好的"><a href="#需要在方法中传入值而非定义好的" class="headerlink" title="需要在方法中传入值而非定义好的"></a>需要在方法中传入值而非定义好的</h4><p>如果是需要在组件中传入值，而非在getters里面写死的，那么这个需要在返回值里面定义一个函数，也就是闭包</p><p>如果是需要改变通过组件里面传入数据来筛选大于年龄的范围的话，可以使用如下写法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102230326.png" style="zoom:67%;"><p>这个其实是可以简化为箭头函数的写法的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200102230406.png" style="zoom:67%;"><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p><code>actions</code>就是异步方法，简单的说就是如果<code>mutations</code>里面有要异步操作的方法，比如网路请求等是异步操作的，官网给出的图是<code>actions</code>异步操作在<code>mutations</code>之前</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101232500.png" style="zoom:67%;"><p>如果在<code>mutations</code>直接去执行异步操作的话，因为不确定执行完的时间，所以如果是异步操作需要时间久的话就不会被<strong>devtools</strong>监听到，所以就有了<code>actions</code>方法，<code>mutations</code>会等待<code>actions</code>的操作执行完毕之后再继续往下走。</p><p>其用法如下：</p><h4 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h4><p><code>actions</code>里面默认的第一个形参就是<code>context</code></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104123038.png" style="zoom:67%;"><p>在<code>actions</code>里面调用<code>mutations</code>里面的方法</p><p>然后在组建中使用<code>dispatch</code>方法调用<code>actions</code>的方法就好了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104123148.png" style="zoom:67%;"><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>当然<code>actions</code>也是可以传递参数的，默认的第二个参数名是<code>payload</code></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104123608.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104123639.png" style="zoom:67%;"><h4 id="获取异步操作成功后的信息"><a href="#获取异步操作成功后的信息" class="headerlink" title="获取异步操作成功后的信息"></a>获取异步操作成功后的信息</h4><p>如果是要获取异步操作成功的信息的话</p><p>使用如下写法也是可以的：</p><h5 id="写法1："><a href="#写法1：" class="headerlink" title="写法1："></a>写法1：</h5><p>Vuex里面的方法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104125413.png" style="zoom:67%;"><p>组件中的方法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104125505.png" style="zoom:67%;"><p>但是上面的方法有点不好</p><h5 id="写法2："><a href="#写法2：" class="headerlink" title="写法2："></a>写法2：</h5><p>vuex的写法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104125909.png" style="zoom:67%;"><p>组件中的写法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104125952.png" style="zoom:67%;"><h5 id="方法3（使用promise）："><a href="#方法3（使用promise）：" class="headerlink" title="方法3（使用promise）："></a>方法3（使用promise）：</h5><p>但是方法2的写法不够优雅</p><p>Vuex的写法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104130901.png" style="zoom:67%;"><p>组件内的写法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104130714.png" style="zoom:67%;"><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>modules方法就是如果所有的东西都往store里面塞，那么数量多的话就会显得很臃肿，但是因为单一状态树的原因只能创建一个store，所以vuex可以在store里面继续划分模块</p><h4 id="使用modelA里面的state"><a href="#使用modelA里面的state" class="headerlink" title="使用modelA里面的state"></a>使用modelA里面的state</h4><p>使用方法如下：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104132122.png" style="zoom:67%;"><p>如果是<code>modelA</code>里面有个state属性的话，那么在组件中调用的方法如下：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104132311.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104132437.png" style="zoom:67%;"><p>因为<code>modelA</code>最终会放在<code>store</code>的<code>state</code>里面</p><h4 id="使用modelA里面的mutations"><a href="#使用modelA里面的mutations" class="headerlink" title="使用modelA里面的mutations"></a>使用modelA里面的mutations</h4><p>如果是在modelA里面定义一个方法的话</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104133005.png" style="zoom:67%;"><p>组件中的方法：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104133247.png" style="zoom:67%;"><p>这个还是用以前的方法就好了，因为只要名字不是重复的，<code>commit</code>会去从<code>store</code>里面找，如果找不到再去看看<code>models</code>里面有没有这个方法</p><h4 id="modelA里面的getter"><a href="#modelA里面的getter" class="headerlink" title="modelA里面的getter"></a>modelA里面的getter</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104133556.png" style="zoom:67%;"><p>组件内的写法：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104133815.png" alt></p><p>但是如<code>stote</code>的<code>getters</code>的话，是有一个<code>getters</code>形参的，这个形参是可以调用自己的<code>getters</code>方法的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104134106.png" style="zoom:67%;"><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104134142.png" alt></p><p>如果是想引用<code>store</code>的<code>state</code>属性的话，那么可以引用第三个参数<code>rootState</code></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104134539.png" style="zoom: 67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104134617.png" style="zoom:67%;"><h4 id="modelA里面的actions"><a href="#modelA里面的actions" class="headerlink" title="modelA里面的actions"></a>modelA里面的actions</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104135150.png" style="zoom:67%;"><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104135350.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>modelA</code>里面的所有方法的形参都是指向自己<code>modelA</code>里面的方法的</p><h2 id="Vuex的文件结构"><a href="#Vuex的文件结构" class="headerlink" title="Vuex的文件结构"></a>Vuex的文件结构</h2><p><code>Vuex</code>的文件结构是一般都会把<code>state</code>的参数用对象传进去</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104140640.png" style="zoom:67%;"><p>然后<code>mutations</code>、<code>actions</code>、<code>getters</code>里面的方法，把方法写在新的一个文件导入即可</p><p>比如<code>mutations</code></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200104140810.png" style="zoom:67%;"><p>如果是<code>model</code>里面的方法，就新建一个<code>model</code>文件夹，里面存放<code>store</code>的<code>model</code>方法即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-router详解</title>
      <link href="/2019/12/27/vue-router/"/>
      <url>/2019/12/27/vue-router/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="vue-router的安装"><a href="#vue-router的安装" class="headerlink" title="vue-router的安装"></a>vue-router的安装</h2><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">vue-router</a>是官方推荐的路由插件，官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌</p><p>使用命令</p><pre class=" language-js"><code class="language-js">npm install vue<span class="token operator">-</span>router <span class="token operator">--</span>save</code></pre><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h2><h3 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h3><p>一开始使用脚手架方法安装的代码是这样的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228130938.png" style="zoom:67%;"><p>但是实际上可以分为好几个步骤</p><h3 id><a href="#" class="headerlink" title></a><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228131942.png" style="zoom:67%;"></h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228142155.png" style="zoom:67%;"><h3 id="vue-router基本使用"><a href="#vue-router基本使用" class="headerlink" title="vue-router基本使用"></a>vue-router基本使用</h3><p>先添加几个子组件</p><p>先要导入子组件</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228143705.png" alt></p><p>然后在路由里面导入</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228151332.png" style="zoom:67%;"><p>填写这两个配置<code>（path、components）</code></p><p>最后在<code>App.vue</code>里面配置<code>router-link</code>，并且填写相应的配置即可</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228151414.png" style="zoom:67%;"><p>最后是需要<code>router-view</code>才可以展示配置的路由</p><p><code>router-link</code>是导入<code>vue-router</code>后注册的全局属性</p><h3 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h3><p>这个比如打开网页的默认显示界面的路径</p><p>直接配置一个<code>redirect</code>就好了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20200101221619.png" alt></p><h3 id="vue-router的mode"><a href="#vue-router的mode" class="headerlink" title="vue-router的mode"></a>vue-router的mode</h3><p>在导航栏出现类似这种的情况，地址栏带着个#</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228153917.png" alt></p><p>这个是因为默认是哈希模式的</p><p>如果要解决这种情况可以选择 </p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228154435.png" style="zoom:67%;"><p>然后导航栏的#就消失了</p><p>这个的原因就是项目的配置默认的是哈希模式，但是路由用的是history模式，这个时候就会出现导航栏出现#的问题</p><h2 id="router-link其他属性"><a href="#router-link其他属性" class="headerlink" title="router-link其他属性"></a>router-link其他属性</h2><h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><p>如上述代码所示，默认<code>router-link</code>渲染出来就是个a标签，如果要改成其他标签类似button之类的，就可以做修改</p><p>方法很简单，只需要加一个tag属性即可</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228155022.png" alt></p><p>这样浏览器渲染出来就是一个button标签了</p><h3 id="跳转方式"><a href="#跳转方式" class="headerlink" title="跳转方式"></a>跳转方式</h3><p>默认跳转方式是类似于小程序的navigate，也就是跳转后可以返回</p><p>如果要修改成replace的话，也就是跳转后不能返回，只需要加入一个replace字段</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228155419.png" alt></p><p>此时就没有返回功能了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228155436.png" alt></p><h3 id="router-link的活跃状态"><a href="#router-link的活跃状态" class="headerlink" title="router-link的活跃状态"></a>router-link的活跃状态</h3><h4 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h4><p>router-link默认点击哪个路由，哪个路由就会变成活跃状态</p><p>如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228161537.png" alt></p><p>活跃的路由默认就会带一个样式</p><p>这个一般用于点击后显示样式等功能</p><p>当然这个名字是可以修改的，修改方式如下图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228160639.png" alt></p><p>再添加一个字体变红的样式，效果就会很明显了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228160748.png" style="zoom:67%;"><p>效果如下图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228160835.png" alt></p><p>但是这样是有个弊端的，因为每个路由都要加一个<code>active-class=&quot;active&quot;</code>字段，如果要修改的路由很多的话就会显得十分的麻烦</p><p>这里就可以在全局里面修改</p><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228161141.png" style="zoom:67%;"><p>先把原来配置的<code>active-class=&quot;active&quot;</code>删掉，只需要添加一个<code>linkActiveClass</code>字段，就可以把默认的全局活跃样式修改了</p><h2 id="其他标签实现跳转功能"><a href="#其他标签实现跳转功能" class="headerlink" title="其他标签实现跳转功能"></a>其他标签实现跳转功能</h2><h3 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h3><p>之前用的都是使用<code>router-link</code>的方式去实现跳转功能，如果是要实现用其他标签来跳转的话，就要使用事件的方法去跳转</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228163148.png" style="zoom:67%;"><p><code>$router</code>这个属性是<code>vue-router</code>在所有的组件都添加了的</p><p><code>$router</code>的<code>push</code>方法就是<code>pushSate</code>，也就是这个是可以返回的，如果要不想返回，可以使用<code>replace</code>属性 </p><h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228163749.png" style="zoom:67%;"><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>当然在实际项目开发中不可能通过写死的路由去跳转，一般都是用于带着参数去跳转的方式开发</p><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228165734.png" style="zoom:67%;"><h3 id="在组件上配置参数"><a href="#在组件上配置参数" class="headerlink" title="在组件上配置参数"></a>在组件上配置参数</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228184048.png" style="zoom:67%;"><p>当然肯定要在跳转过去的页面中要获取传过去的ID</p><h3 id="在新页面获取传递过去的值"><a href="#在新页面获取传递过去的值" class="headerlink" title="在新页面获取传递过去的值"></a>在新页面获取传递过去的值</h3><h4 id="方法1：使用计算属性获取"><a href="#方法1：使用计算属性获取" class="headerlink" title="方法1：使用计算属性获取"></a>方法1：使用计算属性获取</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228184854.png" style="zoom:67%;"><p><strong>注意这个<code>params</code>后面的那个属性是跟全局路由注册过的一样的名字，也就是<code>path:&#39;/user/:userid&#39;</code></strong></p><h4 id="方法2：直接使用mustach方法获取"><a href="#方法2：直接使用mustach方法获取" class="headerlink" title="方法2：直接使用mustach方法获取"></a>方法2：直接使用mustach方法获取</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228185554.png" style="zoom:67%;"><h4 id="route和-router的区别"><a href="#route和-router的区别" class="headerlink" title="$route和$router的区别"></a>$route和$router的区别</h4><p><code>$route</code>是获取上个页面的活跃路由</p><p>而<code>$router</code>是在路由注册过的全局<code>router</code>对象</p><p>在这里打印下这两者</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228185646.png" style="zoom:67%;"><p>打印出来<code>$route</code>的结果如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228190329.png" alt></p><p><code>$router</code>的结果如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228190417.png" alt></p><p>由此可以证实上面的结果</p><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><p>当打包出来的程序，如果打包出来的包十分的大，点开项目界面的时候会出现几秒的空白来加载文件，那么对用户的体验感十分的不好</p><p>所以官方推荐以路由懒加载的形式来编写</p><p>这里先把上面的代码打包，打包后的结果如图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228191135.png" alt></p><p>第一个配置文件app…..的是业务代码<strong>（即开发者自己编写的代码）</strong></p><p>第二个文件就是对打包的代码做底层支撑的<strong>（即ES6语法的import、export、commentjs等，使之变成对浏览器能够识别的东西）</strong></p><p>第三个文件是第三方代码<strong>（即开发中引用的第三方的东西Vue、Vue-router、axios、Vuex等）</strong></p><p>在项目开发中，也就是要在点击哪个页面的时候，哪个页面就进行加载，这也就是路由的懒加载的思想</p><p>使用路由懒加载只需要重新定义上面导入的方法：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228192459.png" alt> </p><p>然后重新打包文件</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228192646.png" alt></p><p>如图所示，就多了三个打包的文件，现在引用哪个文件就会使用哪个路由的打包文件了</p><h2 id="嵌套子路由"><a href="#嵌套子路由" class="headerlink" title="嵌套子路由"></a>嵌套子路由</h2><p>一般话比如个人中心的地址、个人信息等，在地址栏一般是由User/address、User/person等形式表现出来</p><p>这个时候就要用到子路由了</p><p>在全局路由里面嵌套子路由的方式如下：</p><p>先在全局路由里面在要添加子路由的字段加上children</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228201229.png" style="zoom:67%;"><p>然后在要添加路由的那个文件里面添加配置</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228201903.png" style="zoom:67%;"><p>然后就可以添加子路由了</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="使用router-link方式跳转"><a href="#使用router-link方式跳转" class="headerlink" title="使用router-link方式跳转"></a>使用router-link方式跳转</h3><h4 id="配置router-link"><a href="#配置router-link" class="headerlink" title="配置router-link"></a>配置router-link</h4><p>先添加一个子组件Profile</p><p>如果要参数传递的话，只能用对象的方式去传递</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228210106.png" alt></p><p>然后在地址栏就会出现参数传递了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228210147.png" alt></p><h4 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228210805.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228210831.png" style="zoom:67%;"><h3 id="其他标签去跳转"><a href="#其他标签去跳转" class="headerlink" title="其他标签去跳转"></a>其他标签去跳转</h3><p>如果不是通过router-link去跳转的话，比如使用的是button，那么方法还是使用事件去传递</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228211246.png" style="zoom:67%;"><h2 id="router和-route的区别"><a href="#router和-route的区别" class="headerlink" title="$router和$route的区别"></a>$router和$route的区别</h2><h3 id="router"><a href="#router" class="headerlink" title="$router"></a>$router</h3><p>这里先在局部打印<code>$router</code>和在<strong>main.js</strong>全局打印<code>$router</code></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228212224.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228212553.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228212404.png" style="zoom:67%;"><p>发现这两者打印的结果是一样的，所以局部打印的<code>this.$router</code>是new Vue传的那个<code>router</code>是同一个东西 </p><p>这里进入源码看看</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228212850.png" style="zoom:67%;"><p>因为这里实例化了一个类<code>VueRouter</code>，所以后面才可以import导入</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228212957.png" alt></p><p>这里的所有方法就是<code>$router</code>可以使用的方法</p><h3 id="route和-router为什么能用"><a href="#route和-router为什么能用" class="headerlink" title="$route和$router为什么能用"></a>$route和$router为什么能用</h3><h4 id="Vue-prototype"><a href="#Vue-prototype" class="headerlink" title="Vue.prototype"></a>Vue.prototype</h4><p>这个route和router为什么能用呢，因为vue-router源码里面注册了全局组件</p><p>每次<code>Vue.use</code>的时候用的其实都是内部的<code>install</code>方法，所以要通过install方法去找最终的源码</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228213741.png" alt></p><p>可以使用<code>this.$route</code>和<code>this.$router</code>是因为所有的组件都是继承于Vue类的原型</p><p>这里来证实一下，先在<strong>main.js</strong>定义一个Vue的属性</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228214155.png" style="zoom:67%;"><p>然后在子组件中调用这个方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228214402.png" style="zoom:67%;"><p>如图所示：是可以使用这个方法的</p><p>如果定义的是一个属性的话也是一样的</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228221718.png" style="zoom:67%;"><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228221805.png" style="zoom:67%;"><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228222047.png" alt></p><p>两者都可以打印出来</p><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>再接着看源码</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228215255.png" style="zoom:67%;"><p>这个<code>object.defineProperty</code></p><p>这个其实是这样的，假如要往一个对象里面添加一个属性</p><p>按照以前的方法就是直接添加就好了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">}</span></code></pre><p>如果是要<code>object.defineProperty</code>的方法就是</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//defineProperty的写法</span>object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span></code></pre><p><code>defineProperty</code>这个也就是Vue的响应式实现方法的核心</p><p>所以上面图片的那个代码也就是给<code>Vue.prototype</code>加一个<code>$route</code>,其值为<code>return this._routerRoot._router</code></p><p>而<code>return this._routerRoot._router</code>里面最后的那个<code>_router</code>就是<strong>main.js</strong>里面挂在进去的那个<code>router</code></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228220023.png" alt></p><p>而<code>this._routerRoot</code>呢就是上面的Vue实例传过去的</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228220221.png" alt></p><p>if下面第一行的<code>this</code>，就是Vue实例，把Vue实例传递给<code>this._routerRoot</code>。</p><p>然后又把<code>this.$options.router</code>赋值给<code>this.__router</code>，这个就相当于给<code>this._routerRoot</code>添加了一个<code>this._router</code>属性，即<code>this._routerRoot._router</code></p><p>也就是说<code>this._routerRoot._router</code>就等于<code>this.$options</code>中的<code>options</code>，而这个<code>options</code>就相当于<strong>main.js</strong>里面传入的<code>router</code></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228220023.png" alt></p><p>然后再使用Vue注册一个全局组件</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228221105.png" alt></p><p>所以才可以使用<code>this.$route</code>和<code>this.$router</code></p><p>把上面代码块的object.defineProperty代码翻译过来也就是</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228221338.png" alt></p><p>只不过最后的那个<code>_route</code>和是动态的，哪个组件于活跃就把<code>_route</code>赋值给谁，而这个<code>_route</code>永远指向当前活跃的对象</p><p>然后又赋值给Vue的实例，所以才可以在全局使用</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>$router是Vue的实例，如果想要导航到不同的URL话，就要使用$router.push等方法，所有方法都在源码定义好了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228222414.png" style="zoom:67%;"><p>而$route是当前活跃的路由，可以获取当前的<code>query、params、path</code>等属性</p><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228225153.png" style="zoom: 50%;"><p>官网的这个图的重点就是那几个生命周期</p><p>create就是在组件被创建的时候的回调函数</p><p>mouted就是在组件挂在到dom上面的时候的回调函数，因为vue是先创建组件，然后再把template挂在到dom上面</p><p>updated是界面发生更新的时候的回调函数</p><h3 id="给组件添加标题"><a href="#给组件添加标题" class="headerlink" title="给组件添加标题"></a>给组件添加标题</h3><p>现在创建的每个组件显示的都是模板文件的title</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228224635.png" alt></p><p>如果要修改这个标题的话，那么可以使用create去修改</p><p>添加如下字段就可以修改title了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229010608.png" style="zoom: 67%;"><p>然后点击About，标题就可以显示成”关于“了</p><p>但是这个方法有个弊端，就是需要在每个子组件都要添加这个代码，这样是十分的繁琐的，所以官方有个方法：<strong>全局前置守卫</strong></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229010921.png" alt></p><p>其部分源码如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229011142.png" alt></p><p>其实这个就是给<code>NavigationGuard</code>起了个别名，也就是括号里面的内容，也就是说传递的参数本身又有三个参数，<code>to</code>、<code>from</code>和<code>next</code> </p><p>在代码中实现也就是</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229011615.png" style="zoom:67%;"><p><strong>这个next是必须要去调用的，如果不实现beforeEach方法，那么就是默认调用，如果实现了beforeEach方法，那么如果不调用next就不能进行路由跳转</strong></p><h4 id="错误写法"><a href="#错误写法" class="headerlink" title="错误写法"></a>错误写法</h4><p>如果要进行跳转后能改变标题的话</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229011907.png" style="zoom:67%;"><p>此时的这个<code>to</code>是没有<code>title</code>这个属性的</p><p><code>to</code>的这个源码的类型是<code>route</code>类型</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229012017.png" alt></p><p>Route也就是全局路由的配置了</p><p>只要在路由里面添加<code>meta</code>属性就可以调用title属性了</p><p>如下图所示：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229012250.png" style="zoom:67%;"><p>只要在每个需要修改主题的路由里面添加<code>meta</code>对象的<code>title</code>属性，就可以实现了</p><p>最后再在<code>beforeEach</code>修改字段</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229012504.png" style="zoom:67%;"><p>但是如上代码有个隐患，就是在子路由的时候的<code>title</code>是<code>undefined</code></p><p>打印一下<code>to</code>属性先看看</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229012800.png" style="zoom:67%;"><p>别的没有子路由的组件都可以正常显示标题，但是有子路由的组件显示是<code>undefined</code>，子路由根本就没有<code>meta</code>属性，但是每个路由都有一个<code>matched</code>，而里面的属性是大家都共有的，所以这个要使用<code>matched</code>来获取<code>title</code></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229013251.png" alt></p><h4 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229013421.png" style="zoom:67%;"><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><h3 id="保持上个点击组件的状态"><a href="#保持上个点击组件的状态" class="headerlink" title="保持上个点击组件的状态"></a>保持上个点击组件的状态</h3><p>这个理论上说起来很麻烦，但是实际上就是监听跳转过程，也就是如果我上一次点击的是Home的message界面</p><p>，我点击其他界面后再点击回Home，里面显示的还是message，也就是上一次打开的界面，而不是显示默认跳转的news界面</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191228223535.png" style="zoom:67%;"><p>也就是避免组件的重新渲染，保留组件的状态</p><p>先在home和about加入create回调方法</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229121226.png" style="zoom:67%;"><p>create方法只有在组件被创建的时候调用，如果是按照之前的方法的话，那么每次点开组件都会有一个create方法被调用</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229121420.png" alt></p><p>如果加上keep-alive后</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229121541.png" alt></p><p>那么create方法就只会被调用一次了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229121555.png" alt></p><p>这个其实要用到<strong>组件内守卫</strong></p><p>只需要先把原来全局路由的<code>Home</code>下面的<code>redirect</code>去掉，然后添加<code>activated</code><strong>（组件活跃时候的回调函数）</strong></p><p>然后再掉用<strong>组件内守卫</strong></p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191229122901.png" style="zoom:67%;"><p>这样子就可以使用记录上个点击状态的功能了</p><h3 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h3><p><code>activated</code>和<code>deactivated</code>只有在使用了<code>keep-alive</code>的时候才会被使用</p><h3 id="keep-alive补充点"><a href="#keep-alive补充点" class="headerlink" title="keep-alive补充点"></a>keep-alive补充点</h3><p>keep-alive有两个重要的属性</p><ul><li>include：字符串或正则表达式，只有匹配的组件才会被缓存</li><li>exclude：字符串或正则表达式，任何匹配到的组件都不会被缓存</li></ul><p>这个因为如果是个人中心等会变化的页面就需要被时刻修改</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习随笔</title>
      <link href="/2019/12/22/sui-bi/"/>
      <url>/2019/12/22/sui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="html5中改变URL和页面不刷新的方法"><a href="#html5中改变URL和页面不刷新的方法" class="headerlink" title="html5中改变URL和页面不刷新的方法"></a>html5中改变URL和页面不刷新的方法</h2><ol><li><p>location.hash = ‘aaa’    这样是全局不刷新的</p></li><li><p>HTML5里面的history模式：history.pushState({},’’,’home’)</p></li><li><p>HTML5的replaceState：history.replaceState({},’’,’ass’)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>插槽slot</title>
      <link href="/2019/12/21/cha-cao/"/>
      <url>/2019/12/21/cha-cao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="插槽的使用"><a href="#插槽的使用" class="headerlink" title="插槽的使用"></a>插槽的使用</h2><p>插槽就像我们日常生活中的U盘什么的接口，可以使用来个性化定制。拿京东的导航栏为例：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221153120.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221153148.png" alt></p><p>类似这类网站，遇到这种大面积重复的部分肯定不是每个页面都是重写的，肯定是有复用的形式。</p><p>拿下面的代码来说：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是子组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如果我要在第一个<code>cpn</code>里面添加一个<code>button</code>，第二个<code>cpn</code>里面添加一个<code>span</code>，那么如果在子组件<code>template</code>里面添加的话就会导致每个<code>cpn</code>都添加了，所以这个时候就要用到插槽。</p><p>插槽可以帮助个性化定制，其使用方式如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>h3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是子组件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>运行效果如图：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221153650.png" style="zoom:50%;"><p>每个子组件都可以自定义要的组件</p><h2 id="插槽的默认值"><a href="#插槽的默认值" class="headerlink" title="插槽的默认值"></a>插槽的默认值</h2><p>此外插槽还可以添加默认值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是子组件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>默认slot插槽组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221154051.png" style="zoom:67%;"><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>这个还是拿京东的导航条来说明</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221153120.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221153148.png" alt></p><p>这个导航条三个部分就有三个插槽，也就是上面的方法不适用的，要确定每个插槽要添加什么内容，所以就有具名插槽</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>left<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>左边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>center<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>中间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>right<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>右边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>                123            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                    isShow<span class="token punctuation">:</span><span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>                        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>                        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span><span class="token punctuation">{</span>                                isShow<span class="token punctuation">:</span><span class="token boolean">false</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>设置了一个<code>isShow</code>属性来判断组件的作用域，结果如图：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221155437.png" style="zoom: 50%;"><p>也就是说是可以显示的，这个的插槽的作用域是当前模板里面的，如上代码的组件是在app模板里面的，所以使用的是父组件的属性，也就是<code>isShow=true</code></p><p>如果是子组件template里面编写的作用域的话，如下代码所示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>isShow<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                123                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                    isShow<span class="token punctuation">:</span><span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>                        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>                        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span><span class="token punctuation">{</span>                                isShow<span class="token punctuation">:</span><span class="token boolean">false</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在子组件<code>template</code>里面编写一个<code>button</code>，这个<code>button</code>引用的就是它当前作用域的值，也就是<code>isShow=&#39;false&#39;</code></p><p>用官方文档的话说就是：<strong>父模板的组件都会在父级作用域内编译，子组件模板的所有东西都会在子集作用域内编译</strong></p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>作用域插槽这个官方文档说的也不是特别清楚，实际上的作用如下：</p><p>在子组件定义了一堆数据，然后在父组件显示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in planguage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            {{item}}                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">:</span> <span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    cpn<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        template<span class="token punctuation">:</span> <span class="token string">'#cpn'</span><span class="token punctuation">,</span>                        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">{</span>                                planguage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'c#'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221160736.png" style="zoom:50%;"><p>假如此时有一个需求，要求数据是子组件的，但是排布的样式由父组件决定。</p><p>也就是父组件要获取子组件的属性，然后父组件再用自己的方式打印出来。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--                2.把子组件的属性打印出来--></span><span class="token comment" spellcheck="true">&lt;!--                这个是V2.5.*的版本中，必须要用template包裹起来，往后的版本是没有的，为了兼容要使用template版本--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--                3..把要遍历的属性打印出来--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in slot.abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--                1. 这里获取子组件的属性--></span><span class="token comment" spellcheck="true">&lt;!--                这个：abc名字是随便取的，如果要自定义名字的话后面也修改名字就好了--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:abc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>planguage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in planguage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            {{item}}                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">:</span> <span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    cpn<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        template<span class="token punctuation">:</span> <span class="token string">'#cpn'</span><span class="token punctuation">,</span>                        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">{</span>                                planguage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'c#'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">]</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>运行结果如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221161423.png" alt></p><p>就可以使用自己的方式去排布了</p><p>子组件的slot的值是可以自定定义的，改成什么后面也就引用什么，template里面的<code>slot-scope=&quot;slot&quot;</code>这个是固定的，一定要这样写，<code>template</code>是<code>vue</code>的2.5.*版本中一定要使用template包裹起来，不然会报错，这个是为了兼容才这样写</p><p>整体而言的流程如下：</p><ol><li>子组件的slot引用子组件的属性</li><li>父组件使用<template slot-scope="slot"></template>去调用，注意这个的<code>slot-scope=&quot;slot&quot;</code>是固定格式</li><li>在<template slot-scope="slot"></template>里面<code>v-for</code>调用要遍历的属性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化的使用</title>
      <link href="/2019/12/20/vue-zhong-de-zu-jian-hua/"/>
      <url>/2019/12/20/vue-zhong-de-zu-jian-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="组件化的最基本使用"><a href="#组件化的最基本使用" class="headerlink" title="组件化的最基本使用"></a>组件化的最基本使用</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 以下这种方法在Vue2.X是看不到了，基本上都是使用语法糖去写 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//1.创建组件</span>            <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;h2>我是标题&lt;/h2>                    &lt;p>我是内容hhhhhhhhh&lt;/p>                &lt;/div>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2.注册组件（全局组件）</span>            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-cpn'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>组件化的最基本使用的步骤就是：</p><ol><li>创建组件</li><li>注册组件</li><li>使用组件</li></ol><p>现在Vue的版本的源码已经发布到3.0了，等正式发布还需要一段时间，以前老版本使用的是上面代码的写法，但是实际上使用的方法还是如上代码的写法，只是写法更简单了而已</p><h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>如上代码的写法是用全局组件去注册的，也就是所有组件都可用，如下代码所示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 以下这种方法在Vue2.X是看不到了，基本上都是使用语法糖去写 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &lt;div id = 'app2'>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//1.创建组件</span>            <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`                &lt;div>                    &lt;h2>我是标题&lt;/h2>                    &lt;p>我是内容hhhhhhhhh&lt;/p>                &lt;/div>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2.注册组件</span>            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-cpn'</span><span class="token punctuation">,</span>cpnC<span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app2'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>通过控制台一看，即使是在app里面注册的，在app2都还是可以用的</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220160539.png" alt></p><h3 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h3><p>如果要使用局部组件的话，那么就要在app里面注册一个局部组件</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 以下这种方法在Vue2.X是看不到了，基本上都是使用语法糖去写 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//1.创建组件</span>            <span class="token keyword">const</span> cpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>                    &lt;h2>我是标题&lt;/h2>                    &lt;p>我是内容hhhhhhhhh&lt;/p>                &lt;/div>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2.注册组件(这个是全局组件，也就是意味着能在多个Vue的实例化下使用)</span>            <span class="token comment" spellcheck="true">// Vue.component('cpn',cpnC)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn <span class="token punctuation">:</span> cpnC                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app2'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220160725.png" alt></p><h2 id="父子组件的使用"><a href="#父子组件的使用" class="headerlink" title="父子组件的使用"></a>父子组件的使用</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 以下这种方法在Vue2.X是看不到了，基本上都是使用语法糖去写 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 创建组件1:子组件</span>            <span class="token keyword">const</span> cpnC1 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>                    &lt;h2>我是标题1&lt;/h2>                    &lt;p>我是内容11111111&lt;/p>                &lt;/div>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 创建组件2:父组件</span>            <span class="token keyword">const</span> cpnC2 <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>                    &lt;h2>我是标题2&lt;/h2>                    &lt;p>我是内容222222222&lt;/p>                    &lt;cpn1>&lt;/cpn1>                &lt;/div>`</span></span>                <span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn1<span class="token punctuation">:</span>cpnC1                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//root组件</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn <span class="token punctuation">:</span> cpnC2                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220161941.png" style="zoom:50%;"><p>这个其实在使用过程中，子组件就已经被编译好了，因为在编译cpn2的时候发现有个cpn1，如果在局部组件发现没有cpn1，那么就去全局组件里面找</p><h2 id="组件注册的语法糖写法"><a href="#组件注册的语法糖写法" class="headerlink" title="组件注册的语法糖写法"></a>组件注册的语法糖写法</h2><h3 id="全局注册的语法糖写法"><a href="#全局注册的语法糖写法" class="headerlink" title="全局注册的语法糖写法"></a>全局注册的语法糖写法</h3><p>可以用Vue新版本的语法糖写法， 省去extend的步骤来去注册组件</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// const cpnC = Vue.extend()</span>            <span class="token comment" spellcheck="true">// 1.注册全局组件的语法糖</span>            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>                    &lt;h2>我是标题&lt;/h2>                    &lt;p>我是内容hhhhhhhhh&lt;/p>                &lt;/div>`</span></span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="局部组件注册的语法糖"><a href="#局部组件注册的语法糖" class="headerlink" title="局部组件注册的语法糖"></a>局部组件注册的语法糖</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 注册局部组件的语法糖</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token string">'cpn2'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                        template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>&lt;h2>标题2&lt;/h2>&lt;/div>`</span></span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="组件模板的分离写法"><a href="#组件模板的分离写法" class="headerlink" title="组件模板的分离写法"></a>组件模板的分离写法</h2><p>上面代码看起来就很乱，在js里面添加html的代码看起来十分的不美观，这里介绍把html代码分离出去的写法</p><h3 id="方法1：把代码写到script里面"><a href="#方法1：把代码写到script里面" class="headerlink" title="方法1：把代码写到script里面"></a>方法1：把代码写到script里面</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 写法1，使用script --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn1'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token string">'#cpn1'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">{</span>                        title<span class="token punctuation">:</span><span class="token string">'abc'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="方法2：写到template里面"><a href="#方法2：写到template里面" class="headerlink" title="方法2：写到template里面"></a>方法2：写到template里面</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- template标签 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是方法二的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token string">'#cpn2'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="组件数据存放的问题"><a href="#组件数据存放的问题" class="headerlink" title="组件数据存放的问题"></a>组件数据存放的问题</h2><p>上面代码都是写死的，如果每个组件都需要有自己的值的话就需要在注册的时候添加自己的data值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">{</span>                        title<span class="token punctuation">:</span><span class="token string">'abc'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里的data不能是个对象类型，不然会报错，如下错误代码所示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    title<span class="token punctuation">:</span><span class="token string">'abc'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>![image-20191220164939991](C:\Users\LY\Pictures\Camera Roll\image-20191220164939991.png)</p><p>因为如果直接这样写</p><pre><code>data(){}</code></pre><p>这样不明摆着就是一个ES6语法来写的增强函数吗，所以这个要添加个返回值才可以</p><h3 id="为什么data必须设计成一个函数"><a href="#为什么data必须设计成一个函数" class="headerlink" title="为什么data必须设计成一个函数"></a>为什么data必须设计成一个函数</h3><p>详情看：<a href="https://www.bilibili.com/video/av59594689?p=57" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?p=57</a></p><p>这里拿个加减法的变量来演示</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 1. 那么问题就来了，那么多个组件，理论上来说应该是公用一个counter对象，但是一个选择的加减，另外的两个都不变 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>当前计数：{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'cpn'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                template<span class="token punctuation">:</span> <span class="token string">'#cpn'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 2.问题就在这,每次调用一个对象的时候,都会调用一个data函数,每次调用的时候都会给他一个新的值</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        counter<span class="token punctuation">:</span> <span class="token number">0</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'add被执行'</span><span class="token punctuation">)</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"减法被执行"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里的代码是有个返回值的，如果没有返回值的话，那么每个count+1的时候。每个count都+1了，因为他们作用域是同一个，而return的话，每次都有一个新的对象返回</p><p>如代码所示：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">21</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> obj            <span class="token punctuation">}</span>            <span class="token keyword">let</span> obj1<span class="token operator">=</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> obj3<span class="token operator">=</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            obj1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'LL'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>每个实例化后的值的返回值都是一样的，如果obj1修改了其中的一个属性，那么全部obj2和obj3的属性都会发生修改，因为他们的作用域是一样的。</p><h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><p>在开发中，都是在一个大的组件中请求完数据，然后子组件再使用v-for去遍历数据的值。因为如果每个组件的数据都要去向后台发送请求数据的话，那么对服务器的压力是很大的。</p><p>如果是父组件向子组件传递数据，那么只需要通过<code>props</code>的方式去传递数据。如果是子组件向父组件传递数据的话，那么就需要使用到发送事件<code>($emit Events)</code></p><h3 id="父组件传递值到子组件"><a href="#父组件传递值到子组件" class="headerlink" title="父组件传递值到子组件"></a>父组件传递值到子组件</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:cmovie</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{cmovie}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>      props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'cmovie'</span><span class="token punctuation">,</span><span class="token string">'cmessage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>          movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="props可以有类型限制"><a href="#props可以有类型限制" class="headerlink" title="props可以有类型限制"></a>props可以有类型限制</h4><p>props不仅仅可以使用数组的方式的写法，还可以使用对象的方式</p><p>比如：</p><pre class=" language-html"><code class="language-html"> <span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:cmovie</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie<span class="token punctuation">"</span></span> <span class="token attr-name">:cmessage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{cmovie}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// props:['cmovie','cmessage'],//这里一定不能使用驼峰式命名</span>      props<span class="token punctuation">:</span><span class="token punctuation">{</span>        cmovie<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>        cmessage<span class="token punctuation">:</span> String      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>          movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>比如如上代码，cmovie就只能为Array，cmessage就只能是String方法</p><p>props支持的类型限制有：</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220180150.png" style="zoom:67%;"><h4 id="props设置默认值"><a href="#props设置默认值" class="headerlink" title="props设置默认值"></a>props设置默认值</h4><p>props除了可以设置类型限制之外还可以设置默认值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;cpn :cmovie="movie" :cmessage="message">&lt;/cpn>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{cmovie}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// props:['cmovie','cmessage'],//这里一定不能使用驼峰式命名</span>      props<span class="token punctuation">:</span><span class="token punctuation">{</span>        cmovie<span class="token punctuation">:</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//这个数组的话最好是要用一个返回值去写，因为在vue的2.5.17的时候如果不使用返回值就会报错</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        cmessage<span class="token punctuation">:</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>          <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'hello world'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>          movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span><span class="token punctuation">{</span>        cpn      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里的返回值必须是一个函数，因为类型是<strong>对象或者是数组</strong>的时候，默认值必须是一个函数，也就是必须如下的写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果不使用函数式的写法的话就会报错，如下代码所示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    &lt;cpn :cmovie="movie" :cmessage="message">&lt;/cpn>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{cmovie}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cmessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// props:['cmovie','cmessage'],//这里一定不能使用驼峰式命名</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      cmovie<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//这里修改了个错误的写法</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      cmessage<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">'hello world'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220183449.png" style="zoom:67%;"><h4 id="props的其他写法"><a href="#props的其他写法" class="headerlink" title="props的其他写法"></a>props的其他写法</h4><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220183813.png" style="zoom:67%;"><p>甚至还可以使用自定义对象去创建</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221102053.png" style="zoom:67%;"><h4 id="props的驼峰标识"><a href="#props的驼峰标识" class="headerlink" title="props的驼峰标识"></a>props的驼峰标识</h4><p>props不能随便使用驼峰标识，因为这个可能会有点会报错，原因如下：</p><p>如下代码是正常的写法：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:cinfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cinfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      cinfo<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Object<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>      info<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">21</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如果使用驼峰标识的话会不能正常显示，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:cInfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cInfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      cInfo<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Object<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>      info<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">21</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221104912.png" alt></p><p>这个是因为<code>v-bind</code>是不支持驼峰的，至少是到我写这篇博客的<code>Vue</code>正式发布版本都还没支持，如果要<code>v-bind</code>要使用驼峰的标识的话要对驼峰的部分用<code>-</code>分开，比如如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:c-info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cInfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      cInfo<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Object<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>      info<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">21</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如下代码就不会报警告和能正常显示</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221105231.png" style="zoom: 50%;"><p>如下代码也是同理：(<code>childMyMessage</code>可以拆分为<code>child-My-Message</code>)</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:c-Info</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">:child-My-Message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>message<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{cInfo}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{childMyMessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> cpn<span class="token operator">=</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      cInfo<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>Object<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      childMyMessage<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>      info<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'LY'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">21</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="子组件传递数据到父组件"><a href="#子组件传递数据到父组件" class="headerlink" title="子组件传递数据到父组件"></a>子组件传递数据到父组件</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>子组件传递父组件是需要自定义事件来去传递的</p><p>子组件向父组件传递数据一般是用在类似京东的移动端网页</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221113225.png" style="zoom:67%;"><p>出现在子组件点击手机数码的时候，要向最大的那个父组件告诉他我点击了<code>catelogy=“手机数码”</code>，然后父组件返回这个数据给子组件显示。</p><h4 id="子组件自定义数据"><a href="#子组件自定义数据" class="headerlink" title="子组件自定义数据"></a>子组件自定义数据</h4><p>如下代码所示，先子组件渲染页面，先能在自己组件中打印出值</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--父组件模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--子组件模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 1.子组件</span>  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"热门推荐"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"手机数码"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"电脑办公"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 父组件</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后要使用<code>$emit</code>发送一个事件给父组件，然后父组件就可以收到这个事件了</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--父组件模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--1. 是不可以直接使用父组件的movie的，要去通过props去间接调用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpnclick<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;cpn>&lt;/cpn> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--子组件模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 1.子组件</span>  <span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`#cpn`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"热门推荐"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"手机数码"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"电脑办公"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'itemclick'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 父组件</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      cpn    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">cpnclick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cpnclick触发'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>注：这里事件不能使用驼峰标识，只有在脚手架里面可以使用，而在这个场景中是不可以使用驼峰标识的，因为在脚手架中在<code>template</code>等所有的组件对象都渲染成一个<code>render</code>函数，是可以正常解析的，但是在<code>html</code>文件里面引用的时候解析不了</p><p>子组件向父组件传递数据的流程如下：</p><ol><li>在子组件中，通过<code>$emit</code>来触发事件</li><li>在父组件中，通过<code>v-on</code>监听子组件的事件</li></ol><h2 id="父子组件之间的互相访问"><a href="#父子组件之间的互相访问" class="headerlink" title="父子组件之间的互相访问"></a>父子组件之间的互相访问</h2><h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><h4 id="children访问子组件的方法"><a href="#children访问子组件的方法" class="headerlink" title="$children访问子组件的方法"></a>$children访问子组件的方法</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是子组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'我是子组件的name'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'showmessage'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后就可以父组件就可以通过下标来获取子组件的方法了</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221145323.png" style="zoom:67%;"><p>但是这个方式不经常用，因为如果中间插入了其他的组件的话，比如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mycpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mycpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>那么下标的值也跟着改变，所以$children的方式是不经常用的，经常用的是下面的这个方法：</p><h4 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bbb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ccc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是子组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'我是子组件的name'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token function">showmessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'showmessage'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>refs是每次都可以获取想要获取的值</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191221150705.png" style="zoom:67%;"><h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>这个子组件访问父组件用的是十分的少的，而且开发中也不建议这样去使用</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是cpn组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ccpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ccpn</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ccpn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">{</span>                        name<span class="token punctuation">:</span><span class="token string">'LY'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                components<span class="token punctuation">:</span><span class="token punctuation">{</span>                    cpn<span class="token punctuation">:</span><span class="token punctuation">{</span>                        template<span class="token punctuation">:</span><span class="token string">'#cpn'</span><span class="token punctuation">,</span>                        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span><span class="token punctuation">{</span>                                name<span class="token punctuation">:</span><span class="token string">"CCpn LY"</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// btnclick(){</span>                            <span class="token comment" spellcheck="true">//     //访问父组件 $parent</span>                            <span class="token comment" spellcheck="true">//     console.log(this.$parent)</span>                            <span class="token comment" spellcheck="true">// }</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        components<span class="token punctuation">:</span><span class="token punctuation">{</span>                            ccpn<span class="token punctuation">:</span><span class="token punctuation">{</span>                                template<span class="token punctuation">:</span><span class="token string">'#ccpn'</span><span class="token punctuation">,</span>                                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                        <span class="token comment" spellcheck="true">//访问父组件 $parent</span>                                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>                                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true">//这个甚至可以直接访问root组件，也就是Vue实例</span>                                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>子访问父组件的<code>$parents</code>的方法十分的简单，但是也用得少，因为这样的耦合度太高</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-model详解</title>
      <link href="/2019/12/20/v-model-xiang-jie/"/>
      <url>/2019/12/20/v-model-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="v-model的使用"><a href="#v-model的使用" class="headerlink" title="v-model的使用"></a>v-model的使用</h2><p>v-model一般用在input的场景上，mustache语法只能从vue渲染到页面上，而v-model实现了一个双向绑定，在修改input的值的时候也可以修改data的值</p><p>简单的使用如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 也就是双向绑定 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>                {{message}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在input修改的时候，h2的值也会改变</p><h2 id="v-model的原理"><a href="#v-model的原理" class="headerlink" title="v-model的原理"></a>v-model的原理</h2><h3 id="第一步：绑定input的value"><a href="#第一步：绑定input的value" class="headerlink" title="第一步：绑定input的value"></a>第一步：绑定input的value</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 1.v-bind:value绑定，但是这个方法不能再输入框里面修改外部也改变 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>                {{message}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>先可以通过控制台用app.message去修改值</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191220113018.png" alt></p><h3 id="第2步：监听用户的输入"><a href="#第2步：监听用户的输入" class="headerlink" title="第2步：监听用户的输入"></a>第2步：监听用户的输入</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 1.v-bind:value绑定，但是这个方法不能再输入框里面修改外部也改变 --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" :value="message" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 2.可以用input方法去绑定输入事件，然后把输入事件的值绑定到message那里就可以完成双向绑定了，            所以我们要先获取输入框的value值(即通过event事件去获取)，然后再在methods那里把新的值赋值给message即可 --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" :value="message" @input="inputmessage" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 总结：v-model原理就是使用v-bind绑定一个value属性，然后使用v-on绑定一个input事件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputmessage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            {{message}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">inputmessage</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>总体而言就是：</p><ol><li>使用v-bind绑定input里面的值value</li><li>使用v-on绑定input的事件</li></ol><h2 id="v-model结合其他类型使用"><a href="#v-model结合其他类型使用" class="headerlink" title="v-model结合其他类型使用"></a>v-model结合其他类型使用</h2><p>v-model还可用于其他场景，这里列举几个案例</p><h3 id="v-model结合radio使用"><a href="#v-model结合radio使用" class="headerlink" title="v-model结合radio使用"></a>v-model结合radio使用</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>男            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{sex}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    sex<span class="token punctuation">:</span><span class="token string">'还没选择性别'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="v-model结合checkbox使用"><a href="#v-model结合checkbox使用" class="headerlink" title="v-model结合checkbox使用"></a>v-model结合checkbox使用</h3><p>CheckBox分为单选框和多选框</p><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 单选框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agree<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAgree<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>同意协议            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你选择的是{{isAgree}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!isAgree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    isAgree<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 多选框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>唱<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>唱            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>跳            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rap<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>rap            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>music            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你的爱好是{{hobbies}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    hobbies<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="选择框的使用"><a href="#选择框的使用" class="headerlink" title="选择框的使用"></a>选择框的使用</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 单选 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>榴莲<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fruit}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 多选 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fruits<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>榴莲<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fruits}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                    fruit<span class="token punctuation">:</span><span class="token string">'香蕉'</span><span class="token punctuation">,</span>                    fruits<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h2><h4 id="懒加载（v-model-lazy）"><a href="#懒加载（v-model-lazy）" class="headerlink" title="懒加载（v-model.lazy）"></a>懒加载（v-model.lazy）</h4><p>懒加载也就是敲了回车的时候值才会被绑定</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 不是实时绑定了，在敲回车的时候才去绑定message的值，lazy修饰符只会在失去焦点和回车的时候才会去绑定 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            {{message}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="v-model-number"><a href="#v-model-number" class="headerlink" title="v-model.number"></a>v-model.number</h4><p>input输入框输入的值，默认都是string类型，v-model-number可以把string类型转换为number类型</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 输入框默认输入的就是String类型 --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;input type="number" v-model="age" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 所以要修改成为number类型才可以 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{age}}-{{typeof age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="v-model-trim修饰符"><a href="#v-model-trim修饰符" class="headerlink" title="v-model trim修饰符"></a>v-model trim修饰符</h4><p>trim去除两边的空格</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 也就是双向绑定 --></span><span class="token comment" spellcheck="true">&lt;!--            &lt;input type="text" v-model="name" />--></span>            <span class="token comment" spellcheck="true">&lt;!-- 默认是不开启去除两边空格的，无论在输入框的左边还是右边输入空格都会显示在console.log --></span>            <span class="token comment" spellcheck="true">&lt;!-- 使用trim修饰符就可以免去空格了 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            {{name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue数组中的响应式</title>
      <link href="/2019/12/19/shu-zu-zhong-de-xiang-ying-shi/"/>
      <url>/2019/12/19/shu-zu-zhong-de-xiang-ying-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="有响应式的方法"><a href="#有响应式的方法" class="headerlink" title="有响应式的方法"></a>有响应式的方法</h2><p>Vue里面并不是所有修改值都有一个响应式</p><p>这里先介绍有响应式的方法：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                按钮            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                按钮            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'异度空间'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="pop方法-删除数组中的最后一个元素"><a href="#pop方法-删除数组中的最后一个元素" class="headerlink" title="pop方法(删除数组中的最后一个元素)"></a>pop方法(删除数组中的最后一个元素)</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色';</span>        <span class="token comment" spellcheck="true">//pop有响应式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>pop方法也是有响应式的</p><h3 id="shift方法-删除数组中的第一个元素"><a href="#shift方法-删除数组中的第一个元素" class="headerlink" title="shift方法(删除数组中的第一个元素)"></a>shift方法(删除数组中的第一个元素)</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色';</span>        <span class="token comment" spellcheck="true">//pop有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.pop()</span>        <span class="token comment" spellcheck="true">//shift有响应式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="unshift方法-在数组第一个元素添加数据"><a href="#unshift方法-在数组第一个元素添加数据" class="headerlink" title="unshift方法(在数组第一个元素添加数据)"></a>unshift方法(在数组第一个元素添加数据)</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色';</span>        <span class="token comment" spellcheck="true">//pop有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.pop()</span>        <span class="token comment" spellcheck="true">//shift有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.shift()</span>        <span class="token comment" spellcheck="true">//unshift有响应式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'枪王'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="spilt方法"><a href="#spilt方法" class="headerlink" title="spilt方法"></a>spilt方法</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色';</span>        <span class="token comment" spellcheck="true">//pop有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.pop()</span>        <span class="token comment" spellcheck="true">//shift有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.shift()</span>        <span class="token comment" spellcheck="true">//unshift有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.unshift('枪王')</span>        <span class="token comment" spellcheck="true">//spilt有响应式</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'家有喜事'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>spilt方法也肯定是有响应式的，具体方法可以看源码</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219234049.png" alt></p><p>…items就是可以接受多个参数的意思，类似于python中的不定长参数</p><h3 id="sort和reverse方法都是响应式的"><a href="#sort和reverse方法都是响应式的" class="headerlink" title="sort和reverse方法都是响应式的"></a>sort和reverse方法都是响应式的</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色';</span>        <span class="token comment" spellcheck="true">//pop有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.pop()</span>        <span class="token comment" spellcheck="true">//shift有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.shift()</span>        <span class="token comment" spellcheck="true">//unshift有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.unshift('枪王')</span>        <span class="token comment" spellcheck="true">//spilt有响应式</span>        <span class="token comment" spellcheck="true">// this.movie.splice(1,0,'家有喜事')</span>        <span class="token comment" spellcheck="true">//sort和reverse方法</span>        <span class="token comment" spellcheck="true">// this.movie.sort()</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="如果要用到修改索引的方式去修改值，只能使用spilt或者是Vue的方法来改变"><a href="#如果要用到修改索引的方式去修改值，只能使用spilt或者是Vue的方法来改变" class="headerlink" title="如果要用到修改索引的方式去修改值，只能使用spilt或者是Vue的方法来改变"></a>如果要用到修改索引的方式去修改值，只能使用spilt或者是Vue的方法来改变</h3><h3 id="Vue的方式"><a href="#Vue的方式" class="headerlink" title="Vue的方式"></a>Vue的方式</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                按钮            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>                        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>                        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>                        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>                        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色'</span>                        <span class="token comment" spellcheck="true">//pop有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.pop()</span>                        <span class="token comment" spellcheck="true">//shift有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.shift()</span>                        <span class="token comment" spellcheck="true">//unshift有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.unshift('枪王')</span>                        <span class="token comment" spellcheck="true">//sort和reverse都是响应式的</span>                        <span class="token comment" spellcheck="true">// Vue的方式改变</span>                        Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'英雄本色'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="spilt的方式"><a href="#spilt的方式" class="headerlink" title="spilt的方式"></a>spilt的方式</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                按钮            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>                        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>                        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>                        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>                        <span class="token comment" spellcheck="true">// this.movie[0]='英雄本色'</span>                        <span class="token comment" spellcheck="true">//pop有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.pop()</span>                        <span class="token comment" spellcheck="true">//shift有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.shift()</span>                        <span class="token comment" spellcheck="true">//unshift有响应式</span>                        <span class="token comment" spellcheck="true">// this.movie.unshift('枪王')</span>                        <span class="token comment" spellcheck="true">//sort和reverse都是响应式的</span>                        <span class="token comment" spellcheck="true">// Vue的方式改变</span>                        <span class="token comment" spellcheck="true">// Vue.set(this.movie,0,'英雄本色')</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>movile<span class="token punctuation">.</span><span class="token function">spilt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'枪王'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="没有响应式的方法"><a href="#没有响应式的方法" class="headerlink" title="没有响应式的方法"></a>没有响应式的方法</h2><h3 id="通过索引修改数组元素"><a href="#通过索引修改数组元素" class="headerlink" title="通过索引修改数组元素"></a>通过索引修改数组元素</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                按钮            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token function">btnclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 1.push方法:是有响应式的</span>                        <span class="token comment" spellcheck="true">// this.movie.push('异度空间')</span>                        <span class="token comment" spellcheck="true">// 2.通过索引修改数组的元素</span>                        <span class="token comment" spellcheck="true">// 使用app.movie查看发现没有响应,所以直接修改索引是没有发生响应的</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>movie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'英雄本色'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这个方法修改的话是没有响应式的,因为Vue的内部没有这个方法</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-for里面的:key作用</title>
      <link href="/2019/12/19/v-for-de-key/"/>
      <url>/2019/12/19/v-for-de-key/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="性能优化问题"><a href="#性能优化问题" class="headerlink" title="性能优化问题"></a>性能优化问题</h2><p>v-for里面有个key属性，这里拿个案例来说明</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- app.movie.splice(2,0,'异度空间')  --></span>            <span class="token comment" spellcheck="true">&lt;!-- 默认的插入算法是如果要在第二个插入新的值，就把新的值的ID改成2，第三个原来的ID改为原来的第二个值，依次替换下去，效率极低 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 使用diff算法效率才是最高的，也就是在第二个插入的数据他的ID是7，时间复杂度就是O(1) --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- key里面数据一定要保证唯一性，要与值一一对应 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>splice(2,0,’异度空间’)的意思就是从下标为2后面插入异度空间</p><p>Vue渲染页面是通过一个虚拟DOM间接去去渲染页面的，大概的结构图如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219220248.png" alt></p><p><strong>中间的就是虚拟DOM，如果要从下标2开始直接插入的话，那么从第二个开始的下标就会发生改变，新插入的值变成下标3，剩下的下标依次往下重新排序，这样的时间复杂度极大。</strong></p><p>最理想的排序应该是新插入的值以新的下标去排序，如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219220526.png" alt></p><p>这样时间复杂度就为1，这个可以通过<code>diff</code>算法来实现这个目的，在代码中实现也就是要在每个for循环里面添加一个<code>:key</code>，这个值要为遍历循环的值，比如代码所示：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- app.movie.splice(2,0,'异度空间')  --></span>            <span class="token comment" spellcheck="true">&lt;!-- 默认的插入算法是如果要在第二个插入新的值，就把新的值的ID改成2，第三个原来的ID改为原来的第二个值，依次替换下去，效率极低 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 使用diff算法效率才是最高的，也就是在第二个插入的数据他的ID是7，时间复杂度就是O(1) --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- key里面数据一定要保证唯一性，要与值一一对应 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in movie<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    {{item}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    movie<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'霸王别姬'</span><span class="token punctuation">,</span> <span class="token string">'阿飞正传'</span><span class="token punctuation">,</span> <span class="token string">'胭脂扣'</span><span class="token punctuation">,</span> <span class="token string">'英雄本色'</span><span class="token punctuation">,</span> <span class="token string">'新上海滩'</span><span class="token punctuation">,</span> <span class="token string">'东邪西毒'</span><span class="token punctuation">,</span> <span class="token string">'倩女幽魂'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    cindex<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>:key</code>里面的值要跟双括号里面的值一样，因为遍历的是item，所以<code>:key</code>的值也应该为item。这样就可以使用<code>diff</code>算法来优化代码了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要使用computed</title>
      <link href="/2019/12/19/computed/"/>
      <url>/2019/12/19/computed/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="计算属性的基本使用"><a href="#计算属性的基本使用" class="headerlink" title="计算属性的基本使用"></a>计算属性的基本使用</h2><p>计算属性在我们要拼接属性的时候可以用到，比如要拼接两个姓氏和名字</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            {{fullName}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'ly'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">21</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                    fullName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 空格 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>虽然说methods方法也可以，但是如果用methods方法的话要在里面加个括号，比如</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            {{getfullname()}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'ly'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">21</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    getfullname<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 空格 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>但是这样就要使用到括号，我们想要一个属性结果但是显示的是一个函数这样就会显得…（emmm强行解释一波）</p><p>此外计算属性computed还可以用在计算类的情景上面</p><h2 id="计算属性的复杂应用"><a href="#计算属性的复杂应用" class="headerlink" title="计算属性的复杂应用"></a>计算属性的复杂应用</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{totalprice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    books<span class="token punctuation">:</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'book1'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'book2'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'book3'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'book4'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                    totalprice<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token number">0</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> res                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如代码所示，通常用在这个方面的情景上，因为计算属性是有缓存的，计算一次之后vue就会把它缓存，第二次使用就可以调用缓存来使用了，这个在下面有说</p><h2 id="计算属性computed的本质"><a href="#计算属性computed的本质" class="headerlink" title="计算属性computed的本质"></a>计算属性computed的本质</h2><p>computed的一般使用方法是</p><pre><code>fullname(){}</code></pre><p>这个其实只是计算属性的简写</p><p>他的本质是有一个set和一个get方法</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219150354.png" alt></p><p>因为一般只用到一个get方法，所以就简写成</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219150450.png" alt></p><p>如果一定要使用set方法也可以的，比如在控制台或者其他需要修改计算属性的时候就可以调用到set方法</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    {{fullname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            firname<span class="token punctuation">:</span><span class="token string">'lly'</span><span class="token punctuation">,</span>            lastname<span class="token punctuation">:</span><span class="token string">'yyl'</span><span class="token punctuation">,</span>            message<span class="token punctuation">:</span><span class="token string">'hello'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1. 就是因为一般是没有set方法的,所以默认是只读操作get的,等同于如下代码</span>            <span class="token comment" spellcheck="true">// fullname:function(){</span>            <span class="token comment" spellcheck="true">//     return this.firname+' '+ this.lastname</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//2.计算属性共有两个方法</span>            <span class="token comment" spellcheck="true">// fullname:{</span>            <span class="token comment" spellcheck="true">//     set(){</span>            <span class="token comment" spellcheck="true">//         //而默认只要实现get方法就好了，set方法是不需要实现的，也不想别人有一个set方法</span>            <span class="token comment" spellcheck="true">//     },</span>            <span class="token comment" spellcheck="true">//     get(){</span>            <span class="token comment" spellcheck="true">//         //默认使用的就是get方法，所以浏览器显示的是abc</span>            <span class="token comment" spellcheck="true">//         return this.firname+' '+ this.lastname</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//3.而不要set方法也不会被报错</span>            <span class="token comment" spellcheck="true">// fullname:{</span>            <span class="token comment" spellcheck="true">//     get(){</span>            <span class="token comment" spellcheck="true">//         //默认使用的就是get方法，所以浏览器显示的是abc</span>            <span class="token comment" spellcheck="true">//         return this.firname+' '+ this.lastname</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//4.所以最终版是可以这样的，fullname:function就是get方法</span>            <span class="token comment" spellcheck="true">// fullname:function(){</span>            <span class="token comment" spellcheck="true">//     return this.firname+' '+ this.lastname</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//5.如果实在是要使用set方法的话，也是可以实现的</span>            <span class="token comment" spellcheck="true">//然后在浏览器的控制台实现app.fullname = 'abc'</span>            <span class="token comment" spellcheck="true">//就可以打印---set方法实现--，但是这个一般要用的话都是要加入一个变量来保存变量来改变值的，如第六点所示</span>            <span class="token comment" spellcheck="true">// fullname:{</span>            <span class="token comment" spellcheck="true">//     set(){</span>            <span class="token comment" spellcheck="true">//         console.log('---set方法实现--')</span>            <span class="token comment" spellcheck="true">//     },</span>            <span class="token comment" spellcheck="true">//     get(){</span>            <span class="token comment" spellcheck="true">//         //默认使用的就是get方法，所以浏览器显示的是abc</span>            <span class="token comment" spellcheck="true">//         return this.firname+' '+ this.lastname</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//6.使用新的值去代替原来的值</span>            fullname<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">const</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>firname <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//默认使用的就是get方法，所以浏览器显示的是abc</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firname<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这里我直接用控制台去修改变量</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219151013.png" alt></p><p>控制台调用app.fullname(我的计算属性名字就可以调用到set方法</p><h2 id="计算属性computed的缓存"><a href="#计算属性computed的缓存" class="headerlink" title="计算属性computed的缓存"></a>计算属性computed的缓存</h2><p>虽然很多地方methods方法也可以同样实现，但是我们一般使用的都是computed方法，因为computed方法有缓存，如果要计算的值是一样的话vue会添加到缓存里面，第二次调用就会直接去调用缓存，而不用去第二次计算</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&amp;lt;!&amp;ndash;            方法1：直接拼接字符串(语法过于繁琐)&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;h2>{{firname}} {{lastname}}&lt;/h2>--></span><span class="token comment" spellcheck="true">&lt;!--&amp;lt;!&amp;ndash;            方法2：使用methods方法调用(于情不通，要显示的是属性，但是这个是方法,而且是每次调用都要初始化)&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;h2>{{getfullname()}}&lt;/h2>--></span><span class="token comment" spellcheck="true">&lt;!--&amp;lt;!&amp;ndash;            方法3:使用computed方法调用&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--            &lt;h2>{{fullname}}&lt;/h2>--></span>            <span class="token comment" spellcheck="true">&lt;!-- 计算方法只被调用一次，剩下的都是靠缓存区编写 --></span>            {{getfullname()}}            {{getfullname()}}            {{getfullname()}}            {{fullname}}            {{fullname}}            {{fullname}}<span class="token comment" spellcheck="true">&lt;!--            方法每次都要调用，但是计算属性只调用一次--></span><span class="token comment" spellcheck="true">&lt;!--            所以理所当然计算属性的性能更高，这里虽然看不出来，但是如果是methods方法有很多for方法，那么如果每次都要调用一次的话性能就很低了--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                    firname<span class="token punctuation">:</span><span class="token string">'lly'</span><span class="token punctuation">,</span>                    lastname<span class="token punctuation">:</span><span class="token string">'yyl'</span><span class="token punctuation">,</span>                    message<span class="token punctuation">:</span><span class="token string">'hello'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                    getfullname<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方法属性调用'</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firname<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                computed<span class="token punctuation">:</span><span class="token punctuation">{</span>                    fullname<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'计算方法调用'</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firname<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如上面代码所示，控制台的打印出来的结果是</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191219152147.png" alt></p><p>只要fullname的firname和lastname两个属性的值不变，那么就只调用一次</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>runtime-compiler和runtime-only区别</title>
      <link href="/2019/11/12/runtime-only-and-runtime-compiler/"/>
      <url>/2019/11/12/runtime-only-and-runtime-compiler/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用Vue cli2创建项目的时候，会出现选择runtime-compiler和runtime-only的选项，这里我介绍这两者的区别</p></blockquote><blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="runtime-compiler和runtime-only的区别"><a href="#runtime-compiler和runtime-only的区别" class="headerlink" title="runtime-compiler和runtime-only的区别"></a>runtime-compiler和runtime-only的区别</h2><p>两者的区别主要是在<code>main.js</code>里面</p><p><strong>runtime-compiler</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>runtime-only</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//箭头函数的本质</span>    <span class="token comment" spellcheck="true">// render:function(createElement){</span>    <span class="token comment" spellcheck="true">//   return createElement(App)</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//使用ES6语法的本质</span>    <span class="token comment" spellcheck="true">//render:h=>{</span>    <span class="token comment" spellcheck="true">//    return h(App)</span>    <span class="token comment" spellcheck="true">//      }</span><span class="token punctuation">)</span></code></pre><p>一个是使用了render箭头函数，一个是使用正常的组件注册写法</p><p>他们两个的使用的性能也是不同的</p><h2 id="两者性能区别"><a href="#两者性能区别" class="headerlink" title="两者性能区别"></a>两者性能区别</h2><p>在<strong>runtime-compiler</strong>里面运行流程如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112101329.png" alt></p><p>在template传递给Vue的时候，先在vm.options.template里面做一个保存，然后parse(解析)成一个ast（abstract syntax tree抽象语法数），然后再compile（编译）成一个render函数，最后再翻译成一个virtual dom（虚拟dom），最后再把虚拟dom树渲染成为一个真正的界面</p><p>整体来说，<strong>runtime-compiler</strong>的流程就是：<strong>template -&gt; ast -&gt; render -&gt;vdom -&gt;UI</strong></p><p>而在runtime-only中，他的流程只是render-&gt;vdom</p><p>所以runtime-only使用更少的代码去实现同样的功能，所以runtime-only性能更高</p><h2 id="runtime-only代码解析"><a href="#runtime-only代码解析" class="headerlink" title="runtime-only代码解析"></a>runtime-only代码解析</h2><p>在<strong>runtime-compiler</strong>中，使用的是正常的组件化注册</p><p>而在上面我所说的，<strong>runtime-only</strong>没有经历过template这个流程，也就是说template没有用，其原理如下：</p><p>render函数内部实现的原理是这样的</p><pre class=" language-js"><code class="language-js">  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//可以写成下面的写法</span>  <span class="token comment" spellcheck="true">//render函数内部实现原理</span>  render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">,</span><span class="token punctuation">{</span>标签的属性<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'标签的内容，比如&lt;h2>hello world&lt;/h2>里面的hello world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'标签'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>我们可以随便使用<strong>runtime-only</strong>的main.js修改一下</p><h3 id="方法1（使用createElement注册组件）"><a href="#方法1（使用createElement注册组件）" class="headerlink" title="方法1（使用createElement注册组件）:"></a>方法1（使用createElement注册组件）:</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render: h => h(App)</span>  <span class="token comment" spellcheck="true">//render->vdom</span>  <span class="token comment" spellcheck="true">//所以这个性能更高</span>  <span class="token comment" spellcheck="true">// 方法1</span>   render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span><span class="token string">'box'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'hello world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112110149.png" style="zoom:50%;"><h3 id="方法2（在里面再添加一个createElement注册组件）："><a href="#方法2（在里面再添加一个createElement注册组件）：" class="headerlink" title="方法2（在里面再添加一个createElement注册组件）："></a>方法2（在里面再添加一个createElement注册组件）：</h3><p>下面是在里面再去注册一个button组件</p><pre class=" language-js"><code class="language-js">  render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'box'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'按钮'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112110204.png" style="zoom:50%;"><p>方法2就是在里面再嵌套一层createElement函数</p><h3 id="方法3（使用组件化注册）："><a href="#方法3（使用组件化注册）：" class="headerlink" title="方法3（使用组件化注册）："></a>方法3（使用组件化注册）：</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">const</span> cpn <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>{{message}}&lt;/div>`</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'我是组件message'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render: h => h(App)</span>  <span class="token comment" spellcheck="true">//render->vdom</span>  <span class="token comment" spellcheck="true">//所以这个性能更高</span>    <span class="token comment" spellcheck="true">// 方法3：使用组件去传入值</span>    render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>cpn<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这个代码运行要在webpack.base.conf里面修改配置</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112110219.png" style="zoom:50%;"><h4 id="方法4（使用App的组件去注册）："><a href="#方法4（使用App的组件去注册）：" class="headerlink" title="方法4（使用App的组件去注册）："></a>方法4（使用App的组件去注册）：</h4><p>这个是使用创建项目自带App.vue的hello world的界面，直接导入这个界面的模板</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token comment" spellcheck="true">// const cpn = {</span><span class="token comment" spellcheck="true">//   template: `&lt;div>{{message}}&lt;/div>`,</span><span class="token comment" spellcheck="true">//   data() {</span><span class="token comment" spellcheck="true">//     return {</span><span class="token comment" spellcheck="true">//       message: '我是组件message'</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render: h => h(App)</span>  <span class="token comment" spellcheck="true">//render->vdom</span>  <span class="token comment" spellcheck="true">//所以这个性能更高</span>    render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>运行得出的结果是</p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112110240.png" style="zoom:50%;"><p>而runtime-only的流程只有：render-&gt;vdom，花更少的代码去运行同样的结果，所以runtime-only的性能会更高</p><p>runtime-only省去了template和ast这两部分，因为到render的时候，template组件什么的都已经渲染成为render函数了，使用代码测试一下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token comment" spellcheck="true">// const cpn = {</span><span class="token comment" spellcheck="true">//   template: `&lt;div>{{message}}&lt;/div>`,</span><span class="token comment" spellcheck="true">//   data() {</span><span class="token comment" spellcheck="true">//     return {</span><span class="token comment" spellcheck="true">//       message: '我是组件message'</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render: h => h(App)</span>  <span class="token comment" spellcheck="true">//render->vdom</span>  <span class="token comment" spellcheck="true">//所以这个性能更高</span>    render<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191112110300.png" alt></p><p>在控制台打印出来的已经没有template这个函数了，这部分解析的是由vue-template-compiler帮我们解析好了</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高阶函数</title>
      <link href="/2019/11/05/js-de-gao-jie-han-shu/"/>
      <url>/2019/11/05/js-de-gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果我们要实现如下三个需求的话，我们可能写出的代码如下：</p><p><strong>需求1.去除所有小于100的数字</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 1.需求去除所有小于100的数字</span>            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> number<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    number<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>需求2.将所有n&lt;100的数乘2</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 1.需求去除所有小于100的数字</span>            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> number<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    number<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2.将所有n&lt;100的数*2</span>            <span class="token keyword">let</span> numbers2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>                numbers2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>需求3.将所有的numbers的数字相加,得到最终的而结果</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 1.需求去除所有小于100的数字</span>            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> number<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    number<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2.将所有n&lt;100的数*2</span>            <span class="token keyword">let</span> numbers2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>                numbers2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//3.将所有的numbers的数字相加,得到最终的而结果</span>            <span class="token keyword">let</span> totalnum<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> numbers2<span class="token punctuation">)</span><span class="token punctuation">{</span>                totalnum<span class="token operator">+</span><span class="token operator">=</span>n            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totalnum<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上面三个写法简直就是应付外行boss的最佳选择</p><p>测试：没Bug呀</p><p>产品：功能实现了啊</p><p>考核：代码提交足行</p><p>队友：太简洁易读了</p><p>但是我们还是不能这样写，因为要写的代码太多了，如果不想被批还是得写精一点<del>~</del>所以我们对于上述情况有如下三个高阶函数的写法。这个其实跟python的很像，python也有这三个高阶函数并且还多了一个sorted函数，所以说语言其实都是互通的</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>对于上面的<strong>第一个需求：去除所有小于100的数字</strong>，我们可以使用如下的写法</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//filter函数是每一次传入的数字都会经历一次回调</span>            <span class="token comment" spellcheck="true">//filter中的回调函数有一个要求:每一次都必须返回一个boolean值,即true和false</span>            <span class="token comment" spellcheck="true">//true:当是true的时候,函数会把这次回调的n值返回到一个新的数组中</span>            <span class="token comment" spellcheck="true">//false:当是false的时候,函数会过滤掉这次的n</span>            <span class="token keyword">let</span> numbers<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用如下写法就可以使得n&lt;100的为true,然后加入新的数组</span>                <span class="token keyword">return</span> n <span class="token operator">&lt;</span><span class="token number">100</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>代码更为简洁</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>对于上面的<strong>第二个需求：将所有n&lt;100的数乘2</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//filter函数是每一次传入的数字都会经历一次回调</span>            <span class="token comment" spellcheck="true">//filter中的回调函数有一个要求:每一次都必须返回一个boolean值,即true和false</span>            <span class="token comment" spellcheck="true">//true:当是true的时候,函数会把这次回调的n值返回到一个新的数组中</span>            <span class="token comment" spellcheck="true">//false:当是false的时候,函数会过滤掉这次的n</span>            <span class="token keyword">let</span> numbers<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用如下写法就可以使得n&lt;100的为true,然后加入新的数组</span>                <span class="token keyword">return</span> n <span class="token operator">&lt;</span><span class="token number">100</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//map函数的使用</span>            <span class="token comment" spellcheck="true">//对于上面filter得到的结果 10 20 40 50 ,把每一次得到的结果都乘2</span>            <span class="token keyword">let</span> numbers<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token number">2</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce函数比前两个较为复杂</p><p>这个reduce可以有多种写法，在JS中如果写两个函数的话后面的函数会覆盖前面的函数，而可以写很多种写法是因为他用的是TypeScript</p><p>使用reduce来重写<strong>第三个需求：将所有的numbers的数字相加,得到最终的而结果</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//filter函数是每一次传入的数字都会经历一次回调</span>            <span class="token comment" spellcheck="true">//filter中的回调函数有一个要求:每一次都必须返回一个boolean值,即true和false</span>            <span class="token comment" spellcheck="true">//true:当是true的时候,函数会把这次回调的n值返回到一个新的数组中</span>            <span class="token comment" spellcheck="true">//false:当是false的时候,函数会过滤掉这次的n</span>            <span class="token keyword">let</span> numbers<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用如下写法就可以使得n&lt;100的为true,然后加入新的数组</span>                <span class="token keyword">return</span> n <span class="token operator">&lt;</span><span class="token number">100</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//map函数的使用</span>            <span class="token comment" spellcheck="true">//对于上面filter得到的结果 10 20 40 50 ,把每一次得到的结果都乘2</span>            <span class="token keyword">let</span> numbers2<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token number">2</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//reduce函数的使用</span>            <span class="token comment" spellcheck="true">//reduce函数的作用就是对数组中所有的函数进行汇总</span>            <span class="token comment" spellcheck="true">//上一次返回的值是20,40,80,100</span>            <span class="token comment" spellcheck="true">//末尾的0是初始值</span>            <span class="token keyword">var</span> total<span class="token operator">=</span>numbers2<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prevalue<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> prevalue<span class="token operator">+</span>n            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 第一次返回的值是 prevalue 0 + 20</span>            <span class="token comment" spellcheck="true">// 第二次返回的值是 pervalue 20 +40</span>            <span class="token comment" spellcheck="true">// 第三次返回的值是 pervalue 60 +80</span>            <span class="token comment" spellcheck="true">// 第四次返回的值是 prevalue 140+100</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="总和代码"><a href="#总和代码" class="headerlink" title="总和代码"></a>总和代码</h2><p>上面三个代码看起来都不怎么高逼格，但是合在一起写就很能装逼了</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">const</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> total <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">&lt;</span><span class="token number">100</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token number">2</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prevalue<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> prevalue<span class="token operator">+</span>n            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//或者这样</span>            <span class="token comment" spellcheck="true">//let total = nums.filter(n=> n&lt;100).map(n=>n*2).reduce((pre,n)=>pre+n);</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>const语法</title>
      <link href="/2019/11/04/const-yu-fa/"/>
      <url>/2019/11/04/const-yu-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="const定义常量"><a href="#const定义常量" class="headerlink" title="const定义常量"></a>const定义常量</h2><p>const在C和C++等语言都有定义，意为定义常量，在ES6语法中也是如此</p><p>const定义的常量之后就不可在被更改，而且在定义的时候必须定义它的值，不然会报错</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">const</span> demo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught SyntaxError: Missing initializer in const declaration</span></code></pre><p>const只是定义指向的对象不可再被更改，但是他内部的属性还是可以改变的</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"LY"</span><span class="token punctuation">,</span>        age <span class="token punctuation">:</span> <span class="token number">21</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h2 id="const的属性增强写法"><a href="#const的属性增强写法" class="headerlink" title="const的属性增强写法"></a>const的属性增强写法</h2><h3 id="属性增强写法"><a href="#属性增强写法" class="headerlink" title="属性增强写法"></a>属性增强写法</h3><p>以下拿ES5的语法来比较</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">"LY"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> height<span class="token operator">=</span><span class="token number">175</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>        height<span class="token punctuation">:</span>height    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p>ES6语法：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">"LY"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> height<span class="token operator">=</span><span class="token number">175</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>        name<span class="token punctuation">,</span>        age<span class="token punctuation">,</span>        height    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="函数增强写法"><a href="#函数增强写法" class="headerlink" title="函数增强写法"></a>函数增强写法</h3><p>ES5</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>        run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我在跑'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><p>ES6</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我在跑'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>let和var的对比</title>
      <link href="/2019/11/04/let-he-var/"/>
      <url>/2019/11/04/let-he-var/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下皆是由<a href="https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853" target="_blank" rel="noopener">https://www.bilibili.com/video/av59594689?from=search&amp;seid=2169751232721048853</a></p><p>视频中的老师操作代码和讲义总结而成</p></blockquote><h2 id="var的缺陷"><a href="#var的缺陷" class="headerlink" title="var的缺陷"></a>var的缺陷</h2><p>JS的创始人也说过var定义变量的有很多的缺陷，var本身是没有作用域的，下面拿个案例来说明</p><h3 id="var在-中的块级作用域"><a href="#var在-中的块级作用域" class="headerlink" title="var在{}中的块级作用域"></a>var在{}中的块级作用域</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// {}中的作用域</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'LY'</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在{}内部定义的变量，在外部也能使用</p><h3 id="var在if中的作用域"><a href="#var在if中的作用域" class="headerlink" title="var在if中的作用域"></a>var在if中的作用域</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">var</span> func<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'why'</span><span class="token punctuation">;</span>                func<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//变量是可以随时改变的,十分的不安全</span>                name <span class="token operator">=</span> <span class="token string">'LY'</span>                <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>var在if内部定义的变量在外部也能声明</p><h3 id="var在for里面的作用域"><a href="#var在for里面的作用域" class="headerlink" title="var在for里面的作用域"></a>var在for里面的作用域</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//以下代码无论点击什么按钮都会显示"第五个按钮被点击"</span>            <span class="token keyword">var</span> btns<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="ES5中对于for循环作用域的解决办法：闭包"><a href="#ES5中对于for循环作用域的解决办法：闭包" class="headerlink" title="ES5中对于for循环作用域的解决办法：闭包"></a>ES5中对于for循环作用域的解决办法：闭包</h3><p>对于for循环没有作用域的问题我们可以通过闭包的办法来解决</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">var</span> btns<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>其原理如下：</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//i=0;</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用var的话每次定义都是在内部定义的，在for循环5次之后传下来的值是i=5，所以每次点击按钮都是5，因为var没有作用域，其实在内部和外部定义都没区别，每次循环i的值都会被改变</span>        <span class="token comment" spellcheck="true">//console.log（）里面想使用i的时候都会用到for循环改变后的i</span>        <span class="token comment" spellcheck="true">//i=0;</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用闭包的情况下</span>    <span class="token comment" spellcheck="true">//这个情况就简单了，因为function有自己的作用域 ，每次使用的时候只用属于自己的i，外部for循环的i怎么改变都不会改变到内部的i变量了</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>var定义变量其实是在{}内部定义的    </p><p>但是闭包写出来真的对整体代码而言很别扭……</p><h2 id="使用let来定义"><a href="#使用let来定义" class="headerlink" title="使用let来定义"></a>使用let来定义</h2><p>使用let来定义的话就不会出现上面的问题，因为let有块级作用域</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> btns<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>ES5里面要定义函数来定义作用域，而ES6里面let可以定义自己的块级作用域</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本概念（翻译）</title>
      <link href="/2019/11/01/docker-gai-nian/"/>
      <url>/2019/11/01/docker-gai-nian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考博客：</p><p><a href="https://docker_practice.gitee.io/zh-cn/" target="_blank" rel="noopener">文档地址</a> </p><p><a href="https://juejin.im/post/5b260ec26fb9a00e8e4b031a" target="_blank" rel="noopener">大神博客</a> </p><p><a href="https://www.cnblogs.com/JulyShine/p/10415758.html" target="_blank" rel="noopener">通俗的讲解Docker</a> </p><p> <a href="https://www.cnblogs.com/misswangxing/p/10669444.html" target="_blank" rel="noopener">很通俗的解释</a> </p><p><a href="https://blog.csdn.net/qq_29301417/article/details/75640893" target="_blank" rel="noopener">https://blog.csdn.net/qq_29301417/article/details/75640893</a> </p><p><a href="https://blog.csdn.net/mythinker2/article/details/87701222" target="_blank" rel="noopener">https://blog.csdn.net/mythinker2/article/details/87701222</a> </p><p><a href="https://blog.csdn.net/qq_36330643/article/details/77160101" target="_blank" rel="noopener">https://blog.csdn.net/qq_36330643/article/details/77160101</a> </p><p><a href="https://www.cnblogs.com/yangmingxianshen/p/10129262.html" target="_blank" rel="noopener">https://www.cnblogs.com/yangmingxianshen/p/10129262.html</a> </p><p><a href="https://www.jianshu.com/p/7fd1a9655213" target="_blank" rel="noopener">https://www.jianshu.com/p/7fd1a9655213</a> </p></blockquote><h2 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h2><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Docker镜像就像是虚拟机里面的镜像，是一个<strong>只读</strong>的模板，我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变 </p><h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为 镜像包含了操作系统完整的 <code>root</code> 文件系统，其体积还是很巨大的，所以引入了 <code>Unios FS</code> 技术，将其设计为分层存储的架构。所以镜像不是那种 <code>ISO</code> 打包文件，镜像是一个虚拟的概念，它是由一组文件系统构成，或者说多层文件系统联合构成。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;镜像在构建时，是一层层构建，上一层是下一层的基础，每一层构建结束就不会在被修改，后一层任何修改只会作用在当前层。例如删除上一层文件，不会真的删除该文件，而是会标记删除然后隐藏起来，最终运行容器的时候不会被看见，但是会一直跟随镜像。因此构建镜像时需要小心，不要添加不需要的东西，任何额外的东西都要在本层构建完之前清除。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分层存储使镜像的定制和复用变得容易，可以用之前做好的镜像作为基础层，然后添加新的层，定制自己所需要的东西，构建新的镜像。</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>创建镜像有两种方法：</p><p>（1） 基于已有镜像的容器创建。主要是利用docker commit命令。</p><p>（2） 基于dockerfile创建。</p><p>首先按照dockerfile的格式，编写好dockerfile文件，之后通过docker build命令来创建镜像。docker build会读取制定的dockerfile，由docker服务器来创建镜像</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="　概念"></a>　概念</h3><p>镜像（Image）和容器（Conatiner）的关系就像是面向对象的类和实例一样，镜像是静态的定义，容器是镜像运行的实体，容器可以被创建，启动，停止，删除，暂停等。容器的实质是进程，但是又和宿主的进程不同，容器有自己的独立命名空间，因此容器拥有自己 root 文件系统，自己的网络配置，自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。所以好多初学者都会把容器和虚拟机搞混。容器同样和镜像一样使用分层存储，以镜像为基础层，在上面创建了一个容器存储层，是为了容器运行时读写准备的。注意，在容器被删除后，容器存储层保存的任何信息都不会保存，它和容器的生命周期一样，所以任何需要保存的数据 Docker 建议保存在数据卷（Volumes）或者宿主机目录中，这样数据不会随着容器的消失而消失。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说：</p><p> 可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。 </p><p> 镜像自身是自读的，容器从镜像启动的时候，docker会在镜像的最上层创建一个可写文件层，镜像本身保持不变 </p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>　　镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p><p>一个 Docker Registry 可以有多个 仓库（Repository），每个仓库可以含多个标签（Tag），每个标签都是一个镜像。</p><p>　　最初我没有搞懂 Docker Registry 和 仓库（Repository），简单来说就是 Docker Registry 是注册服务器，用于管理镜像仓库，起到服务器的作用，仓库（Repository）就是存储镜像，起到存储镜像的作用。默认的 Docker Registry 就是 Docker Hub，通过配置也可以选择华为云、阿里云、腾讯云等服务商，他们都拥有很多高质量的镜像。</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191102165834.png" alt> </p><p>这个如果你使用过git和github就很容易理解Docker的仓库概念。Docker 仓库的概念跟Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p><p>Docker 仓库是用来包含镜像的位置，Docker提供一个注册服务器（Register）来保存多个仓库，每个仓库又可以包含多个具备不同tag的镜像。Docker运行中使用的默认仓库是 Docker Hub 公共仓库。</p><p>仓库支持的操作类似git，当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。.</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之编写API文档</title>
      <link href="/2019/10/31/restframework-bian-xie-api-wen-dang/"/>
      <url>/2019/10/31/restframework-bian-xie-api-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="概要文档"><a href="#概要文档" class="headerlink" title="概要文档"></a>概要文档</h2><p><code>Restframework</code>有一个显示概要文档的功能，根据文档显示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031180132.png" alt></p><p>根据文档的说明，我就直接修改路由了</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span>include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> Book<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> get_schema_viewrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'Book'</span><span class="token punctuation">,</span>BookViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'Publish'</span><span class="token punctuation">,</span>PublishViewSet<span class="token punctuation">)</span>schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Pastebin API'</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">'^schema/$'</span><span class="token punctuation">,</span> schema_view<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>根据文档的说明，直接执行是可以的，但是我这里还是出了一些问题，比如：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101095757.png" alt></p><p>这个问题谷歌搜索后的最佳答案是这样的</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101140649.png" alt></p><p>emmm……虽然说知道了这个是什么原因也没啥用，我们直接升级一下<code>Django</code>和<code>Restframework</code>的版本就好了，新一点的版本没有这个bug</p><p>比如<code>Django2.0</code>和<code>Restframework3.7.7</code>及以上的版本不会出现这个问题</p><p>我更新了下版本，按照原来的配置，是可以运行的，如图概要文档已经生成</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101095810.png" alt></p><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><p><code>Restframework</code>自带一个<code>API</code>总和的说明文档，我们只需导入一个包和配置路由就可以直接使用</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>documentation <span class="token keyword">import</span> include_docs_urls<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^docs/'</span><span class="token punctuation">,</span>include_docs_urls<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"图书管理系统"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>然后我们直接访问 <a href="http://127.0.0.1:8000/docs/" target="_blank" rel="noopener">http://127.0.0.1:8000/docs/</a> 就可以看到我们的文档已经做好了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101100700.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之视图集</title>
      <link href="/2019/10/31/restframework-shi-tu-ji/"/>
      <url>/2019/10/31/restframework-shi-tu-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>视图集这个其实用不用意义不大，文档中做了一个亲切的比喻，就像编写视图函数的时候是使用函数的形式去编写还是通过类视图的形式去编写一样，主要还是为了减少代码</p></blockquote><h2 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h2><p>视图集的主要作用就是减少代码，就像我刚刚的代码，很多重复的，如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031164554.png" alt></p><p>要写多少个字段就要重复多少个<code>queryset</code>、<code>serializer_class</code>和<code>permissions_classes</code>字段</p><p>视图集的主要作用就是对重复的代码做一个整合</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031164925.png" alt></p><p>依照文档所说，只需要定义一个<code>ViewSets</code>就可以有<code>Book_list</code>和<code>Book_Detail</code>两个字段的功能</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># class Book_list(generics.ListCreateAPIView):</span><span class="token comment" spellcheck="true">#     queryset = Book.objects.all()</span><span class="token comment" spellcheck="true">#     serializer_class = Bookserializer</span><span class="token comment" spellcheck="true">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># class Book_Detail(generics.RetrieveUpdateDestroyAPIView):</span><span class="token comment" spellcheck="true">#     queryset = Book.objects.all()</span><span class="token comment" spellcheck="true">#     serializer_class = Bookserializer</span><span class="token comment" spellcheck="true">#     permission_classes = (permissions.IsAuthenticatedOrReadOnly, )</span><span class="token comment" spellcheck="true">#上面注释的代码都可以直接删了~~~</span><span class="token keyword">class</span> <span class="token class-name">BookViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Bookserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>然后需要在<code>urls.py</code>里面修改成视图集的字段，要改动的地方有点多，所以我直接丢出代码了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> Book<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>book_list <span class="token operator">=</span> BookViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>    <span class="token string">'post'</span><span class="token punctuation">:</span> <span class="token string">'create'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>book_detail <span class="token operator">=</span> BookViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'get'</span><span class="token punctuation">:</span> <span class="token string">'retrieve'</span><span class="token punctuation">,</span>    <span class="token string">'put'</span><span class="token punctuation">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span>    <span class="token string">'patch'</span><span class="token punctuation">:</span> <span class="token string">'partial_update'</span><span class="token punctuation">,</span>    <span class="token string">'delete'</span><span class="token punctuation">:</span> <span class="token string">'destroy'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>api_root<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Publish的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/$'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span>PublisherDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Book的API</span>    <span class="token comment" spellcheck="true"># url(r'^Book/$', Book_list.as_view(),name='Book-list'),</span>    <span class="token comment" spellcheck="true"># url(r'^Book/(?P&lt;pk>[0-9]+)/$', Book_Detail.as_view(),name='Book-detail'),</span>    <span class="token comment" spellcheck="true"># 使用BookViewSet(视图集)的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/$'</span><span class="token punctuation">,</span> book_list<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Book-list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span> book_detail<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Book-detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>但是看看这个<code>urls.py</code>代码，在<code>views</code>里面减少了我们要的代码量，却在<code>urls</code>里面增加了我们的代码量<del>~</del>所以接下来要引入路由器的概念</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>使用视图集一般我们都会配套使用路由器</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031171940.png" alt></p><p>依照官网的说法，我们要实例化一个<code>DefaultRouter</code>类</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span>include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> Book<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouterrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'Book'</span><span class="token punctuation">,</span>BookViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#这里的API先注释，因为api_root里面的publish没有使用视图集注册</span>    <span class="token comment" spellcheck="true"># url(r'^API/$',api_root),</span>    <span class="token comment" spellcheck="true">#Publish的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/$'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span>PublisherDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Book的API</span>    <span class="token comment" spellcheck="true"># url(r'^Book/$', Book_list.as_view(),name='Book-list'),</span>    <span class="token comment" spellcheck="true"># url(r'^Book/(?P&lt;pk>[0-9]+)/$', Book_Detail.as_view(),name='Book-detail'),</span>    <span class="token comment" spellcheck="true"># 使用BookViewSet(视图集)的API</span>    <span class="token comment" spellcheck="true"># url(r'^Book/$', book_list,name='Book-list'),</span>    <span class="token comment" spellcheck="true"># url(r'^Book/(?P&lt;pk>[0-9]+)/$', book_detail,name='Book-detail'),</span><span class="token punctuation">]</span></code></pre><p>运行试试</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031174926.png" alt></p><p>也是可以运行的</p><p>然后再把剩下的那个<code>publish</code>也去使用视图集的方式注册一下</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BookViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Bookserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublishViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span>@api_view<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">api_root</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'publish'</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">'publish-list'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'Book'</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">'Book-list'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span>include<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> Book<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouterrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'Book'</span><span class="token punctuation">,</span>BookViewSet<span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'Publish'</span><span class="token punctuation">,</span>PublishViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>然后再运行一下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031175129.png" alt></p><p>都是完全可以运行的，用最少的代码去运行了同样的功能</p><p>但是你要是问我选哪种，我肯定不会用视图集，因为遇到没有读过文档的人，碰到这段代码绝对是看不懂的，而且出了Bug还不好找</p><p>最终还是要根据自己的情况去选择使用视图还是视图集</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之超链接API</title>
      <link href="/2019/10/31/restframework-chao-lian-jie-api/"/>
      <url>/2019/10/31/restframework-chao-lian-jie-api/</url>
      
        <content type="html"><![CDATA[<h2 id="演示前配置"><a href="#演示前配置" class="headerlink" title="演示前配置"></a>演示前配置</h2><p>拿外键的例子来说，<code>Book</code>的外键是<code>Publish</code>，点击<code>Book</code>的超链接<code>API</code>就可以访问到外键的<code>Publish</code></p><p>为了方便演示，我这里我就创建一个新的表<code>Book</code>，添加一个<code>model</code>字段</p><p><strong>models.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    title<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"图书名称"</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    publish<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">"Publish"</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        verbose_name<span class="token operator">=</span><span class="token string">"书籍"</span>        verbose_name_plural<span class="token operator">=</span>verbose_name</code></pre><p>修改完<code>model</code>字段要<code>makemigrations</code>-&gt;<code>migrate</code></p><p>然后添加一个新的序列化文件</p><p><strong>serializer.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token punctuation">,</span>Book<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Bookserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过publish这个外键去找到publish这个表的name，把原本的那个显示的数字改成出版社的名字</span>    publish<span class="token operator">=</span>serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">"publish.name"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Book        fields <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token string">"publish"</span>        <span class="token punctuation">)</span></code></pre><p>接下来要编写视图views文件</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token punctuation">,</span>Book<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> Publishserializer<span class="token punctuation">,</span>Bookserializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Book_list</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Bookserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Book_Detail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Bookserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre><p>最后要编写路由方</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Publish的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/$'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span>PublisherDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Book的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/$'</span><span class="token punctuation">,</span> Book_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span> Book_Detail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>运行项目可以看到项目运行成功，且post请求等都可以运行</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031160320.png" alt></p><p>这篇博客讲的就是要把publish外键字段的弄一个超链接，点击可以查看这个出版社的所有字段</p><p>即点击这上那个字段都可以跳转到出版社的API情况</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031160635.png" alt></p><h2 id="配置超链接"><a href="#配置超链接" class="headerlink" title="配置超链接"></a>配置超链接</h2><p>配置超链接十分的简单，只需要序列化字段的类修改为<code>HyperlinkedModelSerializer</code>和删掉刚刚配置的<code>publish=serializers.StringRelatedField(source=&quot;publish.name&quot;)</code></p><p><strong>serializers.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bookserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Book        fields <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"title"</span><span class="token punctuation">,</span>            <span class="token string">"publish"</span>        <span class="token punctuation">)</span></code></pre><p><strong>urls.py</strong></p><p><strong>这里一定要编写name配置，因为如果不配置就不能反向查找到API</strong></p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>api_root<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Publish的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/$'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span>PublisherDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'publish-detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#Book的API</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/$'</span><span class="token punctuation">,</span> Book_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Book-list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^Book/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span> Book_Detail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'Book-detail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>配置完运行项目，可以看到已经配置好了超链接</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031161638.png" alt></p><h2 id="显示所有可用的API"><a href="#显示所有可用的API" class="headerlink" title="显示所有可用的API"></a>显示所有可用的API</h2><p>我们需要一个路由，打开可以显示所有可用的API</p><p>文档有这个方法的详细说明</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031162611.png" alt></p><p>依照文档的意思就是要在视图文件里面添加这个字段</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>@api_view<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">api_root</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'publish'</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">'publish-list'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'Book'</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">'Book-list'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> format<span class="token operator">=</span>format<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后我们配置一下路由</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true">#api_root的路由</span>    url<span class="token punctuation">(</span>r<span class="token string">'^$'</span><span class="token punctuation">,</span>api_root<span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>运行项目，可见运行成功</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031162837.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之权限设置</title>
      <link href="/2019/10/31/restframework-shen-fen-yan-zheng/"/>
      <url>/2019/10/31/restframework-shen-fen-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：增加显示操作人"><a href="#第一步：增加显示操作人" class="headerlink" title="第一步：增加显示操作人"></a>第一步：增加显示操作人</h2><p>查看<code>API</code>的这个界面默认是要登陆的，因为我上面我使用了<code>admin</code>账号去登陆，所以i才可以显示这个页面</p><p>但是默认的是所有账号登陆进去都可以对<code>API</code>进行增删改查，这个完全不符合逻辑。正常的逻辑是谁创建的才能谁去改，没有身份验证进去的只能读取操作。 </p><p>如图，是我去数据库把我的<code>session</code>信息删掉之后再查看API的结果</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031103421125.png" alt></p><p>依照官网的文档演示步骤，要先在<code>model</code>创建一个外键字段</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Publish</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"出版社名称"</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    address<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"地址"</span><span class="token punctuation">)</span>    operator <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'auth.User'</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>因为添加了一个字段，所以要进行数据库的迁移：<code>makemigrations</code> -&gt; <code>migrate</code></p><p>这里因为添加了一个字段，而之前的字段没有这个字段的默认值，所以会出现错误，要把默认值赋值为1即可</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031104219944.png" alt></p><p>使用如上操作之后在数据库就已经生成了新的<code>operator</code>字段了，所以接下来要对序列化的文件也添加这个字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Publishserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>Publish        fields<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">,</span>            <span class="token string">"address"</span><span class="token punctuation">,</span>            <span class="token string">"operator"</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>再登陆<code>admin</code>账号查看<code>API</code>得到的结果应该如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031104640419.png" alt></p><p>这个得到的<code>operator</code>的结果都为<code>1</code>是当然没问题的，<code>ID</code>为<code>1</code>就是代表<code>admin</code>账号，但是我们要显示的是这个<code>ID</code>的用户名</p><p>所以我们要在序列化文件里面添加字段：<code>operator=serializers.ReadOnlyField(source=&quot;operator.username&quot;)</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Publishserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    operator<span class="token operator">=</span>serializers<span class="token punctuation">.</span>ReadOnlyField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">"operator.username"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>Publish        fields<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">,</span>            <span class="token string">"address"</span><span class="token punctuation">,</span>            <span class="token string">"operator"</span>        <span class="token punctuation">)</span></code></pre><h2 id="第二步：权限设置"><a href="#第二步：权限设置" class="headerlink" title="第二步：权限设置"></a>第二步：权限设置</h2><p>关于权限设置在官网都有详细的说明</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031105427042.png" alt="权限说明文档"></p><p>依照文档的说法，我们要在视图文件里面添加一个字段，使得未登录的用户只具有读取权限，登录的用户才具有读写权限：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>去演示一下，会发现未登录用户只有读取权限，登陆的用户才有写权限</p><p>这个<code>permissions</code>字段有好几种，在文档的API的权限设置详细文档里面有说明</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031110534344.png" alt="权限设置详细文档"></p><p>在这里因为我要设置的是谁录入的<code>API</code>谁才具有读写权限，所以这里我要用的是<a href="http://www.sinodocs.cn/tutorial/4-authentication-and-permissions.html#object-level-permissions" target="_blank" rel="noopener">对象级别权限</a></p><p>如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031111206500.png" alt></p><p>依照文档的说法，我们要新建一个<code>permissions.py</code>文件</p><p><strong>permissions.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions<span class="token keyword">class</span> <span class="token class-name">IsOwnerOrReadOnly</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    自定义权限只允许对象的权限来去编辑他    """</span>    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 读取权限允许任何请求</span>        <span class="token comment" spellcheck="true"># 所以我们总是允许Get，HEAD和OPTIONS请求</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> permissions<span class="token punctuation">.</span>SAFE_METHODS<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 只有该出版社的所有者才允许去读写</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>operator <span class="token operator">==</span> request<span class="token punctuation">.</span>user</code></pre><p>然后再去视图函数里面继承<code>permissions</code>的这个类</p><p> 之后我们再去创建一个管理员账号<code>admin2</code>看看能不能修改<code>admin</code>的API</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191121111047.png" alt="随便找的图"></p><p>哦吼，大功告成</p><h2 id="第三步：新建保存operator值的方法"><a href="#第三步：新建保存operator值的方法" class="headerlink" title="第三步：新建保存operator值的方法"></a>第三步：新建保存operator值的方法</h2><p>还有最后的一个问题，假如我们新建一个用户，就拿刚刚创建的<code>admin2</code>来说，我创建一个新的<code>API</code>数据，但是我的<code>operator</code>的<code>ID</code>是没有的。</p><p>我之前创建的<code>admin</code>账号是我模型迁移之前设置了默认的值<code>1</code>，但是我新创建的<code>admin2</code>没有<code>operator</code>的值，所以我们还要创建一个类方法去编写</p><p>我通俗的将不太好懂，这个原理如下：</p><p>使用<code>post</code>去创建一个新的<code>API</code>的时候是通过序列化去添加的，而我的序列化代码如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191031113938.png" alt></p><p>序列化没有自己的<code>save</code>方法，默认存储方法是在<code>ModelSerializer</code>里面的，也就是在<code>Model</code>里面保存，但是我新建的用户<code>admin2</code>添加一个字段，他的<code>operator_id</code>都不知道去哪里找，如果使用<code>admin2</code>去添加<code>API</code>数据的话，会出现如下情况：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191031114249204.png" alt></p><p>对于这种情况，文档的说明如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031114508.png" alt></p><p>即是让我们在视图文件创建一个<code>.perform_create</code>方法</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span>IsOwnerOrReadOnly<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>operator<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span></code></pre><p>好了现在再去试一下使用admin2去post请求</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191031114833.png" alt></p><p>完美，搞定</p><h2 id="留坑"><a href="#留坑" class="headerlink" title="留坑"></a>留坑</h2><p>项目开发可能更多用到的是token验证，所以这里留个坑，到时候我做个项目案例回来填</p><p>在项目开发中，实际上用到的是比如购物车结算，没有登录的用户是无法进行结算的，所以一般要使用json.token去编写</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之类视图的编写</title>
      <link href="/2019/10/30/restframework-lei-shi-tu-bian-xie/"/>
      <url>/2019/10/30/restframework-lei-shi-tu-bian-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="Restframework请求和响应"><a href="#Restframework请求和响应" class="headerlink" title="Restframework请求和响应"></a>Restframework请求和响应</h2><p><code>Restframework</code>扩展了<code>Django</code>默认的 <code>Request</code> 对象，提供了更加的灵活解析，除此之外<code>Restframework</code>还引入了一个 <code>Response响应对象</code>和<code>状态码</code>，如翻译文档截图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030161355293.png" alt="请求响应说明文档"></p><p>状态码呢，平常我们得到的结果404什么的我们都知道是找不到界面的意思了，但是<code>Restframework</code>在返回状态码的基础上还给我们返回一个说明</p><h2 id="Restframework编写-API视图"><a href="#Restframework编写-API视图" class="headerlink" title="Restframework编写 API视图"></a>Restframework编写 API视图</h2><h3 id="函数式编写API视图"><a href="#函数式编写API视图" class="headerlink" title="函数式编写API视图"></a>函数式编写API视图</h3><p><code>Restframework</code>的视图分为函数视图和类视图，这里我就直接用类视图来演示了，因为我开发<code>view视图</code>函数的时候都是用继承<code>from django.views.generic.base import View</code>来开发的，关于通过使用 <code>@api_view 装饰器</code>来对<code>API视图</code>进行开发官网有较明确的说明</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030162340135.png" alt="函数编写方法说明文档"></p><h3 id="类的方法来编写API视图"><a href="#类的方法来编写API视图" class="headerlink" title="类的方法来编写API视图"></a>类的方法来编写API视图</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030163246255.png" alt="类方法说明文档"></p><p>官网有详细说明的案例，这里我就直接编写视图代码了</p><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> Publishserializer<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> Http404<span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        列出所有的出版社或者创建一个新的出版社    """</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publish <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer <span class="token operator">=</span> Publishserializer<span class="token punctuation">(</span>publish<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> Publishserializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    具体的出版社的查看、修改和删除视图    """</span>    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>        <span class="token keyword">except</span> Publish<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Http404    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publish <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> Publishserializer<span class="token punctuation">(</span>publish<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publish <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        serializer <span class="token operator">=</span> Publishserializer<span class="token punctuation">(</span>publish<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        publish <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span>pk<span class="token punctuation">)</span>        publish<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span></code></pre><p>然后去编写路由</p><p><strong>urls.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> Book<span class="token punctuation">.</span>views <span class="token keyword">import</span> Publish_list<span class="token punctuation">,</span>PublisherDetailurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/$'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/(?P&lt;pk>[0-9]+)/$'</span><span class="token punctuation">,</span>PublisherDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>配置完成，直接去访问地址</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030170643572.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030170732515.png" alt></p><h2 id="对类方法编写API视图进行优化"><a href="#对类方法编写API视图进行优化" class="headerlink" title="对类方法编写API视图进行优化"></a>对类方法编写API视图进行优化</h2><h3 id="mixins类说明"><a href="#mixins类说明" class="headerlink" title="mixins类说明"></a>mixins类说明</h3><p>对上面我演示的案例来说，单单只有一个类方法来编写，就要使用到<code>get_object</code>、<code>put</code>、<code>delete</code>、<code>post</code>等方法，如果有很多个API方法，就要使用到很多个重复的方法，所以<code>Restframework</code>整合了这些方法成为一个类，把重复的方法都整合起来，我们只需要修改表就可以了，这样就可以大大的<strong>减少代码量</strong>了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030171934693.png" alt="整合的方法"></p><p>来，让我们康康<code>mixins</code>的源码</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030174711526.png" alt="部分源码"></p><p>根据源码所示，<code>model</code>的表名要赋值给<code>queryset</code>，序列化后的字段要赋值给<code>serializer_class</code>，不然就会报错</p><p><code>mixins</code>类里面封装了很多的方法，我们需要用到什么方法的时候就继承里面的哪个方法即可</p><h3 id="使用mixins重写view方法"><a href="#使用mixins重写view方法" class="headerlink" title="使用mixins重写view方法"></a>使用mixins重写view方法</h3><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> Publishserializer<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> mixins<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics<span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>ListModelMixin<span class="token punctuation">,</span> mixins<span class="token punctuation">.</span>CreateModelMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        列出所有的出版社或者创建一个新的出版社        """</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>create<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span>                      mixins<span class="token punctuation">.</span>UpdateModelMixin<span class="token punctuation">,</span>                      mixins<span class="token punctuation">.</span>DestroyModelMixin<span class="token punctuation">,</span>                      generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    具体的出版社的查看、修改和删除视图    """</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>retrieve<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><p>拿修改后的代码跟原来的一比，代码的逻辑少了很多，<code>queryset</code>和<code>serializer_class</code>是<code>mixins</code>里面定义好的字段，所以我们把值赋值给这两个字段即可</p><p>再访问 <a href="http://127.0.0.1:8000/publish/" target="_blank" rel="noopener">http://127.0.0.1:8000/publish/</a> 试试</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030174023961.png" alt="使用mixins重写后访问"></p><p>依然没有任何问题</p><h2 id="mixins之再优化"><a href="#mixins之再优化" class="headerlink" title="mixins之再优化"></a>mixins之再优化</h2><p>在上述的mixins方法中已经帮我们整合了大部分的方法，已经减少了我们原本的大部分代码，但是还是有优化的地方</p><p>我们每次要调用很多个mixins方法的时候，一次要继承三四个类，看起来十分不美观</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030175530143.png" alt></p><p>你想到的Restframework早就想到了，而且还帮你做出了优化</p><p>我拿截图的这两个代码来说明，我们一次要继承四个类，所以我们可以直接去继承一个整合类来代替四个类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        列出所有的出版社或者创建一个新的出版社    """</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer<span class="token keyword">class</span> <span class="token class-name">PublisherDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveUpdateDestroyAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    具体的出版社的查看、修改和删除视图    """</span>    queryset <span class="token operator">=</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> Publishserializer</code></pre><p>这个整合的代码的名称很简便易懂，让我们康康源码</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030175816419.png" alt></p><p>哦吼，里面的代码不就是我们刚刚写的吗，直接帮我们把要重复的代码又整合一遍，把原本要十几行代码整合到了两行，我们直接写字段就好了</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restframework之入门</title>
      <link href="/2019/10/29/restframework-ru-men/"/>
      <url>/2019/10/29/restframework-ru-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官方文档（英文）： <a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">https://www.django-rest-framework.org/</a> </p><p>官方文档（翻译）： <a href="http://www.sinodocs.cn/" target="_blank" rel="noopener">http://www.sinodocs.cn/</a> </p><p>官网文档（未翻译全）（推荐）： <a href="https://q1mi.github.io/Django-REST-framework-documentation/" target="_blank" rel="noopener">https://q1mi.github.io/Django-REST-framework-documentation/</a> </p><p>参考文档： <a href="https://www.cnblogs.com/chenxuming/articles/9370009.html#_label2" target="_blank" rel="noopener">https://www.cnblogs.com/chenxuming/articles/9370009.html#_label2</a> </p></blockquote><blockquote><p>restful系列博客是在学习51cto的课程和在观看完官方文章之后的学习总结，自己重新做了一个案例来说明</p></blockquote><h2 id="Django-Restframework是什么"><a href="#Django-Restframework是什么" class="headerlink" title="Django Restframework是什么"></a>Django Restframework是什么</h2><p><code>Django Restframework</code>是<code>Django</code>中可以 帮助我们快速的开发符合<code>RESTful</code>规范的接口的框架 ，<code>RESTful</code>是如今开发基本都会采用的规范</p><h3 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h3><ul><li>GET（SELECT）：查询; 从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：新增; 在服务器新建一个资源。</li><li>PUT（UPDATE）：覆盖,全部更新 ; 在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：更新;  在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：删除; 从服务器删除资源。</li><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><h3 id="Restframework作用"><a href="#Restframework作用" class="headerlink" title="Restframework作用"></a>Restframework作用</h3><ul><li><p>路由</p><ul><li><p>可以通过<code>as_view</code>传参数,根据请求方式的不同执行响应的方法</p></li><li><p>可以在url中设置一个结尾类似于.json的数据形式</p></li></ul></li><li><p>视图</p><ul><li>帮助开发者提供了一些类,并在类提供了很多的方法供我们使用 </li></ul></li><li><p>版本控制</p><ul><li>在url中设置version参数,用户请求传入参数时,在<code>request.version</code>中获取版本,根据版本的不同做不同的处理 </li></ul></li><li><p>认证</p><ul><li>写一个类并注册到认证类,在类的authticate方法中编写认证逻辑<ul><li>认证成功(user,auth)</li><li>rase AuthticateFaild(..)</li><li>None 继续</li></ul></li></ul></li><li><p>权限</p><ul><li>写一个类并注册的权限类,在类的<code>has_permission</code>方法中写权限逻辑 </li></ul></li><li><p>频率限制 </p><ul><li>写一个类并注册的权限类,在类的<code>allow_requset/wait</code> 方法中写权限逻辑 <ul><li>匿名</li><li>用户</li><li>返回为<code>True</code>或者<code>False</code>，<code>False</code>就要执行<code>wait</code>方法</li></ul></li></ul></li><li><p>解析器</p><ul><li>根据ContentType请求头,选择不同的解析器对请求体中的数据进行解析.<ul><li><code>Content-Type : url-formedo</code></li><li><code>Content-Type :application/json</code></li></ul></li></ul></li><li><p>分页</p><ul><li>对从数据库中取到的数据进行分页处理. SQL—&gt; limit offset<ul><li>根据页码:<a href="http://www.luffycity.com/api/v1/student/?page=1&amp;size=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=1&amp;size=10</a></li><li>根据索引:<a href="http://www.luffycity.com/api/v1/student/?offset=60(游标位置)&amp;limit=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?offset=60(游标位置)&amp;limit=10</a></li><li>根据加密:</li></ul></li></ul></li><li><p>序列化</p><ul><li>对<code>queryset</code>序列化以及对请求数据格式校验 </li></ul></li><li><p>渲染器 </p><ul><li>根据url中传入的后缀,决定在数据如何渲染到页面上</li></ul></li></ul><p>&emsp;</p><p><strong>…….简单的总结就是，<code>Django Restframework</code>可以帮助你前后端分离开发，后台人员通过<code>Restframework</code>来开发<code>API</code>接口，前端人员写前端的页面（不论是PC还是移动端），到时候整合直接使用后端人员的接口就可以完成整个项目的开发</strong></p><p>&emsp;</p><p>接下来我从把<code>model</code>的数据转换为json格式来引入<code>Restframework</code>的概念</p><h2 id="model数据转换为json形式"><a href="#model数据转换为json形式" class="headerlink" title="model数据转换为json形式"></a>model数据转换为json形式</h2><p>在开始演示之前，要先配置好Django的基本配置：编写好model、setting配置、从model插入数据、view视图配置等操作，这里我一一演示一遍</p><h3 id="演示前配置"><a href="#演示前配置" class="headerlink" title="演示前配置"></a>演示前配置</h3><p>先创建一个空文件夹，然后创建项目，如我下图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030104429158.png" alt="创建项目"></p><p>然后使用<code>pycharm</code>打开项目，配置好数据库、插入<code>Book</code>(我拿来演示的app)到<code>INSTALLED_APPS</code>，以下是我的配置</p><h4 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h4><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'Book'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.permissions.IsAdminUser'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'restful_demo'</span><span class="token punctuation">,</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="根目录-init-文件"><a href="#根目录-init-文件" class="headerlink" title="根目录__init__文件"></a>根目录<code>__init__</code>文件</h4><p>在我的<code>restful_test(项目根目录)</code>文件夹里面的的<code>__init__.py</code>文件，因为是python3版本， 所以要配置一下mysql</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="创建model模型字段"><a href="#创建model模型字段" class="headerlink" title="创建model模型字段"></a>创建model模型字段</h4><p>在我创建的Book文件夹里面的model.py添加我要演示的字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Publish</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"出版社名称"</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    address<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"地址"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        verbose_name<span class="token operator">=</span><span class="token string">"出版社"</span>        verbose_name_plural<span class="token operator">=</span>verbose_name</code></pre><p>然后对生成迁移文件和写入数据库</p><p><code>python manage.py makemigrations</code>-&gt;<code>python manage.py migrate</code></p><h4 id="创建管理员为model添加数据"><a href="#创建管理员为model添加数据" class="headerlink" title="创建管理员为model添加数据"></a>创建管理员为model添加数据</h4><p> <code>python manage.py createsuperuser</code>创建好管理员的用户名和密码</p><p>然后在<code>admin.py</code>里面注册Book</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token comment" spellcheck="true"># Register your models here.</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Publish<span class="token punctuation">)</span></code></pre><p>这里我添加好了三条数据</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030111244863.png" alt="Book数据"></p><p>以上你要用<code>Django shell</code>添加也行</p><p>到这里演示前的准备都已经配置好了，接下来的都是配置<code>view</code>视图方法</p><h3 id="方法一：使用字典的方式转换为json"><a href="#方法一：使用字典的方式转换为json" class="headerlink" title="方法一：使用字典的方式转换为json"></a>方法一：使用字典的方式转换为json</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>base <span class="token keyword">import</span> View<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">import</span> json<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset<span class="token operator">=</span>Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> queryset<span class="token punctuation">:</span>            p_tmp<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">"name"</span><span class="token punctuation">:</span>i<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                <span class="token string">"address"</span><span class="token punctuation">:</span>i<span class="token punctuation">.</span>address            <span class="token punctuation">}</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p_tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>content_type<span class="token operator">=</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>然后配置一下路由</p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span>r<span class="token string">'^publish/'</span><span class="token punctuation">,</span>Publish_list<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>访问 <a href="http://127.0.0.1:8000/publish/" target="_blank" rel="noopener">http://127.0.0.1:8000/publish/</a> </p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030112748744.png" alt></p><p>可以看到model的数据已经转换为json格式了</p><h3 id="方法二：使用Django自带的model-to-dict方法"><a href="#方法二：使用Django自带的model-to-dict方法" class="headerlink" title="方法二：使用Django自带的model_to_dict方法"></a>方法二：使用Django自带的model_to_dict方法</h3><p>方法二其实是对方法一进行优化，Django默认自带了一个model_to_dict方法，可以帮助我们把model转换为一个字典</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>base <span class="token keyword">import</span> View<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">from</span> django<span class="token punctuation">.</span>forms<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_to_dict<span class="token keyword">import</span> json<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset<span class="token operator">=</span>Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> queryset<span class="token punctuation">:</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model_to_dict<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>content_type<span class="token operator">=</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030115622712.png" alt></p><p>方法二得出的结果还是一毛一样的</p><h3 id="方法三：使用Django自带的序列化转换成json"><a href="#方法三：使用Django自带的序列化转换成json" class="headerlink" title="方法三：使用Django自带的序列化转换成json"></a>方法三：使用Django自带的序列化转换成json</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>base <span class="token keyword">import</span> View<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">from</span> django<span class="token punctuation">.</span>core <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset<span class="token operator">=</span>Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token operator">=</span>serializers<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span>queryset<span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>data<span class="token punctuation">,</span>content_type<span class="token operator">=</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030120017403.png" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个跟方法一和方法二的结果多了一个<code>model</code>和<code>pk</code>字段，但是方法三比其他两个方法更为简洁，更少的代码也更容易理解</p><p>如果单单只要提供信息的话使用方法三是完全足够的，从<code>model</code>读取信息转换为<code>json</code>格式方法三完全可以胜任。开发不仅仅只是把<code>model</code>转换为<code>API</code>，还要把<code>API</code>转换成<code>model</code>里面的数据</p><h2 id="Restframework的使用"><a href="#Restframework的使用" class="headerlink" title="Restframework的使用"></a>Restframework的使用</h2><h3 id="初识：自定义序列化的类"><a href="#初识：自定义序列化的类" class="headerlink" title="初识：自定义序列化的类"></a>初识：自定义序列化的类</h3><p><code>Restframework</code>的用法是跟<code>Django</code>的<code>form</code>表单的用法很相似</p><p>要先在创建一个<code>serializers</code>文件，这个文件里面存储序列化的字段</p><p> <strong>serializers .py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">class</span> <span class="token class-name">Publishserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name<span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    address<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span></code></pre><p>以上字段已经完成了字段的序列化，在前面说的跟form表单验证的方法一样，也有个验证的方法，如果直接把字段序列化进去就会造成不安全的问题，如翻译文档所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030142657094.png" alt="翻译文档"></p><p>所以我们要重写一个<code>create</code>和<code>update</code>方法</p><p> <strong>serializers .py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">class</span> <span class="token class-name">Publishserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name<span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    address<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#这里不用管validated_data是什么，只需要按照官网的方法所示，返回**validated_data就可以保证序列化的字段经过验证</span>        <span class="token keyword">return</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>name<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>address<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span>instance<span class="token punctuation">.</span>address<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance</code></pre><p>然后我们使用<code>Django shell</code>测试一下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030143656397.png" alt></p><p>其中的<code>is_vaild</code>方法都跟<code>form</code>表单使用方法一样，然后再刷新网页看看数据</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030143900759.png" alt></p><p>如图所示，就增加了我刚刚写的数据</p><h3 id="使用：在view里面添加序列化方法"><a href="#使用：在view里面添加序列化方法" class="headerlink" title="使用：在view里面添加序列化方法"></a>使用：在view里面添加序列化方法</h3><p><strong>views.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>base <span class="token keyword">import</span> View<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">from</span> django<span class="token punctuation">.</span>core <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> Publishserializer<span class="token keyword">import</span> json<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">Publish_list</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        queryset<span class="token operator">=</span>Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        serializer<span class="token operator">=</span>Publishserializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#many=True就是多个对象，要去遍历出来</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>content_type<span class="token operator">=</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><h3 id="优化：继承model的字段"><a href="#优化：继承model的字段" class="headerlink" title="优化：继承model的字段"></a>优化：继承model的字段</h3><p>跟<code>form</code>一样，<code>form</code>可以继承<code>model</code>的字段，<code>serializers</code> 当然也可以，已经在<code>model</code>里面创建的字段，当然没有必要重新写一遍了，所以现在要改写一下<code>serializers .py</code>的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Publish<span class="token keyword">class</span> <span class="token class-name">Publishserializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>Publish        fields<span class="token operator">=</span><span class="token punctuation">(</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">,</span>            <span class="token string">"address"</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#这里不用管validated_data是什么，只需要按照官网的方法所示，返回**validated_data就可以保证序列化的字段经过验证</span>        <span class="token keyword">return</span> Publish<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>name<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>address<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span>instance<span class="token punctuation">.</span>address<span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> instance</code></pre><p>其余配置不变，输入配置好的路由地址 <a href="http://127.0.0.1:8000/publish/" target="_blank" rel="noopener">http://127.0.0.1:8000/publish/</a> ，依然可以访问到同样的数据</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/image-20191030145827519.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理</title>
      <link href="/2019/10/24/nginx-fan-xiang-dai-li/"/>
      <url>/2019/10/24/nginx-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>本文使用Nginx来模拟第三方云平台的运行，通过Nginx来去调用内网的接口，从而实现保护内网的真实IP又可以提供对外访问的服务的目的</p></blockquote><h2 id="架构思路"><a href="#架构思路" class="headerlink" title="架构思路"></a>架构思路</h2><p>音乐、电影、书籍信息接口都是部署在服务器1里面，来模拟在内网的接口</p><p><code>Nginx</code>作为中间件来模拟第三方的云服务器端，小程序等APP调用的时候是直接去调用<code>Nginx</code>服务器，而不是直接去调用内网的接口，达到一种隐藏内网的地址而又可以间接去调用内网的接口</p><p>我的第一个模拟内网的服务器IP是<a href="http://39.106.12.6/" target="_blank" rel="noopener">39.106.12.6</a>，第二个模拟云平台的服务器IP是<a href="http://47.93.184.113/" target="_blank" rel="noopener">47.93.184.113</a></p><p>下面我拿个<code>Django API</code>提供对外调用来模拟内网的接口，拿小程序去对接口的出来的结果进行增删改查</p><h2 id="Nginx架构图"><a href="#Nginx架构图" class="headerlink" title="Nginx架构图"></a>Nginx架构图</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571905522931.png" alt="架构图"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>以下三个是我在服务器1里面写的Django的查询API，是我通过Nginx去访问的</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571903983358.png" alt="音乐信息"></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571903998646.png" alt="书籍信息"></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571904033699.png" alt="电影信息"></p><p>如果我直接访问我的内网API则会被拒绝，如图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571904490645.png" alt="直接访问服务器1"></p><p>因为我在Nginx配置了只允许<a href="http://47.93.184.113/" target="_blank" rel="noopener">47.93.184.113</a>访问，其余IP访问都会报403错误，只有我指定的Nginx服务器IP才能 访问内网的接口，如图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571904572264.png" alt="使用Nginx间接访问内网"></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/Nginx/1571906670097.png" alt="小程序去调用Nginx的IP"></p><p>使用小程序等移动端APP也一样，直接去调用Nginx服务器的IP就可以调用内网的API</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>使用Nginx作为中间件可以免去多余的第三方服务，而且还可以借助Nginx去实现多余的功能，比如负载均衡，反爬虫等</p><p>如果使用云平台和第三方的服务商进行内网穿透，会导致访问服务的速度变慢，而使用Nginx一步就可以达到原有的功能而且还更方便</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯子的安装和使用</title>
      <link href="/2019/10/23/ti-zi/"/>
      <url>/2019/10/23/ti-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu的SSR部署和使用"><a href="#ubuntu的SSR部署和使用" class="headerlink" title="ubuntu的SSR部署和使用"></a>ubuntu的SSR部署和使用</h2><blockquote><p>参考博客：</p><p><a href="http://www.pianshen.com/article/3905142094/" target="_blank" rel="noopener">http://www.pianshen.com/article/3905142094/</a></p><p><a href="https://blog.csdn.net/weixin_38313047/article/details/85125082" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38313047/article/details/85125082</a></p><p>为防止搭建梯子的步骤老被封，所以我先在这里记下来先</p></blockquote><h3 id="ubuntu-16-04-SSR-server"><a href="#ubuntu-16-04-SSR-server" class="headerlink" title="ubuntu 16.04 SSR server"></a>ubuntu 16.04 SSR server</h3><pre class=" language-shell"><code class="language-shell">执行   wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh&& chmod +x ssr.sh && bash ssr.sh</code></pre><pre class=" language-shell"><code class="language-shell">备用地址 wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh&& chmod +x ssr.sh && bash ssr.sh</code></pre><p>复制上面的主用下载地址的两句代码到VPS服务器里，然后按回车：</p><p><img src="http://www.pianshen.com/images/134/50e5294828574e98d34bbd5b8cd3c3c6.png" alt></p><p>如上图出现管理界面后，输入数字1来安装SSR服务端。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令<code>bash ssr.sh</code> 再尝试。</p><p><img src="http://www.pianshen.com/images/599/b185eb0bdfedf0844f92395dc4789367.png" alt></p><p>根据上图提示，依次输入自己想设置的端口和密码 (密码建议用复杂点的字母组合，图中的密码只是作为演示用)，回车键用于确认</p><p><img src="http://www.pianshen.com/images/439/71697a1c4e40688acc478f7c51ad4057.png" alt></p><p>如上图，选择想设置的加密方式，比如10，按回车键确认</p><p>接下来是选择协议插件，如下图：</p><p><img src="http://www.pianshen.com/images/327/905393912f4b3434d5ff1c35ef5703c7.png" alt></p><p><img src="http://www.pianshen.com/images/636/95a50a86dd77c38f19ab14777d71938c.png" alt></p><p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端，可以根据需求进行选择，原则上不推荐使用SS客户端，演示选择n</p><p>之后进行混淆插件的设置，如下面</p><p><img src="http://www.pianshen.com/images/674/a482a79487143fc289b3565ee59af8ba.png" alt></p><p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p><img src="http://www.pianshen.com/images/790/a24e01a5174862459f839ea89e475066.png" alt></p><p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p><p><img src="http://www.pianshen.com/images/240/1adca9c2c219546409e1e78ee08cd3b0.png" alt></p><p>耐心等待一会，出现下面的界面即部署完成：</p><p><img src="http://www.pianshen.com/images/471/64e2bda4d56988fa4e12c60c849004f7.png" alt></p><p><img src="http://www.pianshen.com/images/165/b85b52b9e6cc56153e70af8ff8afa1b5.png" alt></p><p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件。如果之后想修改账号信息，直接输入快捷管理命令：<code>bash ssr.sh</code> 进入管理界面，选择相应的数字来进行一键修改。例如：</p><pre><code>bash ssr.sh</code></pre><p><img src="http://www.pianshen.com/images/527/fc1e1e88e19ca0ba00491cb59a46574f.png" alt></p><p><img src="http://www.pianshen.com/images/224/4a1c8f15f11d234641051c4381ccecb8.png" alt></p><hr><h3 id="一键加速VPS服务器"><a href="#一键加速VPS服务器" class="headerlink" title="一键加速VPS服务器"></a>一键加速VPS服务器</h3><p>加速教程为谷歌BBR加速教程，谷歌BBR加速和破解版锐速加速教程，两者只能成功装一个，都仅支持KVM框架的vps服务器，vultr的服务器都是KVM框架。如果你购买的不是vultr的服务器，那么你需要搞清楚你买的vps服务器是否是KVM框架的，很重要。</p><p>按照第二步的步骤，重新连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p><p>【谷歌BBR加速教程】</p><pre class=" language-shell"><code class="language-shell">yum -y install wgetwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh</code></pre><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。该方法是开机自动启动，部署一次就可以了。</p><p>如图：</p><p><img src="http://www.pianshen.com/images/790/0bd96843ea97aa895b034f2a02cc671e.png" alt></p><p>出现上面这个图按回车</p><p><img src="http://www.pianshen.com/images/740/41b774e68b723af7fd624bc41589b764.png" alt></p><p>最后输入y重启服务器或者手动输入代码：reboot</p><h2 id="Centos的SSR部署和使用"><a href="#Centos的SSR部署和使用" class="headerlink" title="Centos的SSR部署和使用"></a>Centos的SSR部署和使用</h2><blockquote><p>本文转载于：<a href="https://www.stackcc.com/2019/04/04/ssrstep/" target="_blank" rel="noopener">https://www.stackcc.com/2019/04/04/ssrstep/</a></p><p>本文只做部分解释说明，为防止梯子教程被封所以先来这里记着</p></blockquote><h3 id="Centos的SSR安装方法"><a href="#Centos的SSR安装方法" class="headerlink" title="Centos的SSR安装方法"></a>Centos的SSR安装方法</h3><p>开始前先执行以下命令,检查理服务器系统版本,不支持CentOS8!!!(显示7就是CentOS 7,显示8就是CentOS 8),用Vultr的同学要手动选择CentOS 7系统,不然默认CentOS 8….</p><pre class=" language-shell"><code class="language-shell">rpm -q centos-release|cut -d- -f3</code></pre><p>进入服务器后，就可以运行SSR代码了，这里推荐秋水逸冰大大的（原文网址<a href="https://shadowsocks.be/9.html），当然也可以用其他的，网上代码很多" target="_blank" rel="noopener">https://shadowsocks.be/9.html），当然也可以用其他的，网上代码很多</a></p><p>依次运行以下3条命令(输入一条回车一次)：</p><pre class=" language-javascript"><code class="language-javascript">wget <span class="token operator">--</span>no<span class="token operator">-</span>check<span class="token operator">-</span>certificate https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>teddysun<span class="token operator">/</span>shadowsocks_install<span class="token operator">/</span>master<span class="token operator">/</span>shadowsocksR<span class="token punctuation">.</span>shchmod <span class="token operator">+</span>x shadowsocksR<span class="token punctuation">.</span>sh<span class="token punctuation">.</span><span class="token operator">/</span>shadowsocksR<span class="token punctuation">.</span>sh <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">|</span> tee shadowsocksR<span class="token punctuation">.</span>log</code></pre><hr><p>如提示:</p><pre class=" language-shell"><code class="language-shell">wget :com.m.and not found</code></pre><p>请执行下面命令后再执行 秋水逸冰的一键脚本就行了。</p><pre class=" language-shell"><code class="language-shell">yum install wget -y</code></pre><p>如提示:</p><pre class=" language-shell"><code class="language-shell">[Error] libsodium install failed.</code></pre><p>百分之一亿是因为你用的是CentOS 8,换CentOS 7 试试 o(´^｀)o</p><hr><p>运行后，会提示你设置端口（port）和密码（password），加密方式,协议,混淆,端口设为80</p><p>提示<code>Please enter password for ShadowsocksR:</code>设置SSR连接密码：自己设定（如不设定，默认为 teddysun.com）<img src="http://oss.stackcc.com/blog/20181231160302.png" alt></p><p>提示<code>Please enter a port for ShadowsocksR [1-65535]设置</code>你的服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）<img src="http://oss.stackcc.com/blog/20181231160423.png" alt></p><p>提示<code>Please select stream cipher for ShadowsocksR:</code>设置加密方式,输入序号回车选择：自己设定(建议<code>chacha20</code>)（如不设定，Python 和 libev 版默认为 <code>aes-256-gcm</code>，R 和 Go 版默认为 <code>aes-256-cfb</code>）<img src="http://oss.stackcc.com/blog/20181231155203.png" alt></p><p>提示<code>Please select protocol for ShadowsocksR:</code>输入序号回车选择协议（protocol）：自己设定（如不设定，默认为 origin）<img src="http://oss.stackcc.com/blog/20181231155214.png" alt></p><p>提示 <code>Please select obfs for ShadowsocksR:</code>输入序号回车选择混淆方式obfs,(免流请选择2:http_simple)（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</p><p><img src="http://oss.stackcc.com/blog/20181231155226.png" alt></p><p>设置后直接回车，让代码自己运行，大概几分钟后运行结束，这时会出现红色字体的配置信息，请务必牢记，最好截图保存，以免遗忘</p><p><img src="http://oss.stackcc.com/blog/0181231162021.png" alt></p><p>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p><p>本脚本安装完成后即已后台启动，且开机自动启动。</p><hr><p><strong>注意:Vultr最新CentOS7需要开放端口或者关闭防火墙才能连接!!!!!!</strong></p><hr><p>停止防火墙请执行[回车]:</p><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld</code></pre><p>重启防火墙[回车]:</p><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><p>查看防火墙状态[回车] <code>not running</code>  表示已关闭:</p><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><hr><p><strong>防火墙其他高级设置,如单独开放端口等,可以参考以下文章:</strong></p><p><a href="https://www.cnblogs.com/yyxq/p/10551274.html" target="_blank" rel="noopener">Centos7 防火墙 firewalld 实用操作（https://www.cnblogs.com/yyxq/p/10551274.html）</a></p><h3 id="SSR其他命令"><a href="#SSR其他命令" class="headerlink" title="SSR其他命令"></a>SSR其他命令</h3><p><strong>卸载方法：</strong>使用 root 用户登录，运行以下命令：</p><pre class=" language-shell"><code class="language-shell">./shadowsocksR.sh uninstall</code></pre><p><strong>查看进程是否启动：</strong>运行：</p><pre class=" language-shell"><code class="language-shell">/etc/init.d/shadowsocks status</code></pre><p><strong>使用命令：</strong></p><blockquote><p>启动：<code>/etc/init.d/shadowsocks start</code><br>停止：<code>/etc/init.d/shadowsocks stop</code><br>重启：<code>/etc/init.d/shadowsocks restart</code><br>状态：<code>/etc/init.d/shadowsocks status</code><br>配置文件路径：<code>/etc/shadowsocks.json</code><br>日志文件路径：<code>/var/log/shadowsocks.log</code><br>代码安装目录：<code>/usr/local/shadowsocks</code></p></blockquote><h3 id="Centos下的锐速安装方法"><a href="#Centos下的锐速安装方法" class="headerlink" title="Centos下的锐速安装方法"></a>Centos下的锐速安装方法</h3><blockquote><p>本篇转载于：<a href="https://www.stackcc.com/2019/01/04/centos67ruisu/" target="_blank" rel="noopener">https://www.stackcc.com/2019/01/04/centos67ruisu/</a></p><p>本文只做部分解释说明，为防止梯子教程被封所以先来这里记着</p></blockquote><h4 id="一、注意事项"><a href="#一、注意事项" class="headerlink" title="一、注意事项"></a>一、注意事项</h4><p>1、安装锐速需降级系统内核，而安装 Google BBR 则需升级系统内核，故两者不能同时安装。</p><p>2、安装锐速需降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。</p><p>3、本教程只支持 CentOS6 x64 及 CentOS7 x64 系统，不支持任何 Debian &amp; Ubuntu 系统！</p><h4 id="二、判断系统类型"><a href="#二、判断系统类型" class="headerlink" title="二、判断系统类型"></a>二、判断系统类型</h4><p>连接服务器，按照下图提示，我们首先复制命令：</p><pre class=" language-shell"><code class="language-shell">uname -r</code></pre><p>然后回到 Xshell 软件，鼠标右键选择粘贴，回车继续。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos-serverspeeder-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>回车后输出当前系统内核版本。主要分三种情况：</p><hr><p>1、结果以 2 开头，例如 <code>2.6.32-696.18.7.el6.x86_64</code>。</p><p>这种输出结果说明我们的服务器为 CentOS6 x64 系统，大家直接查看第三步进行锐速安装即可。</p><hr><p>2、结果以 3 开头，例如 <code>3.10.0-693.11.6.el7.x86_64</code>。</p><p>这种输出结果说明我们的服务器为 CentOS7 x64 系统，大家直接查看第四步进行锐速安装即可。</p><hr><p>3、结果以 4 开头，例如 <code>4.12.10-1.el7.elrepo.x86_64</code>。</p><p>这种输出结果说明我们的服务器已经安装 Google BBR 拥塞控制算法，此时已经无法继续安装锐速。</p><hr><h4 id="三、CentOS6-x64-系统安装锐速"><a href="#三、CentOS6-x64-系统安装锐速" class="headerlink" title="三、CentOS6 x64 系统安装锐速"></a>三、CentOS6 x64 系统安装锐速</h4><p>若第二步中确定服务器为 CentOS6 x64 系统则看这一步。</p><p>按照下图提示，我们继续复制下列命令：</p><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install '2.6.32-642.el6.x86_64'</code></pre><p>然后回到 Xshell 软件，鼠标右键选择粘贴，回车继续。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder01-3.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>回车后系统会自动下载脚本并执行。按照下图提示，我们直接回车继续即可。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder02-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息。按照下图提示，我们每次都直接回车继续即可。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder03-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态。按照下图提示，当出现红框内信息时说明锐速已完成安装并开机自启动。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder04-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><h4 id="四、CentOS7-x64-系统安装锐速"><a href="#四、CentOS7-x64-系统安装锐速" class="headerlink" title="四、CentOS7 x64 系统安装锐速"></a>四、CentOS7 x64 系统安装锐速</h4><p>若第二步中确定服务器为 CentOS7 x64 系统则看这一步。</p><p>按照下图提示，我们继续复制下列命令：</p><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh</code></pre><p>然后回到 Xshell 软件，鼠标右键选择粘贴，回车继续。</p><p>&emsp;</p><p>回车后系统会自动下载脚本并执行更换内核命令。按照下图提示，我们可以看到当前系统确实为 CentOS7，等待内核更换完毕后系统会自动重启并断开连接。</p><p>&emsp;</p><p>系统重启后，Xshell 软件会断开连接。等待 3~5 分钟服务器即可重启完毕，我们重新连接服务器，按照下图提示，我们继续复制命令：</p><pre class=" language-shell"><code class="language-shell">yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install</code></pre><p>然后回到 Xshell 软件，鼠标右键选择粘贴，回车继续。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos7-serverspeeder03-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>回车后系统会自动下载脚本并执行。按照下图提示，我们直接回车继续即可。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder02-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>回车继续后系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息。按照下图提示，我们每次都直接回车继续即可。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos7-serverspeeder05.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>设置完三项信息完成后，系统会完成锐速安装并输出锐速的运行状态。按照下图提示，当出现红框内信息时说明锐速已完成安装并开机自启动。</p><p><img src="https://static.vultrcn.com/wp-content/uploads/2018/03/centos6-serverspeeder04-2.png" alt="CentOS6/7 专用破解版锐速一键安装脚本"></p><p>安装教程就是这些，大家有不清楚的可以留言提问。</p><h4 id="五-锐速常用命令"><a href="#五-锐速常用命令" class="headerlink" title="五.锐速常用命令"></a>五.锐速常用命令</h4><pre class=" language-shell"><code class="language-shell">启动：/serverspeeder/bin/serverSpeeder.sh start停止：/serverspeeder/bin/serverSpeeder.sh stop状态：service serverSpeeder status检查是否有appex0模块：lsmod</code></pre><h2 id="Centos的SS部署和使用"><a href="#Centos的SS部署和使用" class="headerlink" title="Centos的SS部署和使用"></a>Centos的SS部署和使用</h2><blockquote><p>参考博客：<a href="https://blog.51cto.com/14184268/2424093" target="_blank" rel="noopener">https://blog.51cto.com/14184268/2424093</a></p></blockquote><h3 id="SS安装"><a href="#SS安装" class="headerlink" title="SS安装"></a>SS安装</h3><p>在购买到国外的服务器后，直接黏贴这条命令就可以安装了</p><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><p>如果出现<code>wget :command not found</code>错误，那么就是你的软件没升级好，使用如下命令进行升级</p><pre class=" language-shell"><code class="language-shell">yum install wget -y </code></pre><p>&emsp;</p><h3 id="锐速支持"><a href="#锐速支持" class="headerlink" title="锐速支持"></a>锐速支持</h3><p>当然一般直接使用SS的话网速是很慢的，要用goole的BBR加速或者是锐速加速，这里我介绍锐速的加速方法</p><h4 id="更换内核"><a href="#更换内核" class="headerlink" title="更换内核"></a>更换内核</h4><p>安装锐速前一般要更换内核，使用如下命令更换内核：</p><pre class=" language-shell"><code class="language-shell">wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh && bash ruisu.sh</code></pre><h4 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a>安装锐速</h4><p>输入完命令之后服务器会自动重启，等到1-3分钟重新连接。连接后执行下面的命令</p><pre class=" language-shell"><code class="language-shell">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh && bash serverspeeder.sh</code></pre><p>如果上面的命令不成功就执行如下备用命令</p><pre class=" language-shell"><code class="language-shell">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh</code></pre><p>然后就大功告成了，可以安心上goole去搜索资料了</p><h3 id="BBR支持"><a href="#BBR支持" class="headerlink" title="BBR支持"></a>BBR支持</h3><blockquote><p>参考博客：<a href="https://www.cnblogs.com/deen-/p/7223376.html" target="_blank" rel="noopener">https://www.cnblogs.com/deen-/p/7223376.html</a></p></blockquote><p>有些服务器是默认自带了BBR加速方法的，内核版本不能再使用锐速加速，如果不能安装锐速也可以使用下BBR，两个加速的速度也差不多，所以这里总结下BBR加速方法</p><h4 id="更换内核-1"><a href="#更换内核-1" class="headerlink" title="更换内核"></a>更换内核</h4><p><strong>首先我们要知道，添加BBR加速支持的最关键的一点是升级我们Linux的内核，只有内核支持这个加速算法，才能使用BBR，步骤如下（按顺序输入命令行即可）</strong></p><ul><li>内核应该是3.x，先升级成4.9或者4.12最新的，支持BBR<ol><li>rpm –import <a href="https://www.elrepo.org/RPM-GPG-KEY-elrepo.org" target="_blank" rel="noopener">https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</a></li><li>rpm -Uvh <a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm" target="_blank" rel="noopener">http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</a></li><li>yum –enablerepo=elrepo-kernel install kernel-ml -y</li></ol></li><li>此时内核已经安装好，但是还要设置开机默认启动的那个内核，我按照教程里面的方法设置，可是并没有成功，于是自己百度了如何设置默认启动内核，可参考链接</li></ul><blockquote><p><a href="http://www.cnblogs.com/niyeshiyoumo/p/6762193.html" target="_blank" rel="noopener">http://www.cnblogs.com/niyeshiyoumo/p/6762193.html</a></p></blockquote><p>照着这篇文章里面的命令，我们的步骤依次是：</p><ol><li>查看可用内核 ： cat /boot/grub2/grub.cfg |grep menuentry</li><li>设置为4.9 以上支持的内核 ：grub2-set-default ‘CentOS Linux (4.12.3-1.el7.elrepo.x86_64) 7 (Core)’</li><li>设置成功则： reboot 重启，接下来就是安装BBR了</li></ol><h4 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h4><ol><li>uname -r 查看内核是否已经支持</li><li>echo ‘net.core.default_qdisc=fq’ | sudo tee -a /etc/sysctl.conf</li><li>echo ‘net.ipv4.tcp_congestion_control=bbr’ | sudo tee -a /etc/sysctl.conf</li><li>sysctl -p</li><li>sysctl net.ipv4.tcp_available_congestion_control</li><li>sysctl -n net.ipv4.tcp_congestion_control</li><li>lsmod | grep bbr</li></ol><p>最后提示bbr则安装成功</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker的安装</title>
      <link href="/2019/10/22/docker-de-an-zhuang/"/>
      <url>/2019/10/22/docker-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h2><blockquote><p>参考文章地址： <a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/introduction/what.html</a> </p><p>docker下载地址：<a href="https://hub.docker.com/?overlay=onboarding" target="_blank" rel="noopener">https://hub.docker.com/?overlay=onboarding</a></p></blockquote><blockquote><p>本篇博客是使用windows系统下的安装的，linux安装更为简单</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>docker</code>相当于一个容器，里面封装了你开发的环境和应用。打个比方来说，我写了一个<code>python</code>项目，但是如果我直接把这个项目放到<code>github</code>上，很多人可能下载下来部署十分的麻烦，甚至可能出现运行不了的情况，最好的方法就是使用我开发的环境去部署这个项目，这个方法是直接而且是最方便的，而<code>docker</code>就帮助了我们实现了这个步骤。我直接打包我的项目环境和应用，直接给你们，你们就可以直接去运行，而且<code>docker</code>是一个沙箱环境，每个不同的应用之间不会有任何的影响。这样就不会出现在我的电脑上可以运行怎么在你的电脑上就出问题的场景了。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;旧版本的<code>docker</code>是基于<code>linux</code>系统的<a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">LXC</a>来实现的，在1.1以后使用自行开发的 <a href="https://github.com/docker/libcontainer" target="_blank" rel="noopener">libcontainer</a> 开发的。<code>docker</code>虽然跟虚拟机的使用目的很相似，但是跟虚拟机有很大的不同。<code>docker</code>和虚拟机本质上都是在虚拟环境上运行，但是<code>docker</code>对比与<code>虚拟机</code>更为轻量。<code>docker</code>是一种操作系统级别的虚拟化技术，能更快的启动、占用更少的内存去运行，你可能要花五分钟去运行一个<code>虚拟机</code>，如果使用的是<code>docker</code>估计也就几秒就事，其他更多的优势随便百度搜索一下都有一大堆详细的说明，这里我就不再更多的赘述。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最重要的一点就是不会再出现这个代码在我的环境没问题，怎么到你的电脑就怎样怎样的，使用<code>docker</code>可以解决大部分开发的问题，总之….总之用他就对了，而且docker社区很丰富，就拿阿里云来说，很多人都把自己部署好的环境放到云平台上供人下载。</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191025115438.png" alt></p><h2 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h2><p>如果你的电脑是<code>win10</code>，那我不建议去下载<code>toolbox</code>版，因为<code>win10</code>自带了<code>Hyper-v</code>的虚拟化，而<code>toolbox</code>版本是通过<code>VirtualBox</code>来建立<code>linux</code>虚拟机，<code>docker</code>下载地址为<a href="https://hub.docker.com/?overlay=onboarding" target="_blank" rel="noopener">https://hub.docker.com/?overlay=onboarding</a></p><p>我试过很多个下载链接地址，但是下载后要么是不能更改下载路径，要么就是一直显示登陆中，唯有这个是最正确的，所以推荐使用这个下载</p><p>下载之后的界面应该是这样的</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101160002.png" alt></p><p>接着最好就是修改存储的路径，不然到时候拉取镜像的时候C盘会炸</p><h2 id="修改默认镜像存储路径"><a href="#修改默认镜像存储路径" class="headerlink" title="修改默认镜像存储路径"></a>修改默认镜像存储路径</h2><p>直接从docker setting里面修改路径即可</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101160618.png" alt></p><p>直接修改disk image location就可以修改镜像存储路径</p><p>如果这个方法还是不管用，那么看以下的三个博客，有很详细的解释</p><blockquote><p> <a href="https://cloud.tencent.com/developer/article/1147265" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1147265</a> </p><p> <a href="https://www.jianshu.com/p/f0738420a3ee" target="_blank" rel="noopener">https://www.jianshu.com/p/f0738420a3ee</a> </p><p> <a href="https://www.cnblogs.com/brock0624/p/9792203.html" target="_blank" rel="noopener">https://www.cnblogs.com/brock0624/p/9792203.html</a> </p></blockquote><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><p>docker默认的镜像拉取是从国外的网站上拉的，所以会很慢，我们可以使用国内的镜像去拉取，可以从阿里云去申请一个独有的镜像加速方式： <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a> </p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191101161320.png" alt></p><p>然后把镜像地址填写到这个框框里面就行了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/2019/10/18/shen-kao-bei-he-qian-kao-bei/"/>
      <url>/2019/10/18/shen-kao-bei-he-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li>浅拷贝是对于一个对象的顶层拷贝</li></ul><p>通俗的理解是：拷贝了引用，并没有拷贝内容</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span>a<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#92188584</span><span class="token comment" spellcheck="true">#92188584</span></code></pre><p>这里就是b只拷贝了a的引用，而不是直接拷贝那个值</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>c<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[11,22,33]</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[11,22,33]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#87652792</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#87206488</span></code></pre><p>两者只是拷贝了值，而不是拷贝引用，c开辟了自己的一个内存空间，但是值和a一样</p><h2 id="copy-copy"><a href="#copy-copy" class="headerlink" title="copy.copy"></a>copy.copy</h2><p><strong>copy.copy在面对可变类型和不可变类型是不同的</strong></p><h3 id="copy-copy面对不可变类型"><a href="#copy-copy面对不可变类型" class="headerlink" title="copy.copy面对不可变类型"></a>copy.copy面对不可变类型</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c1为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>e<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e1为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c2为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e2为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span></code></pre><pre><code>c1为 [[11, 22, 33], [44, 55, 66]]e1为 [[11, 22, 33], [44, 55, 66]]c2为 [[11, 22, 33, 77], [44, 55, 66]]e2为 [[11, 22, 33, 77], [44, 55, 66]]9318524893185248</code></pre><p>copy.copy面对一个不可变类型，直接就是一个浅拷贝</p><h3 id="copy-copy面对可变类型"><a href="#copy-copy面对可变类型" class="headerlink" title="copy.copy面对可变类型"></a>copy.copy面对可变类型</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copya<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c1为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>e<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e1为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c2为'</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e2为'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>c1为 [[11, 22, 33], [44, 55, 66]]e1为 [[11, 22, 33], [44, 55, 66]]c2为 [[11, 22, 33, 77], [44, 55, 66]]e2为 [[11, 22, 33, 77], [44, 55, 66]]8359084083590880</code></pre><p><strong>虽然值是相同的，但是c和e两个内存是不同的。c是把a和b引用组合成一个元组，而e copy了c的引用，就像一个递归一样，e copy了c，c引用了a和b，所以最后也是同样的引用了a和b，所以a和b变化的时候e同样也会变化</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
            <tag> python面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器</title>
      <link href="/2019/10/18/zhuang-shi-qi/"/>
      <url>/2019/10/18/zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰器的概念"><a href="#装饰器的概念" class="headerlink" title="装饰器的概念"></a>装饰器的概念</h2><p>装饰器从理论上讲，就是它可以在让其他函数在不需要做任何代码的变动的前提下增加额外的功能</p><p>这里拿个案例来讲：</p><p>开发公司原本是每个部门都调用同样的一个底层函数，后来要在使用函数前加上一个权限验证代码</p><p>很多人一开始可能都是这样想的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span></code></pre><p>但这种代码违背了<strong>开放封闭原则</strong>，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，<strong>它规定已经实现的功能代码不允许被修改</strong>，但可以被扩展，这个也就是<strong>单例模式</strong>，在不改变别人使用的情况下，在内部写好增加的功能，即：</p><ul><li>封闭：已实现的功能代码块</li><li>开放：对扩展开发</li></ul><p>如果将开放封闭原则应用在上述需求中，那么就不允许在函数 f1 、f2、f3、f4的内部进行修改代码</p><p>根据之前学过的闭包，可以把函数的引用封装进check()函数里面，然后再次调用闭包函数就可以实现每个函数使用前都加上inner函数，代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>f1<span class="token operator">=</span>check<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将f1函数传入check函数里面，然后再去调用</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但是这个代码有很大的问题，也违反了开放封闭原则，就是每个部门都要加上这一行代码<code>f1=check(f1)</code></p><p>所以下面介绍python的特殊写法，也叫做语法糖</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>@check就代替了f1=check(f1)这行代码，这样每个部门都可以像原来的写法那样调用而且又可以加入检察权限函数了</p><h2 id="两个装饰器"><a href="#两个装饰器" class="headerlink" title="两个装饰器"></a>两个装饰器</h2><p>假如有两个装饰器，他</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">makebold</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'&lt;b>'</span><span class="token operator">+</span>fn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/b>'</span>    <span class="token keyword">return</span> wrapped<span class="token keyword">def</span> <span class="token function">makeitalic</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test2--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--2--'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'&lt;i>'</span><span class="token operator">+</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&lt;/i>'</span>    <span class="token keyword">return</span> wrapped@makebold@makeitalic<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'hello world 3'</span>res<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><pre><code>--test2----test1----1----2--test&lt;b&gt;&lt;i&gt;hello world 3&lt;/i&gt;&lt;/b&gt;</code></pre><p><strong>两个装饰器的运行顺序是这样的：python解释器从上往下执行，执行到@makebold，然后返回值还是一个装饰器，然后接着@makeitalic执行,然后makeitalic返回才是一个函数，所以这个顺序是倒着执行的，是test()–&gt;makeitalic()–&gt;makebold()</strong>，调用的时候是从上往下调用，装饰器执行是从下往上执行</p><h2 id="装饰器的执行时间"><a href="#装饰器的执行时间" class="headerlink" title="装饰器的执行时间"></a>装饰器的执行时间</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--执行--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--检查权限--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#输出 --执行--</span></code></pre><p>从上述代码看出，在执行到@check这一行的时候，就已经执行check函数里面的内容了，而不是要等到f1()的时候再去调用</p><h2 id="装饰器对有参数函数进行装饰"><a href="#装饰器对有参数函数进行装饰" class="headerlink" title="装饰器对有参数函数进行装饰"></a>装饰器对有参数函数进行装饰</h2><p>假如在调用函数的时候需要加入参数，就必须在定义的闭包函数里面也要加入对应的形参，不然会无法调用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--执行--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>         func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner@check<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a是%d,b是%d,c是%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span></code></pre><h2 id="带返回值的装饰器"><a href="#带返回值的装饰器" class="headerlink" title="带返回值的装饰器"></a>带返回值的装饰器</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token operator">=</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">return</span> inner@func<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'23333'</span>ret<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回值是%s'</span><span class="token operator">%</span>ret<span class="token punctuation">)</span></code></pre><pre><code>--test--返回值是23333</code></pre><p>定义返回值也要在闭包函数里面添加相对应的返回值</p><h2 id="有参数的装饰器"><a href="#有参数的装饰器" class="headerlink" title="有参数的装饰器"></a>有参数的装饰器</h2><p>在开发中会出现一个外部变量，如@装饰器名字(‘变量’)的形式，此时就需要多一个闭包函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_args</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arg<span class="token operator">==</span><span class="token string">'2333'</span><span class="token punctuation">:</span>                function<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">return</span> inner    <span class="token keyword">return</span> func@func_args<span class="token punctuation">(</span><span class="token string">'2333'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果 --test--</span></code></pre><p>这样就可以想对什么进行装饰就对什么进行装饰了</p><h2 id="用类当做装饰器进行装饰"><a href="#用类当做装饰器进行装饰" class="headerlink" title="用类当做装饰器进行装饰"></a>用类当做装饰器进行装饰</h2><p>在讲这个之前要懂一个方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>t<span class="token operator">=</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这样直接调用的话会导致<code>TypeError: &#39;Test&#39; object is not callable</code>错误，所以要在类中声明<code>__call__</code>方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>t<span class="token operator">=</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#--test--</span></code></pre><p>这样子就可以运行了</p><p>使用类装饰器的形式是这样子的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'初始化'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数的名字为%s'</span><span class="token operator">%</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__func<span class="token operator">=</span>func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--装饰器的功能--'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__func@Test<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--test--'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高阶函数</title>
      <link href="/2019/10/18/gao-jie-han-shu/"/>
      <url>/2019/10/18/gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h2><p><strong>简单的说就是过滤函数</strong></p><p>filter()是python内置的高阶函数，filter()函数接收一个函数 f 和一list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</p><pre class=" language-python"><code class="language-python"> filter<span class="token punctuation">(</span>function <span class="token operator">or</span> None<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> <span class="token operator">or</span> string</code></pre><ul><li>function:接受一个参数，返回布尔值True或False</li><li>sequence:序列可以是str，tuple，list</li></ul><p>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为<strong>True</strong>的元素。</p><p>返回值的类型和参数sequence的类型相同</p><p>这里拿个案例说明这个函数</p><pre class=" language-python"><code class="language-python">filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#在python中，非0为True</span><span class="token comment" spellcheck="true">#1作为x，1%2=1为True。</span><span class="token comment" spellcheck="true">#2作为x,2%2=0为Fasle。</span><span class="token comment" spellcheck="true">#3作为x，3%2=1为True</span><span class="token comment" spellcheck="true">#4作为x,4%2=0为Fasle</span>filter<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">"she"</span><span class="token punctuation">)</span><span class="token string">'she'</span></code></pre><p>其他案例如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果[1, 7, 9, 17]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除空字符串</span><span class="token keyword">def</span> <span class="token function">is_not_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">and</span> len<span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span>filter<span class="token punctuation">(</span>is_not_empty<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">'END'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果['test', 'str', 'END']</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#返回1-100的所有的平方根为整数的数</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">is_sqr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token operator">*</span>r<span class="token operator">==</span>x<span class="token keyword">print</span> filter<span class="token punctuation">(</span>is_sqr<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h2><p><strong>map函数会根据提供的函数对指定序列做映射</strong></p><p><strong>map()函数是python内置的高阶函数，可以把一个 list 转换为另一个 list，只需要传入转换函数</strong></p><pre class=" language-python"><code class="language-python">map<span class="token punctuation">(</span>function<span class="token punctuation">,</span> sequence<span class="token punctuation">[</span><span class="token punctuation">,</span> sequence<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> list</code></pre><ul><li>function:是一个函数</li><li>sequence:是一个或多个序列,取决于function需要几个参数</li><li>返回值是一个list</li></ul><p>案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#函数需要一个参数</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里就是把1作为x，然后拿x平方</span><span class="token comment" spellcheck="true">#2作为x，然后拿x去平方</span><span class="token comment" spellcheck="true">#3作为x，然后拿3去平方。</span><span class="token comment" spellcheck="true">#所以结果为:[1, 4, 9]</span><span class="token comment" spellcheck="true">#函数需要两个参数</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#取出1和4，然后拿1和4相加。</span><span class="token comment" spellcheck="true">#取出2和5，然后拿2和5相加。</span><span class="token comment" spellcheck="true">#取出3和6，然后拿3和6相加。</span><span class="token comment" spellcheck="true">#结果为:[5, 7, 9]</span><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span>  l2 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'Sun'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'S'</span> <span class="token punctuation">]</span>l3 <span class="token operator">=</span> map<span class="token punctuation">(</span> f1<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果为:[(0, 'Sun'), (1, 'M'), (2, 'T'), (3, 'W'), (4, 'T'), (5, 'F'), (6, 'S')]</span></code></pre><p>其余案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把[1, 2, 3, 4, 5, 6, 7, 8, 9]每个都平方</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token keyword">print</span> map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把首字母大写，其余的小写</span><span class="token keyword">def</span> <span class="token function">format_name</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> map<span class="token punctuation">(</span>format_name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'adam'</span><span class="token punctuation">,</span> <span class="token string">'LISA'</span><span class="token punctuation">,</span> <span class="token string">'barT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></pre><p>&emsp;</p><h2 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h2><p><strong>reduce是一个累积函数</strong></p><p>reduce()函数是python的一个高阶计算函数，会对list的里面的每个元素不断的调用，方法和map函数类似，但是reduce接入的参数可以为两个或者三个</p><pre class=" language-python"><code class="language-python">reduce<span class="token punctuation">(</span>function<span class="token punctuation">,</span> sequence<span class="token punctuation">[</span><span class="token punctuation">,</span> initial<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> value</code></pre><ul><li>function:该函数有两个参数</li><li>sequence:序列可以是str，tuple，list</li><li>initial:固定初始值</li></ul><p>reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。 第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial 作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。 注意function函数不能为None。</p><p>案例如下：</p><pre class=" language-python"><code class="language-python">reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#10</span><span class="token comment" spellcheck="true">#1作为x，2作为y，x+y=1+2=3，然后把得出的3赋值给x，把列表的3赋值给y，3+3=6，然后把6赋值给x，4赋值给y，x+y=10，得出最后结果为10</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#15</span><span class="token comment" spellcheck="true">#这里多加个5的意思是把5作为初始值x</span><span class="token comment" spellcheck="true">#5作为x，从列表中取1作为y,5+1=6，6作为x，x作为y，6+2=8，8作为x，3组我诶y，8+3=11，11作为x，4作为y，11+4=15,得出最后的结果为15</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'dd'</span><span class="token punctuation">)</span><span class="token string">'ddaabbcc'</span><span class="token comment" spellcheck="true">#原理和上面的一样</span></code></pre><p>其余案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> yreduce<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>结果为25过程如下：先计算头两个元素：f(1, 3)，结果为4；再把结果和第3个元素计算：f(4, 5)，结果为9；再把结果和第4个元素计算：f(9, 7)，结果为16；再把结果和第5个元素计算：f(16, 9)，结果为25；由于没有更多的元素了，计算结束，返回结果25。</code></pre><p>&emsp;</p><h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h2><p><strong>sorted是一个搜索函数</strong></p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> cmp<span class="token operator">=</span>None<span class="token punctuation">,</span> key<span class="token operator">=</span>None<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> new sorted list</code></pre><p><strong>sorted()</strong>函数是python的一个高阶函数，可以接受函数来实现自定义排序，<strong>sorted()</strong>函数与<strong>sort</strong>函数是有一定区别的，比如</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Credit', 'Zoo', 'about', 'bob']</span><span class="token comment" spellcheck="true">#此时需要忽略大小写sort函数是不足以完成的</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用sorted函数</span><span class="token keyword">def</span> <span class="token function">cmp_ignore_case</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    u1 <span class="token operator">=</span> s1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    u2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> u1 <span class="token operator">&lt;</span> u2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> u1 <span class="token operator">></span> u2<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">print</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmp_ignore_case<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['about', 'bob', 'Credit', 'Zoo']</span></code></pre><p>sorted()函数也可以对数字进行排序，<strong>如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0</strong></p><p>假如要实现数字的倒序排序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reversed_cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">></span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">0</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reversed_cmp<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[36, 21, 12, 9, 5]</span></code></pre><p>假如要实现字符串的ASCII大小排序</p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Credit', 'Zoo', 'about', 'bob']</span></code></pre><p>但是一般的排序的话使用sort足够了，除非要自定义排序才用sorted</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>enumerate函数</title>
      <link href="/2019/10/18/enumerate/"/>
      <url>/2019/10/18/enumerate/</url>
      
        <content type="html"><![CDATA[<h2 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate() 函数"></a>enumerate() 函数</h2><p><strong>enumerate() 函数</strong>可以使得列表添加索引</p><p>比如</p><pre class=" language-python"><code class="language-python"> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token string">'Paul'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span> name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name<span class="token comment" spellcheck="true">#0 - Adam</span><span class="token comment" spellcheck="true">#1 - Lisa</span><span class="token comment" spellcheck="true">#2 - Bart</span><span class="token comment" spellcheck="true">#3 - Paul</span></code></pre><p>这个函数实际上原理是把<strong>[‘Adam’, ‘Lisa’, ‘Bart’, ‘Paul’]</strong>转换成了<strong>[(0, ‘Adam’), (1, ‘Lisa’), (2, ‘Bart’), (3, ‘Paul’)]</strong></p><p>每一次迭代都是一个元组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> t <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name</code></pre><p>所以就可以简写为</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> index<span class="token punctuation">,</span> name <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> index<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> name</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python闭包</title>
      <link href="/2019/10/18/bi-bao/"/>
      <url>/2019/10/18/bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h2><p><strong>闭包的作用通俗的来说就是强调，闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性</strong></p><p>闭包的基本形式如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demoA</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        使用demoA的变量    <span class="token keyword">return</span> demoB<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demoA</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--1--'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demoB</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--2--'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'demoA形参是'</span><span class="token punctuation">,</span>number<span class="token punctuation">,</span><span class="token string">'demoB传入的形参是'</span><span class="token punctuation">,</span>number2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--3--'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> demoBres<span class="token operator">=</span>demoA<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>res<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></code></pre><pre><code>--1----3----2--demoA形参是 100 demoB传入的形参是 200</code></pre><p>从上面的案例看出，在调用完demoA的时候，并没有把demoA销毁，返回值保存了demoB的引用，所以demoB里面还保存着demoA传入的变量</p><p>这里再拿个案例来说明，拿一个数学的二元函数来打比方<code>y=ax^2+b</code>,假如a和b是确定变量，只需要调x的参数，就可以使用闭包的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">line_conf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>x <span class="token operator">+</span> b    <span class="token keyword">return</span> lineline1 <span class="token operator">=</span> line_conf<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>line2 <span class="token operator">=</span> line_conf<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>line1<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>line2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果拿函数定义的方法来解决的话，就要不断的输入3个参数，这样显得更麻烦，所以闭包在一定程度上提高了代码复用率</p><h2 id="闭包弊端"><a href="#闭包弊端" class="headerlink" title="闭包弊端"></a>闭包弊端</h2><pre><code>1.闭包似优化了变量，原来需要类对象完成的工作，闭包也可以完成2.由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，会导致内存消耗很大，在一定程度上会影响性能</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python匿名函数</title>
      <link href="/2019/10/18/ni-ming-han-shu/"/>
      <url>/2019/10/18/ni-ming-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="匿名函数概念"><a href="#匿名函数概念" class="headerlink" title="匿名函数概念"></a>匿名函数概念</h2><p>有些时候我们使用函数的时候不一定要显示的定义函数，可以直接传输匿名函数来定义</p><p>案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算所有数的平方</span><span class="token keyword">print</span><span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span></code></pre><p>上面的这个匿名函数实际上是</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x</code></pre><p><strong>关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数。</strong></p><p><strong>匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#假如要对字典的名字进行排序，一般的sort函数是无法完成这个任务的，此时就可以用到匿名函数</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"ly"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zz"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[{'name': 'aa', 'age': 22}, {'name': 'ly', 'age': 21}, {'name': 'zz', 'age': 19}]</span><span class="token comment" spellcheck="true">#第一个x是遍历列表的三个字典，第二个x是把字典里面的'name'这个变量取出来，所以相当于key='name'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#倒叙排序列表</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> <span class="token operator">-</span>cmp<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[9, 5, 3, 1, 0]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#把数值转换为正数</span>myabs <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">else</span> x myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>myabs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#比如要简化filter()的示例代码</span><span class="token comment" spellcheck="true">#def is_not_empty(s):</span><span class="token comment" spellcheck="true">#    return s and len(s.strip()) > 0</span><span class="token comment" spellcheck="true">#filter(is_not_empty, ['test', None, '', 'str', '  ', #'END'])</span><span class="token keyword">print</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">and</span> len<span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">'END'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结果</span><span class="token comment" spellcheck="true">#['test', 'str', 'END']</span></code></pre><h2 id="匿名函数小应用"><a href="#匿名函数小应用" class="headerlink" title="匿名函数小应用"></a>匿名函数小应用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>func<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> resultnum<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span></code></pre><p>这样就可以自定义想要实现的函数了</p><h2 id="匿名函数面试题"><a href="#匿名函数面试题" class="headerlink" title="匿名函数面试题"></a>匿名函数面试题</h2><p><strong>只用一行代码就对字典的age进行排序</strong></p><p><code>a=[{&quot;name&quot;:&quot;ly&quot;,&quot;age&quot;:21},{&quot;name&quot;:&quot;aa&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;zz&quot;,&quot;age&quot;:19}]</code></p><p>答案：</p><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"ly"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zz"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><strong>对字典 d={‘a’:27，‘f’:42，‘w’:12，‘u’:37} 中的 value 值进行排序？</strong></p><p>答案：</p><pre class=" language-python"><code class="language-python">sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>，key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </code></pre><blockquote><p>这里留个坑，等我到时候拿更多的面试题来详细讲解匿名函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>collections模块</title>
      <link href="/2019/10/17/collections-mo-kuai/"/>
      <url>/2019/10/17/collections-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> ChainMapuser_dict1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span>user_dict2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span>new_dict<span class="token operator">=</span>ChainMap<span class="token punctuation">(</span>user_dict1<span class="token punctuation">,</span>user_dict2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_dict<span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token punctuation">,</span>values <span class="token keyword">in</span> new_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>values<span class="token punctuation">)</span></code></pre><p>就是合并两个字典</p><p>&emsp;</p><h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p>Counter是一个统计数量的方法，方法比defaultdict来实现要简单的多</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> CounterUsers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>user<span class="token operator">=</span>Counter<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></code></pre><p>甚至可以直接选择出前几个排名的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> CounterUsers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>user<span class="token operator">=</span>Counter<span class="token punctuation">(</span>Users<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这些方法要自己从头实现是非常的麻烦的，这个是使用了堆的数据结构，比自己用遍历的方法实现性能是高很多的 </p><p>&emsp;</p><h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p>如果要对一个列表的数进行统计</p><pre class=" language-python"><code class="language-python">userdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">]</span><span class="token keyword">for</span> user <span class="token keyword">in</span> Users<span class="token punctuation">:</span>    <span class="token keyword">if</span> user <span class="token operator">not</span> <span class="token keyword">in</span> userdict<span class="token punctuation">:</span>        userdict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        userdict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>userdict<span class="token punctuation">)</span></code></pre><p>这样写可以，但是如果逻辑一多，代码可读性就差</p><pre class=" language-python"><code class="language-python">userdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Users<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">]</span><span class="token keyword">for</span> user <span class="token keyword">in</span> Users<span class="token punctuation">:</span>    userdict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    userdict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>userdict<span class="token punctuation">)</span></code></pre><p>这里的setdefault代码比上面的少，性能还比第一个高，因为少了一次判断</p><p>如果使用defaultdict的方法会更好 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictUsers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY1'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">,</span><span class="token string">'LY2'</span><span class="token punctuation">]</span>default_dict <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token keyword">for</span> user <span class="token keyword">in</span> Users<span class="token punctuation">:</span>    default_dict<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>default_dict<span class="token punctuation">)</span></code></pre><p>如果没有赋值就看defaultdict传入的可调用对象，如果是整数就为0，如果为字符串就为空，而不是抛出异常</p><p>当然这个方法的默认值是可以改变的，但不是直接传一个变量进去，而是定义一个函数，函数的返回值是调用默认对象组合的数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"nums"</span><span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span>default_dict<span class="token operator">=</span>defaultdict<span class="token punctuation">(</span>test<span class="token punctuation">)</span>default_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span></code></pre><p>&emsp;</p><h2 id="dqeue双端队列"><a href="#dqeue双端队列" class="headerlink" title="dqeue双端队列"></a>dqeue双端队列</h2><p>以前我们数据结构都可能append等方法，而双端队列就是两边都可以进行的操作</p><pre><code>from collections import dequeuserlist=deque([&quot;LY&quot;,&quot;LY2&quot;])userlist.appendleft(&quot;1&quot;)print(userlist)</code></pre><p>&emsp;</p><h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h2><p>在类中，可以有如下形式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>age<span class="token operator">=</span>ageuser <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ly'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><p>可以用<code>.属性名</code>的形式表示出来，字面意思清晰明了</p><p>在namedtuple中，也可以定义一个类的形式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleUser<span class="token operator">=</span>namedtuple<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>user<span class="token operator">=</span>User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ly"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><p>两者形式是差不多完全一样的，那么区别是什么呢</p><p>在类中，定义一个类需要耗费的内存相对于namedtuple是比较大的，class会内置很多对象，而namedtuple就单单只是一个存储数据的数据结构</p><p>其余的方法可以直接看源码来找方法</p><p>&emsp;</p><h2 id="OrderDict"><a href="#OrderDict" class="headerlink" title="OrderDict"></a>OrderDict</h2><p>在python3中，使用dict和OrderDict结果是一样的，顺序都为自己添加时候的顺序</p><p>而在python2中，使用dict添加的顺序是排序好的，而OrderDict才是自己添加的</p><pre><code>from collections import OrderedDictuser_dict = OrderedDict()user_dict[&quot;b&quot;]=&quot;test1&quot;user_dict[&quot;a&quot;]=&quot;test2&quot;user_dict[&quot;c&quot;]=&quot;test3&quot;print(user_dict)</code></pre><p>其余方法都在源码中有说明</p><p>&emsp;</p><h2 id="补充：为什么tuple会比list好"><a href="#补充：为什么tuple会比list好" class="headerlink" title="补充：为什么tuple会比list好"></a>补充：为什么tuple会比list好</h2><p><strong>性能优化</strong></p><p>元素全为不可变对象的时候，编译出来的pyc，也就是python的字节码是很确定的，所以加载的速度要比一般的快</p><p><strong>线程安全</strong></p><p>可以作为dict的key，因为元组是可哈希对象</p><p><strong>拆包特性</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天生鲜项目总结（二）</title>
      <link href="/2019/10/16/tian-tian-sheng-xian-zong-jie-er/"/>
      <url>/2019/10/16/tian-tian-sheng-xian-zong-jie-er/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Redis作为Django的缓存来存储用户登录状态"><a href="#使用Redis作为Django的缓存来存储用户登录状态" class="headerlink" title="使用Redis作为Django的缓存来存储用户登录状态"></a>使用Redis作为Django的缓存来存储用户登录状态</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常网站用的都是session和cookie作为记录用户信息的存储，Django默认是把session存储在数据库中，每一次用户使用网站，都要从数据库从读取session，但是直接读取数据库的速度是比较慢的。其次，网站如果每次用户访问都是从数据库进行读取，那么对服务器的压力也是不小的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在小网站可以这样子做，如果大型网站人流量一大，每一个人访问网站都会对数据库进行一次读取，对服务器是个不小的压力，而如果使用Redis作为缓存存储数据就不会出现这类问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Django使用Redis作为缓存的使用手册如下：<a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://django-redis-chs.readthedocs.io/zh_CN/latest/</a>，这里只简述使用方法:</p><p>安装Django-redis</p><pre class=" language-python"><code class="language-python">pip install django<span class="token operator">-</span>redis</code></pre><p>然后在setting文件里面添加配置项</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Django的缓存配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>        <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379/9"</span><span class="token punctuation">,</span>        <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;</p><p>其次Django默认的存储方式有如下三种：</p><ol><li><p>存储在数据库中，如下设置可以写，也可以不写，这是默认存储方式</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.db'</span></code></pre><p>Django默认的存储方式就是在数据中存储，所以在<code>setting</code>字段里面有个</p><pre class=" language-python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p>在使用命令<code>migrate</code>和<code>makemigrations</code>后在数据库就会生成一个django_session字段，如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571198881213.png" alt></p></li><li><p>存储在缓存中：存储在本机内存中，如果丢失则不能找回，比数据库的方式读写更快</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.cache'</span></code></pre></li><li><p>混合存储：优先从本机内存中存取，如果没有则从数据库中存取。</p><pre class=" language-python"><code class="language-python"> SESSION_ENGINE<span class="token operator">=</span><span class="token string">'django.contrib.sessions.backends.cached_db'</span></code></pre></li></ol><p>&emsp;</p><p>项目需要的是把redis缓存替换默认方法，依照官方文档的方法：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571199075048.png" alt></p><p>在setting里面添加如下两个字段：</p><pre class=" language-python"><code class="language-python">SESSION_ENGINE <span class="token operator">=</span> <span class="token string">"django.contrib.sessions.backends.cache"</span>SESSION_CACHE_ALIAS <span class="token operator">=</span> <span class="token string">"default"</span></code></pre><p>这样就可以完成使用Redis来存储session了</p><p>&emsp;</p><h2 id="个人中心页面登陆限制"><a href="#个人中心页面登陆限制" class="headerlink" title="个人中心页面登陆限制"></a>个人中心页面登陆限制</h2><p>按照逻辑来说，个人中心的信息在没登录的时候即使输入了URL地址也是直接跳转到登陆信息的，当登陆完成之后再返回登陆之前访问的页面。本项目就按照这个逻辑去写。</p><p>Django有一套验证系统，可以记录用户访问前的地址和可以让登陆后再返回之前访问的地址</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571214022489.png" alt></p><p>上述验证方法有两个方法可以实现：</p><h3 id="方法一：在路由里面添加"><a href="#方法一：在路由里面添加" class="headerlink" title="方法一：在路由里面添加"></a>方法一：在路由里面添加</h3><p>在每个单独的包的路由里面设置一个<code>login_required</code>，如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571214344034.png" alt></p><p>配置完之后，紧接着要在setting里面添加你的登陆地址，当访问个人中心页面自动跳转到登陆页面</p><pre class=" language-python"><code class="language-python">LOGIN_URL <span class="token operator">=</span> <span class="token string">'/login'</span></code></pre><p>重启项目，输入地址栏访问个人中心查看</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571215011716.png" alt></p><p>最重要的一步来了，就是表单继续提交的时候会发现情况不对，返回的还是首页页面，这个原因是因为form表单action提交的还是原来的地址，这里注意要删掉action字段，因为form表单如果不加上action就是提交到url地址的那栏，也就是<code>127.0.0.1:8000/user/login?next=/user/</code>，这个时候我们就要去修改登陆的方法类，也就是post请求要修改一下</p><p>这是我原来的代码：</p><pre class=" language-python"><code class="language-python">login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#在登陆成功之后跳转到首页</span><span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>127.0.0.1:8000/user/login?next=/user/</code>这个地址一看就是get方法请求的，我们直接在Request里面获取即可</p><pre class=" language-python"><code class="language-python">login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span>next_url<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果拿不到next，就默认赋值为goods:index，也就是默认跳转到首页</span>response<span class="token operator">=</span>redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> response<span class="token comment" spellcheck="true">#这里我修改了下我的写法，原理是一样的，都是跳转到要响应的页面</span></code></pre><p>经过上述配置，就可以完成开头所说的逻辑了</p><p>&emsp;</p><h3 id="方法二：使用LoginRequiredMixin类"><a href="#方法二：使用LoginRequiredMixin类" class="headerlink" title="方法二：使用LoginRequiredMixin类"></a>方法二：使用LoginRequiredMixin类</h3><p>在方法一里面，虽然是可以完成逻辑上的方法，但是这样未免很麻烦，每需要一个要限制登陆的页面，都要在路由里面添加限制，一两个无所谓，但是如果很多歌页面都需要限制登陆那未免就显得十分的麻烦。对于这种情况，我们应该封装在一个类里面做而不是在路由里面写。详细实现方法如下：</p><p>&emsp;</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571216461437.png" alt="官方文档"></p><p>官方文档写的也是十分的详细，虽然是全英文<del>~</del>整体而言方法是定义一个类，在类里面进行判断即可</p><p>对于这种对于全局都有作用的函数我封装到一个<code>utils</code>的文件夹里，并且取名为<code>Mixin.py</code></p><p>我们自定义一个类，类名我取名为<code>LoginRequiredMixin</code></p><p>先点击ctrl+as_view()查看类的实现方法</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571216810096.png" alt></p><p>这个方法我看了看，使用的是类方法来执行的</p><p>不管他，我直接copy过来</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">class</span> <span class="token class-name">LoginRequiredMixin</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>然后继承父类的方法，完整的代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> login_required<span class="token keyword">class</span> <span class="token class-name">LoginRequiredMixin</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">**</span>initkwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        view <span class="token operator">=</span> super<span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token operator">**</span>initkwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> login_required<span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这样我就可以定义一个是否需要被限制登陆的类了</span></code></pre><p>然后在定义个人中心、订单、地址的类方法中继承这个方法即可，详情如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserInfoView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">UserOrderView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">UserAddressView</span><span class="token punctuation">(</span>LoginRequiredMixin<span class="token punctuation">,</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>这样就可以实现更为简便的方法了</p><p>这个方法的原理还是跟方法一一模一样的，<code>return login_required(view)</code>还是在view外面包装了一个<code>login_required</code>，只是这样写会没那么乱</p><p>&emsp;</p><h2 id="添加用户历史浏览记录"><a href="#添加用户历史浏览记录" class="headerlink" title="添加用户历史浏览记录"></a>添加用户历史浏览记录</h2><p>添加用户历史浏览记录我这里使用的是<code>hash</code>数据结构存储。依照逻辑来说，能记录用户浏览记录肯定是要先登录的，所以要先对用户判断是否登陆，具体代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 用户已经登录</span>conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>cart_key <span class="token operator">=</span> <span class="token string">'cart_%d'</span> <span class="token operator">%</span> user<span class="token punctuation">.</span>id<span class="token comment" spellcheck="true"># 获取用户购物车中的商品条目数</span>cart_count <span class="token operator">=</span> conn<span class="token punctuation">.</span>hlen<span class="token punctuation">(</span>cart_key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># hlen hash中的数目</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>cart_count<span class="token operator">=</span>cart_count<span class="token punctuation">)</span></code></pre><h2 id="显示历史浏览记录"><a href="#显示历史浏览记录" class="headerlink" title="显示历史浏览记录"></a>显示历史浏览记录</h2><p>每次访问商品详情页的时候，都会使用Redis的list数据结构去保存用户浏览信息，在获取浏览记录的时候 使用<code>lrange key start stop</code>就可以自定义取多少条数据，假如要取A1的所有数据：<code>lrange A1 0 -1</code></p><p>根据Django-redis的官方文档显示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232502432.png" alt></p><p>这里面的<code>default</code>就是之前配置的字段，如图所示</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232579990.png" alt></p><p>在连接redis数据库之后，在数据字段里面显示前五个商品信息</p><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>history_key<span class="token operator">=</span><span class="token string">'history_%d'</span><span class="token operator">%</span>user<span class="token punctuation">.</span>idsku_ids<span class="token operator">=</span>con<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>history_key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>goods_li<span class="token operator">=</span>GoodSKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__in<span class="token operator">=</span>sku_ids<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用两层列表的原因是因为输入[2,1,3]，在mysql得出的结果顺序依然为1，2，3，所以只能用两层循环去遍历</span>goods_res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> a_id <span class="token keyword">in</span> sku_ids<span class="token punctuation">:</span>    <span class="token keyword">for</span> goods <span class="token keyword">in</span> goods_li<span class="token punctuation">:</span>        <span class="token keyword">if</span> a_id<span class="token operator">==</span>goods<span class="token punctuation">.</span>id<span class="token punctuation">:</span>            goods_res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>goods<span class="token punctuation">)</span></code></pre><h2 id="后台自定义使用FastDFS存储资源"><a href="#后台自定义使用FastDFS存储资源" class="headerlink" title="后台自定义使用FastDFS存储资源"></a>后台自定义使用FastDFS存储资源</h2><p>Django默认保存资源是保存在Media_root指定目录下方，现在我这个项目要改成FastDFS服务器上，所以这里要修改文件的默认存储路径，这里还是直接查看Django文档</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571232579990.png" alt></p><p>也就是说Django保存文件使用的是<code>FileSystemStorage</code>这个类，其中save方法实现了保存</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571233304579.png" alt></p><p>但是我们不能直接去修改源码，所以Django内置好了一套给我们自己去定义的存储类，我们只需要去继承<code>FileSystemStorage</code>的父类<code>Storage</code>就可以，继承<code>Storage</code>还必须要实现save和open方法，这里保存图片只需要实现save方法即可</p><p>同样我自定义存储类的方法卸载一个单独的文件夹下，这里我定义在utils里面的FastDFS文件夹下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571235260232.png" alt></p><p>里面的蓝色的<code>storage</code>就是自定义的文件，<code>client.conf</code>是我FasDFS的配置文件，基本上的功能，上传图片资源的模块我都已经写好了，直接修改自己的服务器IP就可以经行第二次开发</p><h2 id="页面资源静态化"><a href="#页面资源静态化" class="headerlink" title="页面资源静态化"></a>页面资源静态化</h2><p>在网站中，无论用户是否登陆都显示同一个页面，而如果人流量访问的越多，每个人访问都从数据库调用一遍就是一个非常伤服务器的操作，所以要把网站的常用页面给静态化。这里用的还是Celery去异步操作，具体的操作代码上的注释写的很详细，我这里只讲解我对这个问题的解决方案。</p><p>&emsp;</p><p>Django默认的后台<code>admin</code>是有一个<code>save_model</code>方法，也就是新增或更新数据时会自动调用，而我这个项目使用的是<code>xadmin</code>，不能直接调用<code>admin</code>的方法，依照网上博客的方法也不行，又不能去改写源代码，所以我想了个办法：在每次<code>return</code>返回给<code>index.html</code>数据的前，我都会先写一个缓存，这个缓存保存了返回给前端的数据，如果第二次访问的时候发现缓存改变了就给异步发送请求重新加载静态页面，如果没有改变就只进行一次对比之后返回静态页面，关键代码如下：</p><pre class=" language-python"><code class="language-python"> context <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'types'</span><span class="token punctuation">:</span> types<span class="token punctuation">,</span>            <span class="token string">'index_banner'</span><span class="token punctuation">:</span> index_banner<span class="token punctuation">,</span>            <span class="token string">'promotion_banner'</span><span class="token punctuation">:</span> promotion_banner<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> context <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置缓存数据,缓存的名字，内容，过期的时间</span>            cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'index_page_data'</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> context<span class="token operator">!=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'index_html_data'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            generate_static_index_html<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>分页这个其实官方文档说的比较清楚了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571237664233.png" alt></p><p>初次之外还有一个方法，在github上start也有几百了，地址如下：<a href="https://github.com/jamespacileo/django-pure-pagination" target="_blank" rel="noopener">https://github.com/jamespacileo/django-pure-pagination</a></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571237740809.png" alt></p><p>这个功能也是比较完善的，还具备前一页后一页的功能，最重要的是还带有省略号的功能，而且使用起来也挺简单的，不过这里因为我的图片资源本来就少，用不着折腾这个所以就没用</p><h2 id="商品搜索"><a href="#商品搜索" class="headerlink" title="商品搜索"></a>商品搜索</h2><p>在商品搜索功能上，Django有一个全文检索框架<code>haystack</code>，开发者可以通过全文检索框架去使用搜索引擎,<code>haystack</code>支持whoosh、solr、Xapian、Elasticsearch四种全文检索引擎</p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>首先先安装<code>haystack</code></p><pre class=" language-python"><code class="language-python">pip install django<span class="token operator">-</span>haystack<span class="token comment" spellcheck="true">#你要用哪个搜索引擎就下载哪个，我这里用的是whoosh</span>pip install whoosh</code></pre><p>然后在setting的INSTALLED_APPS添加<code>haystack</code>，紧接着要在setting里面添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全文检索框架配置</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 使用whoosh引擎</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.whoosh_backend.WhooshEngine'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 索引文件路径</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 当添加、修改、删除数据时，自动生成索引</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><h3 id="配置索引文件"><a href="#配置索引文件" class="headerlink" title="配置索引文件"></a>配置索引文件</h3><p>在你需要被检索的包里面新建一个<code>search_indexes.py</code>文件，里面需要你配置的只有三个地方，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token comment" spellcheck="true">#第一个地方，导入你的模型类</span><span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU<span class="token comment" spellcheck="true">#第二个地方：索引类的格式名：模型类+Index</span><span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#索引字段document=True指定根据表的哪些字段简历索引文件制定在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author = indexes.CharField(model_attr='user')</span>    <span class="token comment" spellcheck="true"># pub_date = indexes.DateTimeField(model_attr='pub_date')</span><span class="token comment" spellcheck="true">#第三个地方：返回你的模型类</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> GoodsSKU    <span class="token comment" spellcheck="true"># 建立索引数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回所有数据就是对所有的数据进行索引</span></code></pre><p>配置完上面的字段后，需要自定义需要被检索的字段，格式为<code>模型类名的小写_text.txt</code>，比如我的是<code>GoodsSKU</code>，格式就为<code>goodssku_text.txt</code>,这个文件建立的地方是有要求的，比如我这里的形式如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571240232653.png" alt></p><p>search和indexes是固定的，goods是你的应用名字就是什么名字。<code>goodssku_text.txt</code>里面填写你要索引的字段，我的如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 指定根据表中的哪些字段建立索引数据</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的名称建立索引</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>desc <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的简介建立索引</span><span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>goods<span class="token punctuation">.</span>detail <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 根据商品的详情建立索引</span></code></pre><p>然后使用python shell命令<code>python manage.py rebuild_index</code>就可以生成你的索引文件</p><h3 id="搜索的页面"><a href="#搜索的页面" class="headerlink" title="搜索的页面"></a>搜索的页面</h3><p>搜索地址框搜索出来的页面也是单独设定的，首先搜索框的action的地址应该改为<code>&lt;form method=&#39;get&#39; action=&#39;/search&#39;&gt;</code></p><p>这里的action写什么，url地址那里就写什么，我的是search，所以url地址就是search</p><p>然后在全局的url地址那里添加<code>url(&#39;search/&#39;, include(&#39;haystack.urls&#39;)),  # 全文检索框架</code></p><p>最后要写一个搜索后出现的页面，搜索的页面要在indexes文件夹下，新建的搜索页面名字为<code>search.html</code>,里面关键展示部分的数据如下：</p><pre class=" language-python"><code class="language-python">搜索的关键字： <span class="token punctuation">{</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>当前页的Page对象： <span class="token punctuation">{</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> page <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>object <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>分页Paginator对象<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> paginator <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span></code></pre><p>自己去定义一个搜索后的页面，显示部分改成如上关键词就可以了</p><h3 id="使用jieba进行分词处理"><a href="#使用jieba进行分词处理" class="headerlink" title="使用jieba进行分词处理"></a>使用jieba进行分词处理</h3><p>我们汉语向来都是博大精深，不像英语一个单词就是一个意思，所以我们可以使用jieba包去对搜索的文字进行分词处理</p><p>首先先安装jieba分词</p><pre class=" language-python"><code class="language-python">pip install jieba</code></pre><p>然后去找haystack的源码目录</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/1571242333996.png" alt></p><p>创建一个<code>ChineseAnalyzer.py</code>文件，输入以下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">yield</span> t<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个代码其实就是对搜索框输入的字符串进行jieba分词处理</p><p>然后复制<code>whoosh_backend.py</code>文件为<code>whoose_cn_backend.py</code>，因为最好不要去修改源码</p><p>在新的文件<code>whoose_cn_backend.py</code>修改一些字段：</p><pre><code>#第一处要导入刚刚的jieba分词的包from .ChineseAnalyzer import ChineseAnalyzer第164行改成 TEXT(stored=True, analyzer=ChineseAnalyzer()</code></pre><p>最后修改setting的<code>&#39;ENGINE&#39;: &#39;haystack.backends.whoosh_backend.WhooshEngine&#39;</code>改为<code>&#39;ENGINE&#39;:&#39;haystack.backends.whoosh_cn_backend.WhooshEngine&#39;</code></p><p>最后执行python shell命令`python manage.py rebuild_index重新生成索引文件就可以jieba分词搜索了</p><h2 id="订单并发"><a href="#订单并发" class="headerlink" title="订单并发"></a>订单并发</h2><p>在Django的订单页面，处理订单的高并发处理有两种方法，一种叫悲观锁，另一种叫乐观锁</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>当查询某条记录时，即让数据库为该记录加锁，锁住记录后别人无法操作，使用类似如下语法</p><pre class=" language-python"><code class="language-python">select stock <span class="token keyword">from</span> tb_sku where id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">for</span> update<span class="token punctuation">;</span>SKU<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>select_for_update<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>这个跟多线程的互斥锁原理十分的相像</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁不是锁，只是在修改数据库库存的时候跟修改前的数据做对比，判断修改时的库存是不是跟之前查询的库存一样，连续判断两次，如果不一样就不执行这个操作，一样就执行更改</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>这个其实不止有如上两个方法的，比如还有延迟队列、Redis集群来设计，但是单单对于Django来说这两个方法也足够应付了</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis和RabbitMQ作为消息队列的对比</title>
      <link href="/2019/10/15/redis-yu-rabbitmq/"/>
      <url>/2019/10/15/redis-yu-rabbitmq/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  这篇博客是属于一个总结，我在天天生鲜这个项目用到了消息中间件，所以就查阅了这方面的知识，对网上大部分的博客做一个总结</p><p>参考文章：</p><p><a href="https://blog.csdn.net/fengxiaolu311/article/details/82904217" target="_blank" rel="noopener">https://blog.csdn.net/fengxiaolu311/article/details/82904217</a></p><p><a href="https://blog.csdn.net/qq_42253147/article/details/93327939" target="_blank" rel="noopener">https://blog.csdn.net/qq_42253147/article/details/93327939</a></p><p><a href="https://blog.csdn.net/dd18709200301/article/details/79077839" target="_blank" rel="noopener">https://blog.csdn.net/dd18709200301/article/details/79077839</a></p></blockquote><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是一个专门的AMQP协议队列，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗，他的优势就在于提供可靠的队列服务，使得不同的应用可以通过同一个协议去共享数据，并且可做到异步。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis众所周知是一个内存级别的数据库，通过键值对的方式才存储数据，但虽然Redis本身是一个数据库，但是Redis本身是支持MQ（Message Queue，即消息队列）的，而且MQ的一些常用功能使用Redis也能实现，如果要求没那么高的话使用Redis作为中间件是一个不错的选择，完全可以当做一个轻量级的队列服务来使用。</p><h2 id="两者间具体的对比"><a href="#两者间具体的对比" class="headerlink" title="两者间具体的对比"></a>两者间具体的对比</h2><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>Redis：</p><ol><li>没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话，这条消息将丢失，不会存在内存中；</li><li>如果订阅者消费失败，消息丢失，这个时候就需要开发者手动处理；</li></ol><p>RabbitMQ：</p><ol><li>具有消息消费确认机制，如果发布一条消息，还没有消费者消费该队列，那么这条消息将一直存放在队列中，直到有消费者消费了该条消息，以此可以保证消息的可靠消费；</li><li>即使消费者消费失败，也会自动使消息体返回原队列，同时可全程持久化，保证消息体被正确消费；</li></ol><p>&emsp;</p><h3 id="可靠发布"><a href="#可靠发布" class="headerlink" title="可靠发布"></a>可靠发布</h3><p>Redis：Redis是不提供这方面的服务的，需要开发者自行实现；</p><p>RabbitMQ：具有发布确认功能，保证消息被发布到服务器；</p><p>&emsp;</p><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>Redis：Redis的持久化是针对于整个redis缓存的内容，它有RDB和AOF两种持久化方式，可以将整个redis实例持久化到磁盘，以此来做数据备份，防止异常情况下导致数据丢失；</p><p>RabbitMQ：队列，每一条消息，都可以选择是否持久化；</p><p>&emsp;</p><h3 id="队列监控"><a href="#队列监控" class="headerlink" title="队列监控"></a>队列监控</h3><p>Redis：不提供，需自行实现；</p><p>RabbitMQ：后台可以监控所有创建的队列的所有信息（内存，磁盘，消费者，生产者，速率等），良好的后台管理平台可以方面我们更好的使用；</p><p>&emsp;</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>RabbitMQ：RabbitMQ队列可以被多个消费者同时监控消费，但是每一条消息只能被消费一次，由于RabbitMQ的消费确认机制，因此它能够根据消费者的消费能力而调整它的负载；</p><p>Redis：Redis发布订阅模式，一个队列可以被多个消费者同时订阅，当有消息到达时，会将该消息依次发送给每个订阅者，她是一种消息的广播形式，redis本身不做消费者的负载均衡，因此消费效率存在瓶颈；</p><p>&emsp;</p><h3 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h3><p>Redis：采用主从模式，读写分离，但是故障转移还没有非常完善的官方解决方案；</p><p>RabbitMQ：集群采用磁盘、内存节点，任意单点故障都不会影响整个队列的操作；</p><p>&emsp;</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>Redis：不提供，需自行实现；</p><p>RabbitMQ：服务器过载的情况，对生产者速率会进行限制，保证服务可靠性；</p><p>&emsp;</p><h3 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h3><p>Redis：Redis是一个高效的缓存服务器，所有数据都保存在内存当中，所以它具备更高的实时性；</p><p>&emsp;</p><h3 id="出入队性能"><a href="#出入队性能" class="headerlink" title="出入队性能"></a>出入队性能</h3><p>对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlcy5jbml0YmxvZy5jb20vaS80NTI2NzEvMjAxNDA3LzAyMTQ0ODM5MzI0ODU3OC5wbmc" alt></p><p>实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><p>&emsp;</p><h2 id="两者的应用场景"><a href="#两者的应用场景" class="headerlink" title="两者的应用场景"></a>两者的应用场景</h2><p>Redis：轻量级，高并发，延迟敏感，即时数据分析、秒杀计数器、缓存等</p><p>RabbitMQ：重量级，高并发，异步批量数据异步处理、并行任务串行化，高负载任务的负载均衡等</p><blockquote><p>这篇博客的内容待继续完善，现在这里主要是总结了网上的经验，等我完全熟悉这两个数据库的时候我会拿案例来说明</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天天生鲜项目总结（一）</title>
      <link href="/2019/10/14/tian-tian-sheng-xian-zong-jie-yi/"/>
      <url>/2019/10/14/tian-tian-sheng-xian-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做天天生鲜项目的时候使用了太多的技术，很多不会的我参考了很多的博客才做出来，这里记录这个项目的常用技术点，以便于我开发第二个系统</p></blockquote><h2 id="使用Django内置的方法发送邮件"><a href="#使用Django内置的方法发送邮件" class="headerlink" title="使用Django内置的方法发送邮件"></a>使用Django内置的方法发送邮件</h2><p>首先先在setting.py文件里面配置你的邮件服务器，邮件服务器在QQ邮箱、网易163邮箱可以免费注册。</p><p>将SMTP服务器的配置信息放到setting.py文件里面，配置信息如以下格式：</p><pre class=" language-python"><code class="language-python">EMAIL_HOST <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">"***************"</span>EMAIL_USE_TLS<span class="token operator">=</span> <span class="token boolean">False</span>EMAIL_FROM <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span></code></pre><p>然后在需要发送邮件的方法内导入需要的包就可以使用Django内置的发送邮件函数了</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入setting刚刚配置的文件</span><span class="token keyword">from</span> dailyfreshshop<span class="token punctuation">.</span>settings <span class="token keyword">import</span> SECRET_KEY<span class="token punctuation">,</span>EMAIL_FROM<span class="token comment" spellcheck="true">#使用Django内置的发送方法</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mailemail_title <span class="token operator">=</span> <span class="token string">"天天生鲜注册激活链接"</span>email_body <span class="token operator">=</span> <span class="token string">''</span>sender <span class="token operator">=</span> EMAIL_FROMreceiver <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span>html_message <span class="token operator">=</span> <span class="token string">"&lt;h1>%s，欢迎您注册天天生鲜商城，请点击下面的连接激活你的账号&lt;/h1>"</span> \<span class="token string">"&lt;a href='http://127.0.0.1:8000/active/%s'>http://127.0.0.1:8000/active/%s&lt;/a>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>    username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>send_mail<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> email_body<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#发送函数的参数</span><span class="token comment" spellcheck="true">#第一个参数email_title是标题</span><span class="token comment" spellcheck="true">#第二个参数email_body是内容，但是这个内容只能是字符串，如果再html_message写了这里就可以不写</span><span class="token comment" spellcheck="true">#第三个参数sender是setting配置好的SMTP服务器内容</span><span class="token comment" spellcheck="true">#第四个参数receiver是要发送的人的邮箱账号</span><span class="token comment" spellcheck="true">#第五个参数html_message=html_message，这个是如果你的内容共有html标签的话可以解析成html内容</span></code></pre><h2 id="邮箱注册，用户信息加密"><a href="#邮箱注册，用户信息加密" class="headerlink" title="邮箱注册，用户信息加密"></a>邮箱注册，用户信息加密</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在发送邮件注册验证码的时候，为了防止有心人注册之后使用发送过来的激活码调整激活码中用户的ID，不停地输入修改后的激活码就会给服务器带来压力，所以在发送邮箱激活码的时候一定要加密，并且设置时间</p><p>&emsp;</p><p>使用文档：<a href="https://itsdangerous.readthedocs.io/en/1.1.x/" target="_blank" rel="noopener">https://itsdangerous.readthedocs.io/en/1.1.x/</a></p><p>安装加密库：</p><pre><code>pip install -U itsdangerous</code></pre><p>&emsp;</p><p>打开python shell模拟使用方法：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDYyNCwiZXhwIjoxNTcxMDQ0MjI0fQ.IjEyMyI.jvwwArkwJP0sBMDyO8ydqIndyd1EqvrvsHAYah4sMqWhR4PFvaoQJ3rpybXmJMjbX4GTHNf1Fw_cCCFfuaixpQ'</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token string">'123'</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"------------------把过期时间设置成2秒-------------------------"</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info2<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDc2NiwiZXhwIjoxNTcxMDQwNzY4fQ.IjEyMyI.ePHmZzoJN1bPNhfI-QOM22ZcqUXjdYLuReDSd2AMu3Sgn1zCwcWTjTSTZq5ZD97WnzVou8J65qgb2fRh_Elpgg'</span><span class="token operator">>></span><span class="token operator">></span> 两秒后<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"C:\Users\LY\Envs\dailyfresh\lib\site-packages\itsdangerous\jws.py"</span><span class="token punctuation">,</span> line <span class="token number">205</span><span class="token punctuation">,</span> <span class="token keyword">in</span> loads    date_signed<span class="token operator">=</span>self<span class="token punctuation">.</span>get_issue_date<span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">,</span>itsdangerous<span class="token punctuation">.</span>exc<span class="token punctuation">.</span>SignatureExpired<span class="token punctuation">:</span> Signature expired</code></pre><p>以如上的测试依据，添加代码</p><p><strong>注册发送邮箱激活码的类：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#邮箱的激活码是由用户的ID去加密而成的</span>serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><p><strong>激活验证码的类</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AciveUserView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            info<span class="token operator">=</span>serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#获取info的用户id</span>            user_id<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token string">'confirm'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#根据id来获取用户信息</span>            user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>user_id<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>is_active<span class="token operator">=</span><span class="token number">1</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> SignatureExpired <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#激活链接过期了</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'激活链接过期，请重新提交'</span><span class="token punctuation">)</span></code></pre><p>这样就可以保证每一次发送的激活码都唯一，这样就保证了激活码的安全性</p><h2 id="异步方式"><a href="#异步方式" class="headerlink" title="异步方式"></a>异步方式</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E5%A4%A9%E5%A4%A9%E7%94%9F%E9%B2%9C%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/3.png" alt="Celery流程图"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; broker可以选择RabbitMQ和Redis作为消息中间人去处理耗时任务，RabbitMQ是生产环境中最佳的选择，使用文档如下：<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>，Redis也是一款功能完备的broker选项，虽然整体而言是肯定不如RabbitMQ的，但它本身支持MQ功能，RabbitMQ有的Redis也能基本上实现，所以完全可以当做一个轻量级的队列服务来使用。关于Redis和RabbitMQ之间的比较可以看我这篇博客：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网站设计中，邮件发送等操作还算是比较耗时的，如果发送邮件和完成跳转是同步进行的话，要等邮件发送完成再跳转到指定页面，停顿的那几秒就会给用户带来很不好的体验，所以异步耗时操作最好是交给异步方法去执行。这个项目我拿的是redis作为中间件来执行</p><h2 id="异步发送邮件"><a href="#异步发送邮件" class="headerlink" title="异步发送邮件"></a>异步发送邮件</h2><p>第一步当然是redis服务器能够正常启动啦，我的redis服务器是部署到本地的</p><p>第二步是把需要异步操作的任务封装成函数，然后把原来同步操作的步骤使用异步的函数代替</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mail<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true">#--------------这一段是异步任务执行端必须加入以下代码--------------------</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#celery_tasks是我存放异步任务的文件夹</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'celery_tasks.tasks'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1/8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#必须加上装饰器才可以变成异步任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">send_register_active_email</span><span class="token punctuation">(</span>to_email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""发送激活邮件"""</span>    <span class="token comment" spellcheck="true"># 组织邮件信息</span>    subject <span class="token operator">=</span> <span class="token string">'天天生鲜欢迎信息'</span>    message <span class="token operator">=</span> <span class="token string">''</span>    sender <span class="token operator">=</span> settings<span class="token punctuation">.</span>EMAIL_FROM  <span class="token comment" spellcheck="true"># 发送人</span>    receiver <span class="token operator">=</span> <span class="token punctuation">[</span>to_email<span class="token punctuation">]</span>    html_message <span class="token operator">=</span> <span class="token string">'&lt;h1>%s, 欢迎您成为天天生鲜注册会员&lt;/h1>请点击下面链接激活您的账户&lt;br/>&lt;a href="http://127.0.0.1:8000/user/active/%s">http://127.0.0.1:8000/user/active/%s&lt;/a>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>    send_mail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> message<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span></code></pre><p>&emsp;</p><p>最后需要执行命令</p><p>windows端：</p><pre class=" language-python"><code class="language-python">celery <span class="token operator">-</span>A celery_tasks<span class="token punctuation">.</span>tasks worker <span class="token operator">-</span>l info <span class="token operator">-</span>P eventlet</code></pre><p>Linux端：</p><pre><code>celery -A celery_tasks.tasks worker -l info</code></pre><p>看到ready就表示异步任务已经就绪啦，等待发送异步请求。而在原来的需要同步发送邮件的地方只需要改成异步函数的代码即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_tasks<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> send_register_active_email<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerUsername'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password1 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPassword'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPasswords'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        email <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registeremail'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password1 <span class="token operator">==</span> password2<span class="token punctuation">:</span>            password <span class="token operator">=</span> password1        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token string">"两次密码不一致，请重新填写"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># all可以自动验证数据是否完整</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        register_form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> register_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"email_msg"</span><span class="token punctuation">:</span> <span class="token string">"邮箱已注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"user_msg"</span><span class="token punctuation">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>is_active <span class="token operator">=</span> <span class="token boolean">False</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#加密用户的id发送链接</span>            serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>            info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>            token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>            token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># email_title = "天天生鲜注册激活链接"</span>            <span class="token comment" spellcheck="true"># email_body = ''</span>            <span class="token comment" spellcheck="true"># sender = EMAIL_FROM</span>            <span class="token comment" spellcheck="true"># receiver = [email]</span>            <span class="token comment" spellcheck="true"># html_message = "&lt;h1>%s，欢迎您注册天天生鲜商城，请点击下面的连接激活你的账号&lt;/h1>" \</span>            <span class="token comment" spellcheck="true">#                "&lt;a href='http://127.0.0.1:8000/active/%s'>http://127.0.0.1:8000/active/%s&lt;/a>" % (</span>            <span class="token comment" spellcheck="true">#                    username, token, token)</span>            <span class="token comment" spellcheck="true"># send_mail(email_title, email_body, sender, receiver, html_message=html_message)</span>            <span class="token comment" spellcheck="true">#---------------------------------------------------------</span>            send_register_active_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'邮箱验证码已经发送到您的邮箱，请点击连接激活'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'表单不准确'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Django注册登录表单验证"><a href="#Django注册登录表单验证" class="headerlink" title="Django注册登录表单验证"></a>Django注册登录表单验证</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Django有一套自己的表单验证方法，所以在注册登录等提交表单的操作时，可以在进行数据操作前使用表单验证一遍先，然后注册登录Django都有自己内置的方法，比如验证用户名密码不用我们自己去重写登陆逻辑，只需要<code>authenticate</code>内填上账号密码的参数就可以登陆。登陆方法也不用我们去写cookie等方法，直接一个login调用即可， 这里我拿项目的案例来说明</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 新建一个froms.py文件</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#要添加以下两个包</span><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> captcha<span class="token punctuation">.</span>fields <span class="token keyword">import</span> CaptchaField<span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    这里的两个字段必须跟前台input定义的name相同    """</span>    username<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    这里对注册的表单进行验证和生成验证码，验证码的方法captcha已经写好了    验证码会在前台生成一个hidden的input框，后台会生成一长串的字符串，然后联合查询验证码的正确与否    """</span>    registerUsername<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    registerPassword<span class="token operator">=</span>forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    registeremail<span class="token operator">=</span>forms<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#使用forms.EmailField会对邮箱进行正则表达式的匹配，就不用开发者自己来写了</span>    captcha <span class="token operator">=</span> CaptchaField<span class="token punctuation">(</span>error_messages<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"invalid"</span><span class="token punctuation">:</span><span class="token string">"验证码错误"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>类只需要继承<code>forms.Form</code>就可以定义表单验证系统了。<code>Form</code>内部自定义了表单验证的错误信息和验证系统，<code>EmailField</code>如果你的邮箱格式不对也会返回一个错误。<code>captcha</code>是验证码字段，<code>CaptchaField(error_messages={&quot;invalid&quot;:&quot;&quot;})</code>是可以自定义文件错误</p><p>&emsp;</p><p>在进行数据库操作的时候可以先进行数据的验证，案例如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#注册逻辑</span><span class="token keyword">class</span> <span class="token class-name">RegisterView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        register_form<span class="token operator">=</span>RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'register.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'register_form'</span><span class="token punctuation">:</span>register_form<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerUsername'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password1 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPassword'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registerPasswords'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        email <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'registeremail'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password1 <span class="token operator">==</span> password2<span class="token punctuation">:</span>            password <span class="token operator">=</span> password1            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'error'</span><span class="token punctuation">:</span> <span class="token string">"两次密码不一致，请重新填写"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># all可以自动验证数据是否完整</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#重点在这里，从这里定义我刚刚写的form表单验证</span>            register_form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>            <span class="token keyword">if</span> register_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>email<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"email_msg"</span><span class="token punctuation">:</span> <span class="token string">"邮箱已注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"register.html"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"register_form"</span><span class="token punctuation">:</span> register_form<span class="token punctuation">,</span> <span class="token string">"user_msg"</span><span class="token punctuation">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>                user<span class="token punctuation">.</span>is_active <span class="token operator">=</span> <span class="token boolean">False</span>                user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#加密用户的id发送链接</span>                serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>                info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>                token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>                token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>                send_register_active_email<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'邮箱验证码已经发送到您的邮箱，请点击连接激活'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'register.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'表单不准确'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#登陆逻辑</span><span class="token keyword">class</span> <span class="token class-name">LoginView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">:</span>            username<span class="token operator">=</span>request<span class="token punctuation">.</span>COOKIES<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>            checked<span class="token operator">=</span><span class="token string">'checked'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            username<span class="token operator">=</span><span class="token string">''</span>            checked<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span>username<span class="token punctuation">,</span><span class="token string">'checked'</span><span class="token punctuation">:</span>checked<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        username<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        password<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>password<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'errormsg'</span><span class="token punctuation">:</span> <span class="token string">'数据不完整，请重新填写'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        login_form<span class="token operator">=</span>LoginForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> login_form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user<span class="token operator">=</span>authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span>password<span class="token operator">=</span>password<span class="token punctuation">)</span>            <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>is_active<span class="token punctuation">:</span>                    login<span class="token punctuation">(</span>request<span class="token punctuation">,</span>user<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#login方法是Django后台自定义的登陆方法，内置了cookie和session的方法</span>                    <span class="token comment" spellcheck="true">#默认登陆后跳转到首页</span>                    next_url<span class="token operator">=</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span>reverse<span class="token punctuation">(</span><span class="token string">'goods:index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    response<span class="token operator">=</span>redirect<span class="token punctuation">(</span>next_url<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#判断是否记住用户名</span>                    remember<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'remember'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> remember <span class="token operator">==</span> <span class="token string">"on"</span><span class="token punctuation">:</span>                        response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>max_age<span class="token operator">=</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        response<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> response                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"login.html"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"email_msg"</span><span class="token punctuation">:</span><span class="token string">"你的邮箱未激活"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'login.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"user_msg"</span><span class="token punctuation">:</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"login.html"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"login_form"</span><span class="token punctuation">:</span>login_form<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><p>在写前端的时候，在定义好的表单错误样式里，写上这么一条语句</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registerPassword %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>           <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registerPassword<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        密码必须在6~10位之间    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-passwords<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registerPassword %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>           <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registerPasswords<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        两次密码必须相同 且在6~10位之间    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register-email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-material {% if register_form.errors.registeremail %}error{% endif %}<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registeremail<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-username-error<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>is-invalid invalid-feedback<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ email_msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        邮箱格式不正确    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试之常用模型</title>
      <link href="/2019/10/11/ruan-jian-ce-shi/"/>
      <url>/2019/10/11/ruan-jian-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试分类总览"><a href="#软件测试分类总览" class="headerlink" title="软件测试分类总览"></a>软件测试分类总览</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570813998688.png" alt="软件测试分类图"></p><p>单元测试：集中编码和单元测试中，大多数时候用来开发自测、自我校验的一个手段</p><p>冒烟测试：在后续需求中，对主要流程进行测试</p><p>集成测试：模块与模块之间的测试</p><p>系统测试：通过测试用例的执行来完成过程</p><p>α测试：α测试就是让用户、开发人员、测试人员共同参与的测试</p><p>β测试：β测试就是交给最终用户测试 ，简明而言就是游戏内测</p><p>……</p><h2 id="软件测试常用模型"><a href="#软件测试常用模型" class="headerlink" title="软件测试常用模型"></a>软件测试常用模型</h2><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，瀑布模型的软件生命周期是分为：<strong>计划、分析、设计、编码、测试和维护6个阶段</strong>，瀑布模型的缺点就是早期的错误只能到后期的测试阶段才能知道。V模型就是对瀑布模型做了个改进，在软件开发的生命周期里，软件开发和测试活动同时进行，这样机会极大的减少Bug的几率。</p><p>​        <img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570853745995.png" alt="V模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V模型最大的价值就是标明了测试过程中分开了很多个级别，同时也描述了开发过程阶段和测试阶段的对应关系：<strong>单元测试以详细设计为参考、集成测试以概要设计为参考、系统测试以需求分析为参考、到客户的验收测试以用户需求为参考</strong>，一一对应的关系十分明确，但是还是有局限性：<strong>测试还是在编码阶段的最后一个活动，比如需求分析的错误还是要到系统测试才能发现，有十分大的滞后性</strong>，所以这就产生了一个新的模型：<strong>W模型</strong></p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于V模型而言，W模型更为科学，W模型是V模型的一个发展，强调测试的过程伴随着整个开发周期，测试的对象也不仅仅只是程序，需求、功能、设计也同样需要测试，测试和开发也就是变成了同步执行，有利于尽早的发现问题，对于那种高性能、高风险的互联网软件、或者难以进行模块化的大型软件，使用V模型就有一定的困难和风险了，需要更强调迭代的开发模型和敏捷开发模型，这个时候使用W模型就会更好一些。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型就是从V模型演化而来，相对于V模型，W模型增加了软件各开发阶段中应同步进行的验证和确认活动，W模型明确了测试和开发的并行关系，测试与开发同步进行更利于发现问题和降低风险。</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570854774951.png" alt="W模型过程"></p><p>图中一条线是软件开发研发线，一条是测试线</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型自身也具有局限性：<strong>W模型和V模型一样，都把软件开发的周期当做一个串行的活动，没有办法支持迭代</strong>，后来针对于V模型和W模型的局限性开发了一个H模型</p><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H模型中，真正的测试级别中不存在严格的次序关系，各阶段之间可以反复的触发、迭代、增量。H模型把测试活动完全独立出来，贯穿于整个产品的周期里，和其他流程是并发执行的。H模型的特点就是只要测试条件成立，就可以马上开始测试，也就是软件测试是一个独立的流程</p><h3 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570855415109.png" alt="X模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型就是把一个程序分为多个片段，左边是针对于一个单独的程序片段进行互相分离的编码和测试，后面进行频繁的集成和交接，最终集成为一个可以执行的程序，然后再进行测试。这样就对一个程序进行反复的迭代。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型也是唯一一个定位了探索性测试的测试模型，是一种特殊的类型的测试：前面进行了各个程序片段的单独测试，到集成测试的时候，更多依赖于没有事先计划的特殊类型的测试方式，让有经验的人可以发现更多的软件错误，X模型也就是对测试人员要求比较高的一个模型方式，可迭代、可集成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型对测试人员要求比较高，就目前而言，用的最多的可能是W模型的一个变换、或者是W和H的一个结合，测试的内容以W模型为准，测试的周期方法进度以H模型作为一个指导的，X模型更多时候是对于最终测试或熟练性测试的一个模板</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy下载中间件使用和配置</title>
      <link href="/2019/10/11/scrapy4/"/>
      <url>/2019/10/11/scrapy4/</url>
      
        <content type="html"><![CDATA[<blockquote><p> scrapy在请求网站的时候必须经过这个下载中间件</p><p>一些网站反爬虫措施做的比较严谨的时候，如果你并发过高就会封你ip等反爬虫操作，这个时候就可以使用一些代理、随机请求头来躲避这些反爬虫措施</p></blockquote><h2 id="常见的反爬虫策略"><a href="#常见的反爬虫策略" class="headerlink" title="常见的反爬虫策略"></a>常见的反爬虫策略</h2><ul><li><p>动态设置User-Agent（随机切换User-Agent，模拟不同用户的浏览器信息）</p></li><li><p>禁用Cookies（也就是不启用cookies middleware，不向Server发送cookies，有些网站通过cookie的使用发现爬虫行为）</p><ul><li>可以通过<code>COOKIES_ENABLED</code> 控制 CookiesMiddleware 开启或关闭</li></ul></li><li><p>设置延迟下载（防止访问过于频繁，设置为 2秒 或更高）</p></li><li><p>Google Cache 和 Baidu Cache：如果可能的话，使用谷歌/百度等搜索引擎服务器页面缓存获取页面数据。</p></li><li><p>使用IP地址池：VPN和代理IP，现在大部分网站都是根据IP来ban的。</p></li><li><p>使用 <a href="https://scrapinghub.com/crawlera" target="_blank" rel="noopener">Crawlera</a>（专用于爬虫的代理组件），正确配置和设置下载中间件后，项目所有的request都是通过crawlera发出（也就是爬虫代理商，直接使用他们给你的账号密码就可以不停地切换IP来反爬虫）</p><pre class=" language-python"><code class="language-python">  DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'scrapy_crawlera.CrawleraMiddleware'</span><span class="token punctuation">:</span> <span class="token number">600</span>  <span class="token punctuation">}</span>  CRAWLERA_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>  CRAWLERA_USER <span class="token operator">=</span> <span class="token string">'注册/购买的UserKey'</span>  CRAWLERA_PASS <span class="token operator">=</span> <span class="token string">'注册/购买的Password'</span></code></pre></li></ul><h2 id="设置下载中间件（Downloader-Middlewares）"><a href="#设置下载中间件（Downloader-Middlewares）" class="headerlink" title="设置下载中间件（Downloader Middlewares）"></a>设置下载中间件（Downloader Middlewares）</h2><p>下载中间件是处于引擎(crawler.engine)和下载器(crawler.engine.download())之间的一层组件，可以有多个下载中间件被加载运行。</p><ol><li>当引擎传递请求给下载器的过程中，下载中间件可以对请求进行处理 （例如增加http header信息，增加proxy信息等）；</li><li>在下载器完成http请求，传递响应给引擎的过程中， 下载中间件可以对响应进行处理（例如进行gzip的解压等）</li></ol><p>要激活下载器中间件组件，将其加入到 DOWNLOADER_MIDDLEWARES 设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。</p><h2 id="下载中间件字段"><a href="#下载中间件字段" class="headerlink" title="下载中间件字段"></a>下载中间件字段</h2><h3 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h3><ul><li><p>当每个request通过下载中间件时，该方法被调用。</p></li><li><p>process_request() 必须返回以下其中之一：一个 None 、一个 Response 对象、一个 Request 对象或 raise IgnoreRequest:</p><ul><li>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</li><li>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</li><li>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</li><li>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li><p>参数:</p><ul><li><p><code>request (Request 对象)</code> – 处理的request</p></li><li><p><code>spider (Spider 对象)</code> – 该request对应的spider</p></li></ul></li></ul><h3 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h3><p>当下载器完成http请求，传递响应给引擎的时候调用</p><ul><li>process_request() 必须返回以下其中之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。<ul><li>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</li><li>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</li><li>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li>参数:<ul><li><code>request (Request 对象)</code> – response所对应的request</li><li><code>response (Response 对象)</code> – 被处理的response</li><li><code>spider (Spider 对象)</code> – response所对应的spider</li></ul></li></ul><h2 id="编写中间件字段"><a href="#编写中间件字段" class="headerlink" title="编写中间件字段"></a>编写中间件字段</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先先设置你的UserAgent和PROXIES的数据，可以在setting里面设置，也可以在中间件里面设置，但是setting直接导入就好了更方便，在类里面设置还得用个self。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如我的setting.py文件</p><pre class=" language-python"><code class="language-python">USER_AGENTS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/9.27 (Windows NT 5.2; U; zh-cn)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/8.0 (Macintosh; PPC Mac OS X; U; en)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Linux; U; Android 4.0.3; zh-cn; M032 Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13'</span><span class="token punctuation">]</span>PROXIES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"ip_port"</span><span class="token punctuation">:</span> <span class="token string">"IP地址:端口号"</span><span class="token punctuation">,</span> <span class="token string">"user_passwd"</span><span class="token punctuation">:</span> <span class="token string">"账号:密码"</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token punctuation">]</span></code></pre><p>然后编写中间件字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> base64<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> USER_AGENTS<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> PROXIES<span class="token comment" spellcheck="true"># 随机的User-Agent</span><span class="token keyword">class</span> <span class="token class-name">RandomUserAgent</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        useragent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>USER_AGENTS<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print useragent</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> useragent<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RandomProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>PROXIES<span class="token punctuation">)</span>        <span class="token keyword">if</span> proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 没有代理账户验证的代理使用方式</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 对账户密码进行base64编码转换</span>            base64_userpasswd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对应到代理服务器的信令格式里</span>            request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Proxy-Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Basic '</span> <span class="token operator">+</span> base64_userpasswd            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span></code></pre><p>HTTP代理登陆的时候是要使用登陆验证的，原因如下：</p><blockquote><p>为什么HTTP代理要使用base64编码：</p><p>HTTP代理的原理很简单，就是通过HTTP协议与代理服务器建立连接，协议信令中包含要连接到的远程主机的IP和端口号，如果有需要身份验证的话还需要加上授权信息，服务器收到信令后首先进行身份验证，通过后便与远程主机建立连接，连接成功之后会返回给客户端200，表示验证通过，就这么简单，下面是具体的信令格式：</p></blockquote><pre class=" language-python"><code class="language-python">CONNECT <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span>Proxy<span class="token operator">-</span>Authorization<span class="token punctuation">:</span> Basic bGV2I1TU5OTIzUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> OpenFetion</code></pre><blockquote><p>其中<code>Proxy-Authorization</code>是身份验证信息，Basic后面的字符串是用户名和密码组合后进行base64编码的结果，也就是对username:password进行base64编码。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy模拟登陆的方法</title>
      <link href="/2019/10/10/scrapy3/"/>
      <url>/2019/10/10/scrapy3/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 以下三个策略以人人网作为案例来描述</p></blockquote><h2 id="策略一：使用保存的cookie登陆（100-成功）"><a href="#策略一：使用保存的cookie登陆（100-成功）" class="headerlink" title="策略一：使用保存的cookie登陆（100%成功）"></a>策略一：使用保存的cookie登陆（100%成功）</h2><h3 id="登陆后查看自己的cookie信息"><a href="#登陆后查看自己的cookie信息" class="headerlink" title="登陆后查看自己的cookie信息"></a>登陆后查看自己的cookie信息</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570770626349.png" alt="cookie信息"></p><h3 id="重写Spider类的start-requests方法"><a href="#重写Spider类的start-requests方法" class="headerlink" title="重写Spider类的start_requests方法"></a>重写Spider类的start_requests方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为所有的爬虫类都是继承于Spider的，所以重写start_requests方法可以适用于所有的爬虫类</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最重要记得要把setting.py的COOKIES_ENABLED开启起来</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的setting.py文件关键配置如下：</p><pre class=" language-python"><code class="language-python">COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>然后使用命令创建一个新的爬虫文件(renren.py)</p><h3 id="编写爬虫字段"><a href="#编写爬虫字段" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>renren.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    cookies <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"JSESSIONID"</span><span class="token punctuation">:</span> <span class="token string">"abc6L9jo347Dw9fWUf52w"</span><span class="token punctuation">,</span>    <span class="token string">"anonymid"</span> <span class="token punctuation">:</span> <span class="token string">"k1lmx3wm-pdg03r"</span><span class="token punctuation">,</span>    <span class="token string">"_r01_"</span> <span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"depovince"</span> <span class="token punctuation">:</span> <span class="token string">"GW"</span><span class="token punctuation">,</span>    <span class="token string">"springskin"</span> <span class="token punctuation">:</span> <span class="token string">"set"</span><span class="token punctuation">,</span>    <span class="token string">"jebe_key"</span> <span class="token punctuation">:</span> <span class="token string">"09e48352-6a6a-490c-a137-d78928ffe419%7C18edbeb77a97f6145ca4db5e06940ded%7C1570768484510%7C1%7C1570768487369"</span><span class="token punctuation">,</span>    <span class="token string">"t"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"societyguester"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span> <span class="token punctuation">:</span> <span class="token string">"972451360"</span><span class="token punctuation">,</span>    <span class="token string">"xnsid"</span> <span class="token punctuation">:</span> <span class="token string">"46d5aac1cccccccc"</span><span class="token punctuation">,</span>    <span class="token string">"loginfrom"</span> <span class="token punctuation">:</span> <span class="token string">"null"</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"deng.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>爬取得到的结果如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570776253453.png" alt></p><p>这个方法虽然麻烦，但是肯定是可以成功的</p><h2 id="策略二：使用post请求来模拟登陆"><a href="#策略二：使用post请求来模拟登陆" class="headerlink" title="策略二：使用post请求来模拟登陆"></a>策略二：使用post请求来模拟登陆</h2><h3 id="找到表单登陆请求地址"><a href="#找到表单登陆请求地址" class="headerlink" title="找到表单登陆请求地址"></a>找到表单登陆请求地址</h3><p>如果使用post请求的话就一定要找到人人网登陆表单的请求地址，人人网的请求地址如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570769345282.png" alt="人人网表单"></p><p>得到的地址就为’<a href="http://www.renren.com/PLogin.do&#39;" target="_blank" rel="noopener">http://www.renren.com/PLogin.do&#39;</a></p><h3 id="编写爬虫字段-1"><a href="#编写爬虫字段-1" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.renren.com/972451360/newsfeed/photo']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/PLogin.do'</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> formdata<span class="token operator">=</span>data<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>        <span class="token keyword">yield</span> request    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>这个方法其实就先访问登陆页面的表单，然后登陆成功之后再去爬取想要的页面</p><h2 id="策略三：模拟正规的登陆流程来模拟登陆"><a href="#策略三：模拟正规的登陆流程来模拟登陆" class="headerlink" title="策略三：模拟正规的登陆流程来模拟登陆"></a>策略三：模拟正规的登陆流程来模拟登陆</h2><h3 id="编写爬虫字段-2"><a href="#编写爬虫字段-2" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>这个方法不同于前两种，前两种是重写start_requests方法，这个方法是模拟用户的登陆流程：先访问登陆页面，输入账号密码之后再访问详情页面</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"你的邮箱"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"你的密码"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page            <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 处理响应内容</span>    <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h2 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单单爬取人人网这类的简单网站用以上三个方法是没问题的，但是类似于知乎这种使用<code>Django</code>作为后台的网站，登陆注册都有个<code>_xsrf</code>字段放在form表单的末尾，这个字段是Django为了防止 跨站域请求伪造攻击而添加的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以在使用模拟登陆前一定要查看表单有没有这个字段，如果有就用xpath或者正则表达式提取出来，然后一起提交。比如我这里拿最后一个方法来说明：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        _xsrf <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//_xsrf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"xxx@163.com"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token string">"_xsrf"</span> <span class="token punctuation">:</span> _xsrf <span class="token punctuation">}</span><span class="token punctuation">,</span>        callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>        <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 处理响应内容</span>        <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>                filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之CrawlSpider类</title>
      <link href="/2019/10/09/crawlspider/"/>
      <url>/2019/10/09/crawlspider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>爬虫文件继承的类不仅只有scrapy.Spider类，还有很多类，但是Spider是所有爬虫类的基类。这里我介绍一下CrawlSpider类的使用、说明和spider类和CrawlSpider类的对比</p></blockquote><h2 id="Spider与CrawlSpider案例对比"><a href="#Spider与CrawlSpider案例对比" class="headerlink" title="Spider与CrawlSpider案例对比"></a>Spider与CrawlSpider案例对比</h2><h3 id="Spider爬取有页码的数据"><a href="#Spider爬取有页码的数据" class="headerlink" title="Spider爬取有页码的数据"></a>Spider爬取有页码的数据</h3><p>Spider在爬取有页码的数据的时候要使用回调函数，在请求完一页的数据之后使用回调函数继续执行下一个页面</p><p>比如我这要爬取的是csdn的论坛网站</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570709064975.png" alt></p><p>下面有五页数据，从第二页开始url地址就会增加个pages，所以在每次请求完页面的时候都给pages+1去重新爬取新的页面。</p><p>部分源码如下：</p><p>scdemo.py（爬虫文件）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ScdemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'scdemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://sou.zhaopin.com/?jl=763']</span>    pages<span class="token operator">=</span><span class="token number">1</span>    url<span class="token operator">=</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page='</span>    start_urls <span class="token operator">=</span><span class="token punctuation">[</span>url<span class="token operator">+</span>str<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pages<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pages<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pages<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># with open("bbs.html", "wb+") as f:</span>        <span class="token comment" spellcheck="true">#     f.write(response.body)</span></code></pre><p>pipelines.py（管道文件）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">ZlzhaopingPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"zp.json"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>里面代码关键的就是确定爬取的页码是多少，然后每一次请求玩一页的数据都让pages+1，这样就可以循环出所有的页码的数据了。不过使用CrawlSpider会更简单，CrawlSpider可以创建自己的规则,比如只要存在还有跳转到下一页页码的url字段，就反复请求。</p></blockquote><h3 id="CrawlSpider爬取有页码的数据"><a href="#CrawlSpider爬取有页码的数据" class="headerlink" title="CrawlSpider爬取有页码的数据"></a>CrawlSpider爬取有页码的数据</h3><p>crawlSpider我先演示一下同样是爬取同一个网页</p><p>使用如下命令快捷创建CrawlSpider</p><pre class=" language-python"><code class="language-python">$ scrapy genspider <span class="token operator">-</span>t crawl clidemo https<span class="token punctuation">:</span><span class="token operator">//</span>bbs<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>forums<span class="token operator">/</span>OL_Script?page<span class="token operator">=</span><span class="token number">0</span></code></pre><p>clidemo.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ClidemoSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'clidemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://bbs.csdn.net/forums/OL_Script?page=2']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page=0'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span>r<span class="token string">'page=\d+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian</code></pre><blockquote><p>运行之后就可以直接把所有的页面全部爬完了,方法比Spider来写方便很多。</p><p>唯一不足的地方就是CrawlSpider一次性把全部的页码请求完，而Spider可以设置一个停止条件，不必全部爬完。</p></blockquote><h2 id="CrawlSpider的字段详解"><a href="#CrawlSpider的字段详解" class="headerlink" title="CrawlSpider的字段详解"></a>CrawlSpider的字段详解</h2><p>CrawlSpider源码没啥好解释的，写的挺清楚的，这里解释一下CrawlSpider的匹配规则和提取规则</p><p><strong>LinkExtractor：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> allow<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restrict_xpaths<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 tags<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonicalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> process_value<span class="token operator">=</span>None<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>None<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>其中主要的参数如下：</p><ul><li><code>allow</code>：满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</li><li><code>deny</code>：与这个正则表达式(或正则表达式列表)不匹配的URL一定不提取。</li><li><code>allow_domains</code>：会被提取的链接的domains。</li><li><code>deny_domains</code>：一定不会被提取链接的domains。</li><li><code>restrict_xpaths</code>：使用xpath表达式，和allow共同作用过滤链接。</li></ul><p><strong>Rule：</strong></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> follow<span class="token operator">=</span>None<span class="token punctuation">,</span> process_links<span class="token operator">=</span>None<span class="token punctuation">,</span> process_request<span class="token operator">=</span>identity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor        self<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback        self<span class="token punctuation">.</span>cb_kwargs <span class="token operator">=</span> cb_kwargs <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>process_links <span class="token operator">=</span> process_links        self<span class="token punctuation">.</span>process_request <span class="token operator">=</span> process_request        <span class="token keyword">if</span> follow <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">if</span> callback <span class="token keyword">else</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> follow</code></pre><ul><li><p><code>link_extractor</code>：是一个Link Extractor对象，用于定义需要提取的链接。</p></li><li><p><code>callback</code>： 从link_extractor中每获取到链接时，参数所指定的值作为回调函数，该回调函数接受一个response作为其第一个参数。</p><blockquote><p>注意：当编写爬虫规则时，避免使用parse作为回调函数。由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</p></blockquote></li><li><p><code>follow</code>：是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进(就是是否根据爬取到的页面继续点进去爬取)。 如果callback为None，follow 默认就为True。如果写了callback，follow默认就为False</p></li><li><p><code>process_links</code>：指定该spider中哪个的函数将会被调用，从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。（比如一些网站，在你快速爬取的时候回给你一些错误的链接让你中断爬取，通常会修改url地址的某些参数，比如说&amp;改成？，但是使用CrawlSpider的话，只要写一个函数来修改就可以了，方法如 process_links=”deal_links”）</p></li><li><p><code>process_request</code>：指定该spider中哪个的函数将会被调用， 该规则提取到每个request时都会调用该函数。 (用来过滤request)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy框架初识</title>
      <link href="/2019/10/07/scrapy/"/>
      <url>/2019/10/07/scrapy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>​        我们原生爬虫需要使用urllib、requests等库去请求指定的网址，然后通过正则表达式、xpath、css选择等去解析网址，得到自己想要的信息，然后再写一个函数存储到数据库或者本地文件中，这样思路虽然说很清晰，但是流程总归而言还是比较麻烦的，而scrapy框架则帮我们封装好了所有的流程，我们只需要编写几行代码就可以爬取我们需要的资源。</p></blockquote><h2 id="scrapy架构图"><a href="#scrapy架构图" class="headerlink" title="scrapy架构图"></a>scrapy架构图</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/scrapy_all.png" alt="scrapy架构图"></p><ul><li><p><code>Scrapy Engine</code>就是爬虫的引擎，负责<code>Spider</code>、<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>之间的通讯</p></li><li><p><code>Scheduler(调度器)</code>：负责引擎传递过来的request请求，并且按照一定的方式整理排列</p></li><li><p><code>Downloader（下载器）</code>：负责下载引擎传递过来的所有request请求，然后将得到的Responses还给引擎，由引擎交给<code>spiders</code>处理</p></li><li><p><code>Downloader Middlewares（下载中间件）</code>：自定义扩展下载功能的地方，比如需要添加下载的代理等</p></li><li><p><code>Spider（爬虫）</code>：负责从Responses分析提取出所要的数据，如果Responses还有需要的URL数据，就把这些数据交给引擎，由引擎传递给<code>Scheduler(调度器)</code>去处理</p></li><li><p><code>Spider Middlewares（Spider中间件）</code>：一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests），这个很少用到</p></li><li><p><code>Item Pipeline(管道)</code>：负责处理spiders获取到的item，并且对这些数据进行存储、分析、过滤等处理</p></li></ul><h2 id="scrapy文件配置详解"><a href="#scrapy文件配置详解" class="headerlink" title="scrapy文件配置详解"></a>scrapy文件配置详解</h2><p>创建项目：</p><pre><code>scrapy startproject demo(你的项目名)</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570425985011.png" alt></p><p>然后就可以进入刚刚创建的demo项目了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426136366.png" alt></p><p>scrapy.cfg里面是确定项目的配置文件是哪个</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426236269.png" alt></p><p>如图，项目的配置文件就是<code>demo/setting.py</code></p><p>项目的所有文件如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426417062.png" alt></p><p><code>items.py</code>是根据要爬取的数据的字段进行设置</p><p><code>pipelines.py</code>是管道文件，即把爬取下来的数据进行存储和过滤等操作</p><p><code>setting.py</code>是核心配置文件</p><pre class=" language-python"><code class="language-python"><span class="token number">12</span><span class="token punctuation">.</span> BOT_NAME <span class="token operator">=</span> <span class="token string">'demo'</span>                            <span class="token comment" spellcheck="true">#项目名字</span><span class="token number">14</span><span class="token punctuation">.</span> SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'demo.spiders'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#项目模板位置</span><span class="token number">15</span><span class="token punctuation">.</span> NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'demo.spiders'</span>            <span class="token comment" spellcheck="true">#新爬虫模板位置</span><span class="token number">22</span><span class="token punctuation">.</span> ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span>                         <span class="token comment" spellcheck="true">#是否遵守robots协议</span><span class="token number">25</span><span class="token punctuation">.</span> CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">32</span>                    <span class="token comment" spellcheck="true">#爬虫的并发量</span><span class="token number">30</span><span class="token punctuation">.</span> DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span>                            <span class="token comment" spellcheck="true">#爬虫延迟</span><span class="token number">36</span><span class="token punctuation">.</span> COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token comment" spellcheck="true">#是否启用cookie，不想爬虫留下自己的痕迹就不用开启</span><span class="token number">42</span><span class="token punctuation">.</span> DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">#42-45 默认的请求头</span><span class="token number">43</span><span class="token punctuation">.</span>   <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">.</span>   <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token number">49</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#SPIDER_MIDDLEWARES = {                        #爬虫中间件设置，数字越小优先级越大</span><span class="token number">50</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoSpiderMiddleware': 543,</span><span class="token number">51</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">55</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#DOWNLOADER_MIDDLEWARES = {                    #下载中间件</span><span class="token number">56</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoDownloaderMiddleware': 543,</span><span class="token number">57</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">67</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#ITEM_PIPELINES = {                            #管道文件</span><span class="token number">68</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.pipelines.DemoPipeline': 300,</span><span class="token number">69</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span></code></pre><p>更多的详细配置可见<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref" target="_blank" rel="noopener">官方文档</a></p><h2 id="第一个scrapy爬虫"><a href="#第一个scrapy爬虫" class="headerlink" title="第一个scrapy爬虫"></a>第一个scrapy爬虫</h2><p>scrapy的所有命令都可以用cmd看到</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570517173800.png" alt></p><p>创建爬虫文件：</p><pre><code>scrapy genspider bilibili(爬虫文件名) https://www.bilibili.com/(要爬虫的网站)</code></pre><p>刚刚创建的爬虫项目内容如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true">#允许访问的域</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://https://www.bilibili.com//'</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#开始爬取的网站地址</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>                                        <span class="token comment" spellcheck="true">#解析方法</span>        <span class="token keyword">pass</span></code></pre><p>现在编写一些请求函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/v/game/stand_alone/?spm_id_from=333.6.b_7072696d6172795f6d656e75.41#/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"demo.html"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>然后执行命令</p><pre class=" language-python"><code class="language-python">scrapy crawl bilibili</code></pre><p>就可以请求bilibili的页面，然后把源代码写到demo.html文件了</p><h2 id="将scrapy得到的结果保存到第三方格式"><a href="#将scrapy得到的结果保存到第三方格式" class="headerlink" title="将scrapy得到的结果保存到第三方格式"></a>将scrapy得到的结果保存到第三方格式</h2><p>scrapy是默认有xpath解析库的，所以可以直接使用xpath，这里拿传播智客的讲师页面来演示</p><p>创建一个爬虫文件</p><pre class=" language-python"><code class="language-python">scrapy genspider itcast http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>cn<span class="token operator">/</span></code></pre><p>首先先编写要确定爬取的部分</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570469433346.png" alt></p><p>得到如上页面说明爬取的内容正确</p><p>然后在<code>items.py</code>编写要存储的字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DemoItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    title<span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后再编写爬虫文件，将爬取的内容存储到这些字段中</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            teacherItem<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Item<span class="token punctuation">)</span>        <span class="token keyword">return</span> teacherItem</code></pre><p>最后再执行命令：</p><pre><code>$ scrapy crawl itcast -o itcast.csv</code></pre><p>可以保存为（json，csv，xml）等格式</p><h2 id="使用管道来存储文件"><a href="#使用管道来存储文件" class="headerlink" title="使用管道来存储文件"></a>使用管道来存储文件</h2><p>管道就是在爬取数据之后的处理过程，这里拿个案例来说明</p><p>与上面不同的是爬取的结果不是直接return返回，因为return之后程序就结束了，所以使用yield返回</p><p>itcast.py文件(你的爬虫文件)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.itcast.cn/']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># teacherItem = []</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># teacherItem.append(Item)</span>            <span class="token keyword">yield</span> Item        <span class="token comment" spellcheck="true"># return teacherItem</span></code></pre><p>然后在piplines.py编写存储的方式，这里我用的是存储到json文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">DemoPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"teacher.json"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="scrapy-shell的使用"><a href="#scrapy-shell的使用" class="headerlink" title="scrapy shell的使用"></a>scrapy shell的使用</h2><p>scrapy shell可以帮助我们快速查看网页的请求，一般我们在爬取网站的时候，可以先试一下使用scrapy shell启动，因为有些网页是使用ajax或者js来显示的，直接以上面演示的方式请求只能请求到一个空的网页，比如我现在要爬取一个智联招聘的页面：</p><pre class=" language-python"><code class="language-python">$ scrapy shell  https<span class="token punctuation">:</span><span class="token operator">//</span>sou<span class="token punctuation">.</span>zhaopin<span class="token punctuation">.</span>com<span class="token operator">/</span>?jl<span class="token operator">=</span><span class="token number">763</span><span class="token operator">&amp;</span>kw<span class="token operator">=</span>python<span class="token operator">&amp;</span>kt<span class="token operator">=</span><span class="token number">3</span><span class="token operator">&amp;</span>sf<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>st<span class="token operator">=</span><span class="token number">0</span></code></pre><p> 进入shell命令行之后输入命令</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> view<span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>然后就可以通过你的默认浏览器看到请求后的结果，如果爬取后的网页是跟浏览器输入地址访问的一样的话，那么就可以直接像我上面演示的方式请求。如果请求后发现重要数据为空的话，比如我这样：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570623395604.png" alt="scrapy直接爬取智联招聘页面"></p><p>因为智联招聘的页面是通过js去请求的，所以这些数据都没有显示在request请求的页面上，因为这部分的数据都是使用js去加载的，所以只要打开调试网页查看js的请求地址，然后去请求js的请求地址就可以获取这部分的数据了。</p><p>更多关于如何提取异步加载的数据可以在《scrapy爬取动态网页》博客可以详解</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五大数据结构的介绍及基本命令使用</title>
      <link href="/2019/09/28/redis2/"/>
      <url>/2019/09/28/redis2/</url>
      
        <content type="html"><![CDATA[<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><h3 id="String的限制"><a href="#String的限制" class="headerlink" title="String的限制"></a>String的限制</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String类型可以存储任何形式的字符串，比如整型，数字，二进制数据，json对象等，但是在有一个内存大小限制，最大只能存储512M</p><h3 id="字符串的API"><a href="#字符串的API" class="headerlink" title="字符串的API"></a>字符串的API</h3><ul><li>赋值：<ul><li>set ：<code>set key value</code>，加键值对，无论key是否存在都设置</li><li>setnx ：<code>setnx key value</code>，key不存在才添加键值对</li><li>set  xx：<code>set key value xx</code>，key存在才设置键值对</li><li>mset ：<code>mset key1 value1 key2 value2</code>，设置多个键值对，时间复杂度为O(n)</li><li>getset ：<code>getset key newvalue</code>，添加新的值并且返回老的值</li><li>append ：<code>append key value</code>，将value追加到旧的value</li><li>setrange ：<code>setrange key index value</code>，设置指定下标所有对应的值，比如hello的值为world，setrange hello 0 L就是得到Lorld</li></ul></li><li>查询：<ul><li>get ：<code>get key</code>，获取键值对</li><li>mget ：<code>mget key1 key2</code>，批量获取key，原子操作，时间复杂度为O(n)</li><li>strlen ：<code>strlen key</code>，返回字符串的长度(中文一个字占两个字符)</li><li>getrange ：<code>getrange key start end</code>，获取字符串指定下标的所有值，比如hello的值为world，getrange hello 0 2就是得到wor</li></ul></li><li>删除：<ul><li>del：<code>del key</code>，删除键值对</li></ul></li><li>自增：<ul><li>incr ：<code>incr key</code>，key自增1，如果key不存在，自增后get(key)=1</li><li>incrby ：<code>incrby key</code>，key自增k，如果key不存在，自增后get(key)=k</li><li>incrbyfloat ：<code>incrbyfloat key</code>，是浮点数的自增操作</li></ul></li><li>自减：<ul><li>decrby ：<code>decrby key</code>，key自减k，如果key不存在，自增后get(key)=-k</li><li>decr ：<code>decr key</code>，key自减1，如果key不存在，自增后get(key)=-1</li></ul></li></ul><h3 id="String的使用场景"><a href="#String的使用场景" class="headerlink" title="String的使用场景"></a>String的使用场景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String一般适用于缓存（网站记录用户登录状态、视频缓存等）、计数器（比如每次观看视频，次数就+1，而且因为redis是单线程的，计数器是完全不会出错的），分布式锁等等</p><h2 id="hash-哈希"><a href="#hash-哈希" class="headerlink" title="hash(哈希)"></a>hash(哈希)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash其实还是一个key-value结构，但是跟String有不同，hash类似于mysql的一个表的结构数据，每一个key都有一个field和value，field不能相同。就相当于key是mysql的一个表，filed是一个字段，value是值</p><h3 id="哈希的API"><a href="#哈希的API" class="headerlink" title="哈希的API"></a>哈希的API</h3><ul><li>赋值：<ul><li>hset：哈希赋值，比如hset user:1:info age 23</li><li>hmset ：<code>hmset key1 vaule 1 key2 value2</code>批量设置一批key和value</li><li>hsetnx ：<code>hsetnx key field value</code>设置hash key对应field的value（如果存在就设置失败）</li></ul></li><li>查询：<ul><li>hget：哈希取值，比如hget user:1:info age</li><li>hgetall：获取所有的属性和值，比如hgetall user:1:info，时间复杂度O(n)</li><li>hvals：<code>hvals key</code>返回hash key对应所有的field的value，比如hvals user:1:info，时间复杂度O(n)</li><li>hkeys ：<code>hkeys key</code>：返回hash key对应所有的field，时间复杂度O(n)</li><li>hexists ：<code>hexists key field</code>：判断 hash key是否存在field，比如hlen user:1:info name</li><li>hlen：<code>hlen key</code>：获取hash key field数量，比如hlen user:1:info</li><li>hmget ：<code>hmget key field1 field2</code>：批量获取key一批的field值</li></ul></li><li>删除：<ul><li>hdel：删除哈希的值，比如hdel user:1:info</li></ul></li><li>自增：<ul><li>hincrby ：<code>hincrby key field intCounter</code>hash key对应的field的value自增intCounter</li><li>hincrbyfloat ：<code>hincrbyfloat key field floatCounter</code>增加浮点数</li></ul></li></ul><h2 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h2><p>list是有序的列表，可以接受重复值</p><h3 id="列表的API"><a href="#列表的API" class="headerlink" title="列表的API"></a>列表的API</h3><ul><li>覆盖值：<ul><li>lset：<code>lset key index newValue</code>设置列表索引值为newValue</li></ul></li><li>插入值：<ul><li>lpush：从左端插入值</li><li>rpush：从右端插入值，如rpushlistkey c b a，就是从右边插入c b a</li><li>linsert：<code>linsert key before|after value newValue</code>，时间复杂度O(n)</li></ul></li><li>弹出值：<ul><li>rpop：从右端弹出值</li><li>lpop：从左端弹出值</li></ul></li><li>删除：<ul><li>lrem：<code>lrem key count value</code>根据count来删除所有value相等的项，时间复杂度为O(n)<ul><li>count&gt;0，从左到右，删除最多的count个value相等的项</li><li>count&lt;0，从右到左，删除最多的Math.abs(count)个value相等的项</li><li>count=0，删除所有的value相等的项</li></ul></li><li>ltrim：<code>ltrim key start end</code>，时间复杂度为O(n)，即只保留下标start到end的，时间复杂度为O(n)</li></ul></li><li>查询：<ul><li>lrange：<code>lrange key start end(包含end)</code>，这是一个查询的API，只查询start到end的，负号就是从右边开始，时间复杂度为O(n)</li><li>lindex：<code>lindex key index</code>获取列表指定索引的value，时间复杂度为O(n)</li><li>llen：<code>llen key</code>获取列表的长度</li></ul></li><li>阻塞版：b就是阻塞，比如一个空队列的话使用lpop会立刻弹出，但是使用blpop就会等待有值再弹出<ul><li>blpop：<code>blpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li><li>brpop：<code>brpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li></ul></li></ul><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h2><h3 id="集合特征"><a href="#集合特征" class="headerlink" title="集合特征"></a>集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合是一个<strong>无序和无重复元素</strong>的的，还可以使用<strong>集合操作</strong>，集合就相当于我们高中学的数学的那个集合，两个集合可以交、并、补操作，同时集合是无序和不能重复的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合的value是由field和value组成</p><h3 id="集合的API"><a href="#集合的API" class="headerlink" title="集合的API"></a>集合的API</h3><ul><li>添加：<ul><li>sadd：<code>sadd key element1 [element2]</code>向集合添加element，如果element已存在就添加失败，返回结果为0</li></ul></li><li>删除：<ul><li>srem：<code>srem key element</code>将集合key中的element删掉</li><li>spop：<code>spop key [count]</code>随机弹出集合的随机count个元素，如果没填就默认是1，改变原有的集合</li></ul></li><li>查询<ul><li>scard：<code>scard key</code>返回集合元素的数量</li><li>sismember：<code>SISMEMBER KEY VALUE</code> 计算元素是否在集合当中，是就返回1，不存在返回0</li><li>srandmember：<code>srandmember count</code> 返回集合中随便count 个元素，如果count没填就默认为1，不改变原有的集合</li><li>smembers：<code>smembers key [count]</code> 取出集合中所有的元素</li></ul></li><li>集合间的操作：<ul><li>sdiff：也就是数学集合中的差集  <code>sdiff key1 key2</code> </li><li>sinter：数学中的交集 <code>sinter key1 key2</code></li><li>sunion：数学中的并集 <code>sunion key1 key2</code></li></ul></li><li>保存集合操作的结果：<ul><li>sdiffstore：<code>sdiffstore newValue key1 key2</code>,保存key1和key2的差集结果在newValue中</li><li>sinterstore：<code>sinterstore newValue key1 key2</code>,保存key1和key2的交集结果在newValue中</li><li>sunionstore：<code>sunionstore newValue key1 key2</code>,保存key1和key2的并集结果在newValue中</li></ul></li></ul><h2 id="sorted-set-有序集合"><a href="#sorted-set-有序集合" class="headerlink" title="sorted set(有序集合)"></a>sorted set(有序集合)</h2><h3 id="有序集合特征"><a href="#有序集合特征" class="headerlink" title="有序集合特征"></a>有序集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序集合是无重复元素的、有序，有序集合的的value是由element和score共同组成，有序集合所有的API都是z开头</p><p>有序集合的score可以重复，element不可以重复</p><h3 id="zset跟list和set的区别"><a href="#zset跟list和set的区别" class="headerlink" title="zset跟list和set的区别"></a>zset跟list和set的区别</h3><table><thead><tr><th>集合(set)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>无重复元素</td><td>无重复元素</td></tr><tr><td>无序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><table><thead><tr><th>列表(list)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>可以有重复元素</td><td>无重复元素</td></tr><tr><td>有序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><h3 id="有序集合API"><a href="#有序集合API" class="headerlink" title="有序集合API"></a>有序集合API</h3><ul><li>zadd：<code>zadd key score element(可以是多个)</code>O(logN)</li><li>zrem：<code>zrem key element</code> 删除元素(可以是多个)</li><li>zscore：<code>zscore key element</code>查询分数</li><li>zincrby：<code>zincrby key increScore element</code>，给key增加increScore 分数</li><li>zcard：<code>zcard key</code>返回元素总个数</li><li>zrank：</li><li>zrange：<code>zrange key start end [withscore]</code>，返回指定范围内的排名数，时间复杂度为O(log(n)+m)</li><li>zrangebyscore：<code>zrangebyscore key minScore maxScore [withscore]</code>，返回指定范围的分数段，时间复杂度为O(log(n)+m)</li><li>zcount：<code>zcount key minScore maxScore</code>，返回指定分数范围内的个数</li><li>zremrangebyrank：<code>zremrangebyrank key start end</code>，删除指定排名内的升序元素，时间复杂度为O(log(n)+m)</li><li>zrevrank：从高到低的排名</li><li>zrevrange：</li><li>zrevrangebyscore</li><li>zunionstore：</li><li>zinterstore：</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis初步认识</title>
      <link href="/2019/09/27/redis1/"/>
      <url>/2019/09/27/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的五大数据结构"><a href="#Redis的五大数据结构" class="headerlink" title="Redis的五大数据结构"></a>Redis的五大数据结构</h2><ul><li>String</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h2><ol><li>速度快：因为redis是保存在内存当中的</li><li>持久化：Redis的数据保存在内存中，一般的保存在内存中突然断电内存就会丢失，所以redis在保存数据的时候会异步的保存在硬盘中</li><li>支持多种数据结构：Redis支持(字符串、列表、哈希、集合、有序集合)这五种数据结构，在新版本中也支持BitMaps(位图，使用很小的内存来实现高效的存储)、HyperLoglog(超小内存唯一计数，即使用12K)、GEO(地理信息定位 )这三种衍生的数据结构</li><li>支持多种语言：基本上现在的主流语言都是支持redis的</li><li>功能丰富：支持发布订阅、Lua脚本、事物，pipeline(提高客服端的并发效率)</li><li>简单性：Redis不依赖任何外部库和使用的是单线程模型</li><li>主从复制：主服务器的数据可以同步到从服务器上，给高可用和分布式提供了一个很好的基础</li><li>高可用、分布式：Redis单单靠主从复制是不能进行高可用分布式的，所以Redis2.8版本提供了Redis-Sentinel来支持高可用，Redis3.0版本提供了Redis-Cluster来支持分布式</li></ol><h2 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis应用场景十分的广泛，缓存(比如在网站中可以使用Redis缓存来代替session和cookie)、计数器(比如微博的转发、评论数)、消息队列(比如Celery和redis结合来使用异步任务)、排行榜、实时系统(垃圾邮件过滤功能)、社交系统(比如youtube那些社交网站的共同关注数、粉丝数)等，大多数企业都使用了Redis</p><h2 id="Redis的常用命令"><a href="#Redis的常用命令" class="headerlink" title="Redis的常用命令"></a>Redis的常用命令</h2><ul><li><code>keys</code>：这个一般不在生产环境中使用，其一是因为key是一个很重的命令，时间复杂度为O(n)如果有上万个键值对一下子遍历出来会很慢，这个可以在不在生产环境中使用的从节点使用比较重的命令，不会对生产环境产生危害即可<ul><li><code>keys *</code>：查看所有的键</li><li><code>keys [pattern]</code>：keys支持正则表达式，比如<code>keys he*</code>,就可以选择出所有he开头的key</li></ul></li><li><code>dbsize</code>：计算keys的总数，这个是可以在生产环境中使用的，因为这个不是遍历所有的表，而是内置的一个计数器，所以时间复杂度是O(1)</li><li><code>exists keys</code>：判断一个key是否存在，存在返回1，不存在返回0</li><li><code>del key</code>：删除制定的key-value，成功删除返回1，不成功返回0</li><li><code>expire key seconds</code>：(设置过期时间)，一般用于网站记录用户缓存，seconds就是秒数，seconds为30就是30秒后过期<ul><li><code>ttl key</code>：查看key的过期时间，返回值为-2代表key不存在了，-1表示没有过期时间</li><li><code>persist key</code>：去除key过期时间</li></ul></li><li><code>type key</code>：查看key的数据类型</li><li><code>select number</code>：选择使用第number个数据库</li><li><code>info</code>：查看客户端的所有信息</li></ul><table><thead><tr><th>命令</th><th>时间复杂度</th></tr></thead><tbody><tr><td>keys</td><td>O(n)</td></tr><tr><td>dbsize</td><td>O(1)</td></tr><tr><td>exists keys</td><td>O(1)</td></tr><tr><td>del key</td><td>O(1)</td></tr><tr><td>expire key seconds</td><td>O(1)</td></tr><tr><td>type key</td><td>O(1)</td></tr></tbody></table><h2 id="Redis的数据结构和内部编码"><a href="#Redis的数据结构和内部编码" class="headerlink" title="Redis的数据结构和内部编码"></a>Redis的数据结构和内部编码</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个数据结构都有自己的内部编码，在开发过程中，如果一些元素比较小的时候可以通过空间换时间的操作，这些得看开发中的具体要求和操作来定制</p><h2 id="Redis-的单线程操作"><a href="#Redis-的单线程操作" class="headerlink" title="Redis 的单线程操作"></a>Redis 的单线程操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis的单线程就像一个队列，每一个瞬间只能执行一个命令，所以在开发中，一定要注意不要轻易使用很长时间的命令，不然后面的命令都会阻塞在那</p><p>Redis单线程还这么快的原因跟node.js部分很像，快的原因如下</p><ul><li>Redis采用的是纯内存的存储，内存的存储是非常的快的(这个是主要的原因)</li><li>非阻塞IO</li><li>避免了线程的切换和竞态的消耗</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全文搜索方法的使用</title>
      <link href="/2019/09/26/sou-suo-fang-fa/"/>
      <url>/2019/09/26/sou-suo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="基于-haystack来使用whoosh检索引擎"><a href="#基于-haystack来使用whoosh检索引擎" class="headerlink" title="基于 haystack来使用whoosh检索引擎"></a>基于 haystack来使用whoosh检索引擎</h2><p>这篇博客是基于Django来编写的案例，haystack可以自定义搜索，开发者可以通过haystack间接使用搜索引擎，并且他可以像DJango的ORM一样，只需改少量代码就可以自由切换引擎</p><p>这里拿haystack使用whoosh引擎来作为案例</p><h3 id="基本安装和配置"><a href="#基本安装和配置" class="headerlink" title="基本安装和配置"></a>基本安装和配置</h3><p>首先先安装这两个包</p><pre><code>pip install django-haystackpip install whoosh</code></pre><p>然后在setting.py注册应用haystack</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/18.png" alt></p><p>并且在setting.py文件添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全文检索框架配置</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 使用whoosh引擎</span>        <span class="token comment" spellcheck="true"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.whoosh_backend.WhooshEngine'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 索引文件路径</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 当添加、修改、删除数据时，自动生成索引</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><p>以上的是默认的配置，如果要添加jieba文字的话要另外配置</p><h3 id="生成索引文件"><a href="#生成索引文件" class="headerlink" title="生成索引文件"></a>生成索引文件</h3><p>在你要检索的模型类的那个包中，添加一个文件</p><p>如我要检索的是所有的商品文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/19.png" alt></p><p>里面的search_indexes.py就是我写的文件</p><p>内容如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU<span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#索引字段document=True指定根据表的哪些字段简历索引文件制定在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author = indexes.CharField(model_attr='user')</span>    <span class="token comment" spellcheck="true"># pub_date = indexes.DateTimeField(model_attr='pub_date')</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> GoodsSKU    <span class="token comment" spellcheck="true"># 建立索引数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回所有数据就是对所有的数据进行索引</span></code></pre><p>然后要定义你检索出来的那个界面</p><p>创建如下文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20.png" alt></p><p>goodssku_text.txt就是定义你可以检索的字段，我的检索字段如下：</p><pre><code># 指定根据表中的哪些字段建立索引数据{{ object.name }}  # 根据商品的名称建立索引{{ object.desc }}  # 根据商品的简介建立索引{{ object.goods.detail }}  # 根据商品的详情建立索引</code></pre><p>然后使用命令</p><pre><code>python manage.py rebuild_index</code></pre><p>这样会生成索引文件</p><p>如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/21.png" alt></p><h3 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h3><p>在搜索的那个表单上，填写内容如下</p><pre><code>&lt;form action=&quot;/search&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code></pre><p>然后要添加url路径</p><pre><code>url(&#39;search/&#39;, include(&#39;haystack.urls&#39;)),  # 全文检索框架</code></pre><p>搜索完后结果会提交到一个search.html页面，会传递这几个变量</p><pre><code>query：搜索关键字page：当前页的page对象 –&gt;遍历page对象，获取到的是SearchResult类的实例对象，对象的属性object才是模型类的对象。paginator：分页paginator对象</code></pre><p>然后自定义一个搜索列表的模板，将这三个变量使用Django传递变量的方式添加进去即可</p><h3 id="汉语分词检索"><a href="#汉语分词检索" class="headerlink" title="汉语分词检索"></a>汉语分词检索</h3><p>如果是英文的话一个单词就是一个商品，但是汉语远远比英语复杂的多，比如搜索你好，可以分为你和好</p><p>Python有个jieba包可以帮助我们进行汉语分词</p><p>首先先安装jieba包</p><pre><code>pip install jieba</code></pre><p>要对原来的分词结果使用汉语分词的话就要对下载下来的包进行jieba分词</p><p>进入对pip下载的haystack包里面添加ChineseTokenizer.py文件，内容如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">yield</span> t<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后拷贝原来的whoosh_backend.py文件，改名为whoosh_cn_backend.py</p><p>添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#对原来导入的包添加</span><span class="token keyword">from</span> <span class="token punctuation">.</span>ChineseAnalyzer <span class="token keyword">import</span> ChineseAnalyzer<span class="token comment" spellcheck="true"># 第163行的</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(),      </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span><span class="token comment" spellcheck="true"># 改为</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),  </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span></code></pre><p>然后回去setting.py修改成’ENGINE’: ‘haystack.backends.whoosh_cn_backend.WhooshEngine’</p><p>然后再进行一次索引就可以使用汉语的jieba分词了</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> 全文检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastDFS安装及在Django中的部署</title>
      <link href="/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/"/>
      <url>/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS在阿里云服务器的安装和配置"><a href="#FastDFS在阿里云服务器的安装和配置" class="headerlink" title="FastDFS在阿里云服务器的安装和配置"></a>FastDFS在阿里云服务器的安装和配置</h2><p>FastDFS安装在这篇<a href="https://blog.csdn.net/busishenren/article/details/83584885" target="_blank" rel="noopener">博客</a>讲解的很清楚了，这里我就不再赘述，只作为补充</p><p>如果你是在轻量云服务器安装的话，方法跟esc服务器一样的，直接在控制台开启防火墙规则端口</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/15.png" alt></p><p>开启了防火墙端口还不够</p><p>在进入服务器下，使用这条命令查看防火墙的状态</p><pre><code>firewall-cmd --state</code></pre><p>如果防火墙已开启，则看开放的所有端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果防火墙关闭，那么开启防火墙</p><pre><code>systemctl start firewalld.service</code></pre><p>如果嫌麻烦就把防火墙关了也行，但是不建议这么做</p><p>查看开放的所有端口后，如果没有开启22122和23000端口，那么开启他</p><pre><code>firewall-cmd --zone=public --add-port=22122/tcp --permanent #开启22122端口firewall-cmd --zone=public --add-port=23000/tcp --permanent #开启23000端口firewall-cmd --reload   # 配置立即生效</code></pre><p>再一次查看端口是否开启</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>在部署完FastDFS并且开启storage和tracker服务后，看一下端口是否被监听</p><pre><code>netstat -lnpt</code></pre><p>能看到23000和22122端口被监听那么就说明成功</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/16.png" alt></p><h2 id="FastDFS在Django中的使用"><a href="#FastDFS在Django中的使用" class="headerlink" title="FastDFS在Django中的使用"></a>FastDFS在Django中的使用</h2><p>在Django中，所有资源都是来自于后台的部署，Django后台数据库采用的是ORM模式，Django默认文件的上传是上传到指定的文件夹下面的，如果要修改的话要在一个文件中自定义文件的存储类，也就是继承django.core.files.storage.Storage</p><p>关于文件存储官网文档有很清楚的描述</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/17.png" alt></p><p>在setting.py配置你服务器的fastDFS的ip和端口号</p><pre><code># 设置Django的文件存储类DEFAULT_FILE_STORAGE = &#39;utils.fdfs.storage.FDFSStorage&#39;# 设置fdfs使用的client.conf文件路径FDFS_CLIENT_CONF = &#39;./utils/fdfs/client.conf&#39;# 设置fdfs存储服务器上nginx的IP和端口号FDFS_URL = &#39;&#39;</code></pre><p>然后在一个单独的文件夹(比如utils)里面加入以下两个文件</p><p>storage.py</p><pre><code>from django.core.files.storage import Storagefrom django.conf import settingsfrom fdfs_client.client import *class FDFSStorage(Storage):    def __init__(self, client_conf=None, base_url=None):        &quot;&quot;&quot;初始化&quot;&quot;&quot;        if client_conf is None:            client_conf = settings.FDFS_CLIENT_CONF        self.client_conf = client_conf        if base_url is None:            base_url = settings.FDFS_URL        self.base_url = base_url    def _open(self, name, mode=&#39;rb&#39;):        # 打开文件时使用        pass    def _save(self, name, content):        client=Fdfs_client(&#39;./utils/fdfs/client.conf&#39;)        res = client.upload_by_buffer(content.read())        if res.get(&#39;Status&#39;) != &#39;Upload successed.&#39;:            raise Exception(&#39;上传文件到FastDFS失败&#39;)        filename = res.get(&#39;Remote file_id&#39;)        return filename    def exists(self, name):        &quot;&quot;&quot;Django判断文件名是否可用&quot;&quot;&quot;        return False    def url(self, name):        &quot;&quot;&quot;返回访问文件url路径，不然后台保存的时候会报错&quot;&quot;&quot;        return self.base_url + name</code></pre><p>client.conf(修改相应的字段)</p><pre><code># connect timeout in seconds# default value is 30sconnect_timeout=30# network timeout in seconds# default value is 30snetwork_timeout=60# the base path to store log files# 你的个人电脑的存储日志，必须要有这个路径base_path=/Users/LY/Python_log# tracker_server can ocur more than once, and tracker_server format is#  &quot;host:port&quot;, host can be hostname or ip addresstracker_server=你服务器的IP:22122#standard log level as syslog, case insensitive, value list:### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debuglog_level=info# if use connection pool# default value is false# since V4.05use_connection_pool = false# connections whose the idle time exceeds this time will be closed# unit: second# default value is 3600# since V4.05connection_pool_max_idle_time = 3600# if load FastDFS parameters from tracker server# since V4.05# default value is falseload_fdfs_parameters_from_tracker=false# if use storage ID instead of IP address# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# default value is false# since V4.05use_storage_id = false# specify storage ids filename, can use relative or absolute path# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# since V4.05storage_ids_filename = storage_ids.conf#HTTP settingshttp.tracker_server_port=80#use &quot;#include&quot; directive to include HTTP other settiongs##include http.conf</code></pre><p>文件上传的路径可以随便写，因为这个都没用，上传后Django会自动按照你自己写的自定义存储方法去上传文件</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery异步框架的使用</title>
      <link href="/2019/09/24/celery/"/>
      <url>/2019/09/24/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery是什么"><a href="#Celery是什么" class="headerlink" title="Celery是什么"></a>Celery是什么</h2><p>​    <code>Celery</code>是一个实时处理和任务调度的分布式任务队列，简单的说所就是分布式应用队列，队列的意思就是把任务放在队列中执行，通常应用是把一些耗时的任务放在队列里面，主任务继续执行，耗时任务在队列中执行。</p><p>​    <code>Celery</code>本身只是一个任务队列，或者严格的说是管理分布式任务队列的工具，封装了常用的任务队列操作，通过<code>Celery</code>来管理任务队列的执行和管理，<code>celery</code>本身不含消息服务，它使用第三方消息服务来传递任务，目前，<code>celery</code>支持的消息服务<code>RabbitMQ</code>,<code>redis</code>甚至是数据库，<code>redis</code>是最佳选择，RabbitMQ(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>)、Redis(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis</a>)处理任务队列的方式，两者的使用文档写的很清楚</p><p>​    在实际应用中，可以把一些比如邮件注册、手机注册、网站页面静态化等耗时操作交给<code>Celery</code>队列中，然后让<code>Redis</code>或者<code>RabbitMQ</code>去执行。下面我拿我项目中的案例来演示一下，也便于自己加深印象</p><h2 id="Celery演示"><a href="#Celery演示" class="headerlink" title="Celery演示"></a>Celery演示</h2><p>这里我拿的都是我最熟悉的<code>Django</code>框架和<code>redis</code>来演示</p><p><code>首先要导入Celery包</code></p><p>一般第三方的处理文件都会专门放到一个文件夹里面，我的直接命名<code>Celery_tasks</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>直接使用装饰器就可以使得普通的方法变成异步方法</p><p>上面的是uwsgi使用的服务器的代码，在运行异步方法的服务器还要加上这一行代码， 整体代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#dailyfreshshop是我的项目名</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>把原本的同步的方法转换为<code>Celery</code>异步的代码运行即可</p><p>如果你在linux系统上运行Celery代码，就在linux服务器端运行<code>celery -A celery_tasks.tasks worker -l info</code></p><p>如果是windows系统上运行Celery代码，就运行<code>celery -A celery_tasks.tasks worker -l info -P eventlet</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维人员的gitlab基本操作</title>
      <link href="/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/"/>
      <url>/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本篇讲解了运维人员在后端的基本使用：创建开发项目、定义开发总监、开发人员等</p></blockquote><h2 id="管理员的操作"><a href="#管理员的操作" class="headerlink" title="管理员的操作"></a>管理员的操作</h2><p>点击上面的扳手图标可以进入后台管理界面<br><img src="https://img-blog.csdnimg.cn/20190922092307422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>点击左边的monitoring标签<br><img src="https://img-blog.csdnimg.cn/20190922092435431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>第一个system info是服务器的资源使用情况<br><img src="https://img-blog.csdnimg.cn/20190922092634854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>logs就是gitlab的应用日志和使用日志</p><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>以下两种方法都可以添加账号<br>点击overview的new user按钮，可以为使用者创建账号<br><img src="https://img-blog.csdnimg.cn/20190922093118594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190922093433289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击右上角的new user按钮就可以给项目主负责人创建账号</p><h2 id="给项目添加人员"><a href="#给项目添加人员" class="headerlink" title="给项目添加人员"></a>给项目添加人员</h2><p>我这里原先就已经创建好了一个名为test的仓库<br>我这里给test仓库添加人员<br>点击project1<br><img src="https://img-blog.csdnimg.cn/20190922093735602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>再点击你需要操作的仓库<br><img src="https://img-blog.csdnimg.cn/20190922093800821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点击manage access<br><img src="https://img-blog.csdnimg.cn/20190922093832764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里你要给项目添加的是什么权限可以自定义<br><img src="https://img-blog.csdnimg.cn/20190922094119996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>master就是有合并分支的权限，developer就是可以用自己的分支写代码的权限<br><img src="https://img-blog.csdnimg.cn/20190922094248435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="给人员修改自己的密码"><a href="#给人员修改自己的密码" class="headerlink" title="给人员修改自己的密码"></a>给人员修改自己的密码</h2><p>点击扳手按钮重回管理界面，点击user<br><img src="https://img-blog.csdnimg.cn/20190922094452932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以给人员信息进行修改了<br><img src="https://img-blog.csdnimg.cn/20190922094506428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>可以修改密码<br><img src="https://img-blog.csdnimg.cn/20190922094616363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="模拟企业开发者和负责人的使用流程"><a href="#模拟企业开发者和负责人的使用流程" class="headerlink" title="模拟企业开发者和负责人的使用流程"></a>模拟企业开发者和负责人的使用流程</h2><p>这里我不用git原始命令操作，因为比较麻烦，我贪方便就用sourcetree操作，原理是一样的</p><p>开发者使用自己的分支来编写代码</p><p>黏贴这个地址<br><img src="https://img-blog.csdnimg.cn/20190922095222895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>我随便写了一个test文件，我上传上去的时候会让我给账号密码，就是你刚刚设置的devloper账号密码<br><img src="https://img-blog.csdnimg.cn/20190922104059340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以显示我刚刚上传的分支了<br><img src="https://img-blog.csdnimg.cn/20190922104108895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点右上角蓝色的create merge request<br><img src="https://img-blog.csdnimg.cn/20190922104243370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>assign是项目负责人的账号就行了，其他的你随便填<br>然后用同样的方法打开负责人账号lead<br><img src="https://img-blog.csdnimg.cn/20190922104425940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>右上角有个橙色的消息，点开<br><img src="https://img-blog.csdnimg.cn/20190922104503516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>就可以看到开发者提交的申请<br><img src="https://img-blog.csdnimg.cn/20190922104537582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击merge就可以合并分支<br>这里还可以给开发者回复<br><img src="https://img-blog.csdnimg.cn/20190922104737164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>重新返回项目，就可以看到你刚刚操作的文件合并到主分支了<br><img src="https://img-blog.csdnimg.cn/20190922104839441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab部署与使用</title>
      <link href="/2019/09/21/gitlab/"/>
      <url>/2019/09/21/gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="gitlab的安装"><a href="#gitlab的安装" class="headerlink" title="gitlab的安装"></a>gitlab的安装</h2><p>gitlab和github的区别想必大家都懂，这里我就不再赘述</p><p>这里我来用阿里云学生服务器centos7来演示gitlab的安装过程</p><p>首先打开你的防火墙控制台，开启防火墙规则</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE6.png" alt></p><p><strong>注(这里我用的是服务器安装，一般的服务器都默认安装了ssh的，服务器ssh这里可以输入命令也可以不用，如果是用虚拟机的就要一定要安装ssh，并且在命令前加上sudo)</strong></p><p>首先安装ssh，</p><pre><code>yum install -y curl policycoreutils-pythonopenssh-server</code></pre><p>将SSH服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable sshd</code></pre><p>启动SSH服务，安装命令：</p><pre><code>systemctl start sshd</code></pre><p>安装防火墙：</p><pre><code>yum install firewalld systemd -y</code></pre><p>开启防火墙：</p><pre><code>service firewalld  start</code></pre><p>添加http服务到防火墙：</p><pre><code>firewall-cmd --permanent --add-service=http</code></pre><p>然后重启防火墙：</p><pre><code>systemctl reload firewalld</code></pre><p>安装Postfix以发送通知邮件：</p><pre><code>yum install postfix</code></pre><p>将postfix服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable postfix</code></pre><p>启动postfix</p><pre><code>systemctl start postfix</code></pre><p><strong>注意：这里如果成功那么没啥，可能会出现以下这个问题</strong></p><p><code>Job for postfix.service failed because the control process exited with error code. See &quot;systemctl st</code></p><p>这个时候不要慌</p><p>修改/etc/postfix/main.cf这个文件</p><pre><code>vim /etc/postfix/main.cf</code></pre><p>修改这两个字段为：</p><pre><code>inet_interfaces = allinet_protocols = ipv4</code></pre><p>接下来添加gitlab镜像：(这里的我用的是centos7的，centos6的话另外找资料)</p><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>安装gitlab 安装命令：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p><strong>注意，这里可能出现如下错误</strong></p><p><code>warning: gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</code> </p><p>这个是缺少gitlab 的依赖</p><p>下载依赖：</p><pre><code>yum -y install policycoreutils openssh-server openssh-clients postfix</code></pre><p>然后再执行：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>然后修改gitlab的配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p>找到external_url这个字段，把里面的值修改为<code>http://你的服务器ip:你的端口</code>，比如<code>http://36.102.3.26:8899</code>，然后保存退出</p><p><strong>这里注意啦！！！</strong></p><p>这里我用的是开启防火墙配置的，所以要先看看防火墙开启没有</p><pre><code>firewall-cmd --state</code></pre><p>如果没开启就开启防火墙：<code>systemctl stop firewalld.service</code></p><p>然后看一下你有没有开启你配置的端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果没有就添加端口，并且重启</p><pre><code>firewall-cmd --zone=public --add-port=8899/tcp --permanent   # 开放8899端口firewall-cmd --reload   # 配置立即生效</code></pre><p>然后执行命令</p><pre><code>gitlab-ctl reconfigure</code></pre><p>然后</p><pre><code>gitlab-ctl restart</code></pre><p>这样就可以通过你的服务器ip:你的端口就可以访问gitlab了，这个是成功画面</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE7.png" alt></p><p>这个是要你重新配置你的密码，默认的账号是root</p><h2 id="502错误解决和优化"><a href="#502错误解决和优化" class="headerlink" title="502错误解决和优化"></a>502错误解决和优化</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE9.png" alt></p><p><strong>注意，第一时间是看错误日志，而不是立马去谷歌百度，因为每一个人的错误都是不同的</strong></p><p>第一时间要查看错误日志，而不是查百度，因为每个人的错误都不同</p><pre><code># 看看unicorn启动日志cat /var/log/gitlab/unicorn/unicorn_stderr.log# 然后再看看gitlab日志，看看是哪里出错tail -100 /var/log/gitlab/gitlab-rails/production.log</code></pre><p><strong>每个人的错误都不同，根据错误日志的问题再去百度谷歌才是正道理</strong></p><h3 id="端口错误问题"><a href="#端口错误问题" class="headerlink" title="端口错误问题"></a>端口错误问题</h3><p><strong>端口错误都是端口被占用，当然按照我上面的方法是不会出现这个情况的</strong></p><p>此时继续修改配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p><strong>看看你的错误日志，我的是8080端口被占用，改端口就行了</strong></p><p>找到以下字段取消注释并且修改：</p><pre><code># unicorn[&#39;port&#39;] = 8090   #千万不要是原来的8899端口啊，8090也是我打开过的端口，一样的话好像会报404的</code></pre><h3 id="内存爆满和内存消耗过大的问题"><a href="#内存爆满和内存消耗过大的问题" class="headerlink" title="内存爆满和内存消耗过大的问题"></a>内存爆满和内存消耗过大的问题</h3><p>但是最大的问题就是内存爆满，用命令看看<code>free -h</code>,或者用<code>htop</code>没有htop命令就下载一下<code>yum install htop</code></p><p>看一下结果我相信大部分人都跟我一样，物理内存爆满，然后发现swap居然是0有点奇怪</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE10.png" alt></p><p>然后我去去谷歌找了一下原因，发现阿里云默认情况下是不启用swap的，所以我们要自己添加swap来解决</p><h4 id="使用swap分区来减少内存消耗"><a href="#使用swap分区来减少内存消耗" class="headerlink" title="使用swap分区来减少内存消耗"></a>使用swap分区来减少内存消耗</h4><ol><li>查看当前系统中是否已经启用swap分区</li></ol><pre><code>cat /proc/swaps</code></pre><ol start="2"><li>如果没有启用swap分区功能，则新建一个专门的文件用于swap分区</li></ol><pre><code>dd if=/dev/zero of=/data/swap bs=512 count=8388616</code></pre><p><strong>swap的大小是count的大小乘以bs大小，上面命令的大小是4294971392，即4GB</strong></p><ol start="3"><li>通过mkswap命令将上面新建出的文件做成swap分区</li></ol><pre><code>mkswap /data/swap</code></pre><ol start="4"><li>查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调整成30或者60</li></ol><pre><code>cat /proc/sys/vm/swappinesssysctl -w vm.swappiness=60#永久修改若想永久修改，则编辑/etc/sysctl.conf文件，改文件中有vm.swappiness变量配置，默认为0</code></pre><p><strong>注：若想永久修改，则编辑/etc/sysctl.conf文件</strong></p><ol start="5"><li>启用此交换分区的交换功能</li></ol><pre><code>swapon /data/swapecho “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</code></pre><ol start="6"><li>然后再看看swap分区是否启动</li></ol><pre><code>cat /proc/swaps </code></pre><ol start="7"><li>然后重启gitlab看看</li></ol><pre><code>gitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE11.png" alt></p><p>哦吼，这不就，好起来了吗</p><p>再运行gitlab看看</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE12.png" alt></p><p>运行速度如丝般顺滑，刚部署好不知道多少倍，除此之外可能还有其他的bug，但是这个看错误日志修改就好了</p><p><strong>注意：如果修改了配置文件，一定要执行以下命令</strong></p><pre><code>gitlab-ctl reconfiguregitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE8.png" alt></p><p><strong>如果配置了还是502，耐心等一等，等那么一分钟左右就好了</strong></p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>​    这个运行速度慢折腾了我一下午，问题归根结底就是…..服务器配置太烂了，性能差就会经常出现502，因为官方推荐的服务器性能是最低 双核 + 8GB RAM，所以这里只能使用swap才能正常使用</p><p>​    gitlab的使用方法是和github差不多的，可以用git命令行执行，也可以用sourcetree直接clone下来</p><p><strong>解决问题使用到的博客</strong></p><blockquote><p><a href="https://blog.csdn.net/qq_25283709/article/details/78207881" target="_blank" rel="noopener">gitlab服务器经常出现502(阿里云搭建)</a></p></blockquote><blockquote><p><a href="https://blog.51cto.com/dgd2010/1762907?spm=a2c4e.10696291.0.0.2d4919a42dBKR8" target="_blank" rel="noopener">阿里云云主机添加swap分区与swap性能优化</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/wanchaopeng/article/details/84771195" target="_blank" rel="noopener">gitlab占用内存过大</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitbook搭建github上的书城</title>
      <link href="/2019/09/21/gitbook/"/>
      <url>/2019/09/21/gitbook/</url>
      
        <content type="html"><![CDATA[<h2 id="gitbook的安装和使用"><a href="#gitbook的安装和使用" class="headerlink" title="gitbook的安装和使用"></a>gitbook的安装和使用</h2><p>安装Gitbook前应该先安装node.js，安装这里就不赘述了，直接进入node交互界面</p><pre><code>$ npm install gitbook-cli -g</code></pre><p>检验是否安装成功</p><pre><code>$ gitbook -V</code></pre><p>进入一个空文件夹</p><pre><code>$ gitbook init</code></pre><p>然后会创建 <code>README.md</code> 和 <code>SUMMARY.md</code> 这两个文件， <code>README.md</code> 是说明文件， <code>SUMMARY.md</code>是书的章节目录，然后输入</p><pre><code>$ gitbook serve</code></pre><p>就可以创建gitbook了，默认端口是4000，地址输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以进入页面，可以用一些markdown编辑器来写，然后就可以在网页上看到实时编辑的内容了。</p><p>目录结构如图</p><p><img src="https://img-blog.csdnimg.cn/20190720225822792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190720225836562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>gitbook的目录结构就是缩进，语法结构一看就懂</p><p>gitbook写完后可以输入命令</p><pre><code>$ gitbook build</code></pre><p>使用这个命令后在本地会生成一个_book的文件夹，里面是自动生成的html文件，这些htm文件在本地打开是不具备跳转效果的，要部署到网上才可以具备全部效果</p><h2 id="部署gitbook到github上"><a href="#部署gitbook到github上" class="headerlink" title="部署gitbook到github上"></a>部署gitbook到github上</h2><p>根据上面的操作，通过 <code>$ gitbook build</code> 把</p><p>先在自己的github上创建一个新的仓库，然后把刚刚_book里面的文件上传到github上，这部分的方法是个程序员都应该掌握，这里不再赘述，上传完之后点击setting，拉倒最下面有个github page的，如图</p><p><img src="https://img-blog.csdnimg.cn/20190720230934856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>上面绿色这个地址就是你的网上书籍地址了</p><p>如果要给你自己的gitbook设置一个域名，方法如我上一篇<a href="https://www.ly-blog.top/2019/09/05/hello-world/" target="_blank" rel="noopener">博客</a>的自定义域名部分</p><h2 id="gitbook-安装插件"><a href="#gitbook-安装插件" class="headerlink" title="gitbook 安装插件"></a>gitbook 安装插件</h2><p>单单使用gitbook来写，写出来的界面不是特别的好看，功能也没有那么多，gitbook是可以添加插件的，比如返回顶部、折叠、添加版权信息、分享等功能</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客并部署域名</title>
      <link href="/2019/09/05/hexo/"/>
      <url>/2019/09/05/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ol><li><p>安装node</p><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>(电脑是多少位的就下载多少位)</p><p>安装成功之后在cmd输入命令</p><pre><code>node -v</code></pre><p>可以看到版本就安装成功</p></li><li><p>安装Git</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>git配置百度查一查，这里不多说</p></li><li><p>安装Hexo</p><pre><code>$ npm install -g hexo</code></pre><p>输入 <code>hexo -v</code>可以看到版本就安装成功</p></li></ol><h2 id="开始第一个博客"><a href="#开始第一个博客" class="headerlink" title="开始第一个博客"></a>开始第一个博客</h2><p>在命令行模式下进入个空文件夹，输入</p><pre><code>hexo init</code></pre><p>就开始创建hexo博客文件(可能需要一定时间)</p><p>然后输入命令安装博客所需要的包</p><pre><code>npm install</code></pre><p>此时博客就已经安装好了</p><p>输入命令开启你的第一个博客</p><pre><code>hexo server#或者hexo s</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/01.png" alt></p><p>如图所示，第一个博客就已经搭建好了</p><p>​    博客的主题是可以修改的，可以参照网上流传的主题，有很多很漂亮的主题可以使用，比如我这里使用的是<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">hexo-theme-matery-1.0.1</a>,主题可以参照这个网站</p><p>​    需要修改主题的话只需要把下载下来的主题文件,放到刚刚搭建的博客文件夹的theme文件夹下,然后修改博客根目录的_config.yml文件的theme字段修改成主题的名字即可</p><pre><code>theme: hexo-theme-matery-1.0.1</code></pre><p>这里我用的是上面提到的主题，效果如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/05.png" alt></p><h3 id="添加markdown文章"><a href="#添加markdown文章" class="headerlink" title="添加markdown文章"></a>添加markdown文章</h3><p>接下来我要添加自己的字段</p><p>在根目录的<code>_posts</code>文件夹就是首页展示的文章</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/02.png" alt></p><p>直接在<code>_posts</code>文件夹添加markdown文件就可以在前端展示文章</p><h3 id="添加标签tags页"><a href="#添加标签tags页" class="headerlink" title="添加标签tags页"></a>添加标签tags页</h3><p>(如果你的source目录没有<code>tags/index.md</code> 文件，那么就看以下步骤)</p><p>就使用命令添加<code>tags</code>文件夹</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>然后在<code>tags</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: tagsdate: 2019-09-4 18:37.25type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><p>然后在<code>_posts</code>文件夹下的markdown文件的头部添加tags字段</p><p>例如：</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - github---</code></pre><p>tags最好用这种方法来写，多个标签就填多个</p><p>效果截图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/06.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/07.png" alt></p><h3 id="添加分类categories页"><a href="#添加分类categories页" class="headerlink" title="添加分类categories页"></a>添加分类categories页</h3><p>(如果你的source目录没有<code>categories/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>然后在<code>categories</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: categoriesdate: 2019-09-4 18:39.36type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><p>然后在markdown文件的头部添加<code>categories</code>字段</p><p>例如</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - githubcategories:    - hexo---</code></pre><p>效果如图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/08.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/09.png" alt></p><h3 id="新建关于我about页"><a href="#新建关于我about页" class="headerlink" title="新建关于我about页"></a>新建关于我about页</h3><p>(如果你的source目录没有<code>about/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>然后在<code>about</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: aboutdate: 2019-09-4 18:41.56type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><p>效果截图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/11.png" alt></p><p>about页面的内容是可以通过<code>themes\hexo-theme-matery-1.0.1\_config.yml</code>来修改</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/12.png" alt></p><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>然后在<code>friends</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> 2019<span class="token punctuation">-</span>09<span class="token punctuation">-</span>4 18<span class="token punctuation">:</span><span class="token number">45.36</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><strong>文章还有一个description字段，是显示在主页的摘要，如果不填就是默认取内容的前70个字</strong></p><h2 id="Hexo-Theme-Matery主题的配置"><a href="#Hexo-Theme-Matery主题的配置" class="headerlink" title="Hexo-Theme-Matery主题的配置"></a>Hexo-Theme-Matery主题的配置</h2><p>Hexo-Theme-Matery主题的其他配置可以看他们的<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">主题文档</a></p><p>如果要对Hexo-Theme-Matery主题进行个性化的修改的话，可以参考这个<a href="https://www.jianshu.com/p/2e6ae2123d57" target="_blank" rel="noopener">大神的文章</a></p><p>这里对上面主题修改的文章有说不明白的地方进行补充说明</p><h3 id="自定义每日一言"><a href="#自定义每日一言" class="headerlink" title="自定义每日一言"></a>自定义每日一言</h3><p>如果你不喜欢文章里面的每日一言，想换一个比如<a href="https://api.ooopn.com/ciba/api.php?type=json" target="_blank" rel="noopener">金山每日一言</a>那些的话，就直接在主题文件里面的hexo-theme-matery-1.0.1/layout/index.exj文件添加个ajax代码<br>例如:</p><pre><code>&lt;script&gt;(function () {        $.ajax({            url: &quot;https://api.ooopn.com/ciba/api.php?type=json&quot;,//向本地的json文件发送请求            type: &quot;GET&quot;,            success: function (data) {                ciba=data.ciba  #ciba就是你插入片段的id                document.getElementById(&quot;ciba&quot;).innerHTML=ciba            },            error: function (error) {                document.getElementById(&quot;ciba&quot;).innerHTML=error            }        })    })();&lt;/script&gt;</code></pre><h3 id="评论的gittalk配置"><a href="#评论的gittalk配置" class="headerlink" title="评论的gittalk配置"></a>评论的gittalk配置</h3><p>gittalk主题配置说明没有说清楚，我这里补充一下，因为主题配置说推荐gittalk，所以我这里也拿gittalk来说明</p><p>首先要申请github授权，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请地址</a></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><ul><li>Application name：项目名，随便填</li><li>Homepage URL：博客地址，也就是要访问的地址，我的是<a href="https://373005226.github.io">https://373005226.github.io</a></li><li>Application description：应用描述，这个随便填</li><li>Authorization callback URL:这个如果你有自己的域名就填自己的域名，没有就和上面的Homepage URL一样就好了</li></ul><p>输入完后会给你一个Client ID和Client Secret</p><p>打开主题配置文件的_config.yml，找到gittalk的这一行</p><pre><code>gitalk:  enable: true        #默认是false，改为true才可以开启评论  owner:             #这里是你的github用户名&#39;  repo:             #这里是你的博客地址  oauth:    clientId:         #刚刚申请的id    clientSecret:     #刚刚申请的密码  admin:             #一般都是你的github用户名了</code></pre><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>上传到你的博客就可以看到评论地址搞定了</p><h2 id="hexo的常见命令"><a href="#hexo的常见命令" class="headerlink" title="hexo的常见命令"></a>hexo的常见命令</h2><p>常见命令</p><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>缩写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>组合命令：</p><pre><code>hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h2 id="将hexo博客部署到github上"><a href="#将hexo博客部署到github上" class="headerlink" title="将hexo博客部署到github上"></a>将hexo博客部署到github上</h2><p>首先要注册一个github账号，注册步骤就跳过了</p><p>新建一个仓库，名字格式最好如下:</p><p>账号名.github.io</p><p>比如我的账号是373005226，仓库的名字就是373005226.github.io</p><p>然后新建一个index.html文件，内容随便写，如图</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/13.png" alt></p><p>然后输入刚刚的仓库名就可以看到自己刚刚写的东西了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/14.png" alt></p><p>紧接着在博客源文件的_config.yml文件下修改如下字段:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/15.png" alt></p><p>!!!格式要像我这样一样啊，或者填<a href="https://github.com/373005226/373005226.github.io.git" target="_blank" rel="noopener">https://github.com/373005226/373005226.github.io.git</a></p><p>然后再命令行输入这三行代码</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>根据上述步骤就可以上传到github了</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>github可以绑定自己买的域名</p><p>域名可以去各大服务商买，这里我用的是阿里云</p><p>购买完域名后，进入域名解析</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/16.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/17.png" alt></p><p>这里的记录值好像是不一定的，记录值就是你打开cmd命令行，ping 你的账号.github.io</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/18.png" alt></p><p>先使用<code>hexo d</code>上传好代码到github上之后，然后在github上新建一个CNAME(没有后缀)文件，里面填写你购买的域名(加不加www都可以)<br><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/19.png" alt></p><p>然后点击settings找到Github Pages填写自己的域名</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/21.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/22.png" alt></p><p>然后就可以绑定自己的域名了</p><h2 id="markdown图片的存储"><a href="#markdown图片的存储" class="headerlink" title="markdown图片的存储"></a>markdown图片的存储</h2><p>写markdown有时候本地编辑没问题，但是上传到服务器的图片有时候是失效的，所以最好图片之类的媒体资源放到<strong>腾讯云、七牛云</strong>等服务商上面。因为typora黏贴文件默认是在本地的，所以<code>hexo -s</code>一看图片都是失效的，这里我推荐使用<strong>腾讯云的OSS存储</strong>作为图片存储方法，<strong>腾讯云</strong>有免费的6个月给你使用，而且过了6个月的费用还不贵。这里我介绍一款自动上传到腾讯云等平台的软件：<code>picGo</code>，下载地址： <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> </p><p>如图，直接拖动图片就可以立即上传了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20191025120326.png" alt></p><p>关于这个图床工具的使用，这篇博客有详细介绍： <a href="https://www.jianshu.com/p/9d91355e8418" target="_blank" rel="noopener">https://www.jianshu.com/p/9d91355e8418</a> </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
