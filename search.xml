<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>天天生鲜项目总结</title>
      <link href="/2019/10/14/tian-tian-sheng-xian-zong-jie/"/>
      <url>/2019/10/14/tian-tian-sheng-xian-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做天天生鲜项目的时候使用了太多的技术，很多不会的我参考了很多的博客才做出来，这里记录这个项目的常用技术点，以便于我开发第二个系统</p></blockquote><h2 id="使用Django内置的方法发送邮件"><a href="#使用Django内置的方法发送邮件" class="headerlink" title="使用Django内置的方法发送邮件"></a>使用Django内置的方法发送邮件</h2><p>首先先在setting.py文件里面配置你的邮件服务器，邮件服务器在QQ邮箱、网易163邮箱可以免费注册。</p><p>将SMTP服务器的配置信息放到setting.py文件里面，配置信息如以下格式：</p><pre class=" language-python"><code class="language-python">EMAIL_HOST <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>EMAIL_PORT <span class="token operator">=</span> <span class="token number">25</span>EMAIL_HOST_USER <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span>EMAIL_HOST_PASSWORD <span class="token operator">=</span> <span class="token string">"***************"</span>EMAIL_USE_TLS<span class="token operator">=</span> <span class="token boolean">False</span>EMAIL_FROM <span class="token operator">=</span> <span class="token string">"373005226@qq.com"</span></code></pre><p>然后在需要发送邮件的方法内导入需要的包就可以使用Django内置的发送邮件函数了</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入setting刚刚配置的文件</span><span class="token keyword">from</span> dailyfreshshop<span class="token punctuation">.</span>settings <span class="token keyword">import</span> SECRET_KEY<span class="token punctuation">,</span>EMAIL_FROM<span class="token comment" spellcheck="true">#使用Django内置的发送方法</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mailemail_title <span class="token operator">=</span> <span class="token string">"天天生鲜注册激活链接"</span>email_body <span class="token operator">=</span> <span class="token string">''</span>sender <span class="token operator">=</span> EMAIL_FROMreceiver <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span>html_message <span class="token operator">=</span> <span class="token string">"&lt;h1>%s，欢迎您注册天天生鲜商城，请点击下面的连接激活你的账号&lt;/h1>"</span> \<span class="token string">"&lt;a href='http://127.0.0.1:8000/active/%s'>http://127.0.0.1:8000/active/%s&lt;/a>"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>    username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>send_mail<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> email_body<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#发送函数的参数</span><span class="token comment" spellcheck="true">#第一个参数email_title是标题</span><span class="token comment" spellcheck="true">#第二个参数email_body是内容，但是这个内容只能是字符串，如果再html_message写了这里就可以不写</span><span class="token comment" spellcheck="true">#第三个参数sender是setting配置好的SMTP服务器内容</span><span class="token comment" spellcheck="true">#第四个参数receiver是要发送的人的邮箱账号</span><span class="token comment" spellcheck="true">#第五个参数html_message=html_message，这个是如果你的内容共有html标签的话可以解析成html内容</span></code></pre><h2 id="邮箱注册，用户信息加密"><a href="#邮箱注册，用户信息加密" class="headerlink" title="邮箱注册，用户信息加密"></a>邮箱注册，用户信息加密</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在发送邮件注册验证码的时候，为了防止有心人注册之后使用发送过来的激活码调整激活码中用户的ID，不停地输入修改后的激活码就会给服务器带来压力，所以在发送邮箱激活码的时候一定要加密，并且设置时间</p><p>&emsp;</p><p>使用文档：<a href="https://itsdangerous.readthedocs.io/en/1.1.x/" target="_blank" rel="noopener">https://itsdangerous.readthedocs.io/en/1.1.x/</a></p><p>安装加密库：</p><pre><code>pip install -U itsdangerous</code></pre><p>&emsp;</p><p>打开python shell模拟使用方法：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer <span class="token keyword">as</span> Serializer<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDYyNCwiZXhwIjoxNTcxMDQ0MjI0fQ.IjEyMyI.jvwwArkwJP0sBMDyO8ydqIndyd1EqvrvsHAYah4sMqWhR4PFvaoQJ3rpybXmJMjbX4GTHNf1Fw_cCCFfuaixpQ'</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token string">'123'</span><span class="token operator">>></span><span class="token operator">></span><span class="token string">"------------------把过期时间设置成2秒-------------------------"</span><span class="token operator">>></span><span class="token operator">></span> serializer<span class="token operator">=</span>Serializer<span class="token punctuation">(</span><span class="token string">'secretkey'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> info2<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">>></span><span class="token operator">></span> res<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> resb<span class="token string">'eyJhbGciOiJIUzUxMiIsImlhdCI6MTU3MTA0MDc2NiwiZXhwIjoxNTcxMDQwNzY4fQ.IjEyMyI.ePHmZzoJN1bPNhfI-QOM22ZcqUXjdYLuReDSd2AMu3Sgn1zCwcWTjTSTZq5ZD97WnzVou8J65qgb2fRh_Elpgg'</span><span class="token operator">>></span><span class="token operator">></span> 两秒后<span class="token operator">>></span><span class="token operator">></span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"C:\Users\LY\Envs\dailyfresh\lib\site-packages\itsdangerous\jws.py"</span><span class="token punctuation">,</span> line <span class="token number">205</span><span class="token punctuation">,</span> <span class="token keyword">in</span> loads    date_signed<span class="token operator">=</span>self<span class="token punctuation">.</span>get_issue_date<span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">,</span>itsdangerous<span class="token punctuation">.</span>exc<span class="token punctuation">.</span>SignatureExpired<span class="token punctuation">:</span> Signature expired</code></pre><p>以如上的测试依据，添加代码</p><p><strong>注册发送邮箱激活码的类：</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#邮箱的激活码是由用户的ID去加密而成的</span>serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'confirm'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span>token<span class="token operator">=</span>serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span>token <span class="token operator">=</span> token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>&emsp;</p><p><strong>激活验证码的类</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AciveUserView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> Serializer<span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            info<span class="token operator">=</span>serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#获取info的用户id</span>            user_id<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token string">'confirm'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#根据id来获取用户信息</span>            user<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>user_id<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>is_active<span class="token operator">=</span><span class="token number">1</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>reverse<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> SignatureExpired <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#激活链接过期了</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'激活链接过期，请重新提交'</span><span class="token punctuation">)</span></code></pre><p>这样就可以保证每一次发送的激活码都唯一，这样就保证了激活码的安全性</p><h2 id="异步方式"><a href="#异步方式" class="headerlink" title="异步方式"></a>异步方式</h2><p><img src="C:%5CUsers%5CLY%5CPictures%5C%E5%8D%9A%E5%AE%A2%E7%85%A7%E7%89%87%5C3.png" alt="Celery流程图"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; broker可以选择RabbitMQ和Redis作为消息中间人去处理耗时任务，RabbitMQ是生产环境中最佳的选择，使用文档如下：<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>，Redis也是一款功能完备的broker选项，但是Redis是一个内存级别的数据库，如果突然断电或者电源故障，Redis在内存中的数据就可以避免这种情况。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网站设计中，邮件发送等操作还算是比较耗时的，如果发送邮件和完成跳转是同步进行的话，要等邮件发送完成再跳转到指定页面，停顿的那几秒就会给用户带来很不好的体验，所以异步耗时操作最好是交给异步方法去执行。这个项目我拿的是redis作为中间件来执行</p><h2 id="异步发送邮件"><a href="#异步发送邮件" class="headerlink" title="异步发送邮件"></a>异步发送邮件</h2><p>第一步当然是redis服务器能够正常启动啦，我的redis服务器是部署到本地先的</p><p>第二步是把需要异步操作的任务封装成函数，然后把原来同步操作的步骤使用异步的函数代替</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mail <span class="token keyword">import</span> send_mail<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment" spellcheck="true">#--------------这一段是异步任务执行端必须加入以下代码--------------------</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#celery_tasks是我存放异步任务的文件夹</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'celery_tasks.tasks'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1/8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#必须加上装饰器才可以变成异步任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">send_register_active_email</span><span class="token punctuation">(</span>to_email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""发送激活邮件"""</span>    <span class="token comment" spellcheck="true"># 组织邮件信息</span>    subject <span class="token operator">=</span> <span class="token string">'天天生鲜欢迎信息'</span>    message <span class="token operator">=</span> <span class="token string">''</span>    sender <span class="token operator">=</span> settings<span class="token punctuation">.</span>EMAIL_FROM  <span class="token comment" spellcheck="true"># 发送人</span>    receiver <span class="token operator">=</span> <span class="token punctuation">[</span>to_email<span class="token punctuation">]</span>    html_message <span class="token operator">=</span> <span class="token string">'&lt;h1>%s, 欢迎您成为天天生鲜注册会员&lt;/h1>请点击下面链接激活您的账户&lt;br/>&lt;a href="http://127.0.0.1:8000/user/active/%s">http://127.0.0.1:8000/user/active/%s&lt;/a>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> token<span class="token punctuation">,</span> token<span class="token punctuation">)</span>    send_mail<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> message<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> html_message<span class="token operator">=</span>html_message<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试之常用模型</title>
      <link href="/2019/10/11/ruan-jian-ce-shi/"/>
      <url>/2019/10/11/ruan-jian-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="软件测试分类总览"><a href="#软件测试分类总览" class="headerlink" title="软件测试分类总览"></a>软件测试分类总览</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570813998688.png" alt="软件测试分类图"></p><p>单元测试：集中编码和单元测试中，大多数时候用来开发自测、自我校验的一个手段</p><p>冒烟测试：在后续需求中，对主要流程进行测试</p><p>集成测试：模块与模块之间的测试</p><p>系统测试：通过测试用例的执行来完成过程</p><p>α测试：α测试就是让用户、开发人员、测试人员共同参与的测试</p><p>β测试：β测试就是交给最终用户测试 ，简明而言就是游戏内测</p><p>……</p><h2 id="软件测试常用模型"><a href="#软件测试常用模型" class="headerlink" title="软件测试常用模型"></a>软件测试常用模型</h2><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，瀑布模型的软件生命周期是分为：<strong>计划、分析、设计、编码、测试和维护6个阶段</strong>，瀑布模型的缺点就是早期的错误只能到后期的测试阶段才能知道。V模型就是对瀑布模型做了个改进，在软件开发的生命周期里，软件开发和测试活动同时进行，这样机会极大的减少Bug的几率。</p><p>​        <img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570853745995.png" alt="V模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V模型最大的价值就是标明了测试过程中分开了很多个级别，同时也描述了开发过程阶段和测试阶段的对应关系：<strong>单元测试以详细设计为参考、集成测试以概要设计为参考、系统测试以需求分析为参考、到客户的验收测试以用户需求为参考</strong>，一一对应的关系十分明确，但是还是有局限性：<strong>测试还是在编码阶段的最后一个活动，比如需求分析的错误还是要到系统测试才能发现，有十分大的滞后性</strong>，所以这就产生了一个新的模型：<strong>W模型</strong></p><h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于V模型而言，W模型更为科学，W模型是V模型的一个发展，强调测试的过程伴随着整个开发周期，测试的对象也不仅仅只是程序，需求、功能、设计也同样需要测试，测试和开发也就是变成了同步执行，有利于尽早的发现问题，对于那种高性能、高风险的互联网软件、或者难以进行模块化的大型软件，使用V模型就有一定的困难和风险了，需要更强调迭代的开发模型和敏捷开发模型，这个时候使用W模型就会更好一些。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型就是从V模型演化而来，相对于V模型，W模型增加了软件各开发阶段中应同步进行的验证和确认活动，W模型明确了测试和开发的并行关系，测试与开发同步进行更利于发现问题和降低风险。</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570854774951.png" alt="W模型过程"></p><p>图中一条线是软件开发研发线，一条是测试线</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W模型自身也具有局限性：<strong>W模型和V模型一样，都把软件开发的周期当做一个串行的活动，没有办法支持迭代</strong>，后来针对于V模型和W模型的局限性开发了一个H模型</p><h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;H模型中，真正的测试级别中不存在严格的次序关系，各阶段之间可以反复的触发、迭代、增量。H模型把测试活动完全独立出来，贯穿于整个产品的周期里，和其他流程是并发执行的。H模型的特点就是只要测试条件成立，就可以马上开始测试，也就是软件测试是一个独立的流程</p><h3 id="X模型"><a href="#X模型" class="headerlink" title="X模型"></a>X模型</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570855415109.png" alt="X模型过程"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型就是把一个程序分为多个片段，左边是针对于一个单独的程序片段进行互相分离的编码和测试，后面进行频繁的集成和交接，最终集成为一个可以执行的程序，然后再进行测试。这样就对一个程序进行反复的迭代。</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型也是唯一一个定位了探索性测试的测试模型，是一种特殊的类型的测试：前面进行了各个程序片段的单独测试，到集成测试的时候，更多依赖于没有事先计划的特殊类型的测试方式，让有经验的人可以发现更多的软件错误，X模型也就是对测试人员要求比较高的一个模型方式，可迭代、可集成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X模型对测试人员要求比较高，就目前而言，用的最多的可能是W模型的一个变换、或者是W和H的一个结合，测试的内容以W模型为准，测试的周期方法进度以H模型作为一个指导的，X模型更多时候是对于最终测试或熟练性测试的一个模板</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy下载中间件使用和配置</title>
      <link href="/2019/10/11/scrapy4/"/>
      <url>/2019/10/11/scrapy4/</url>
      
        <content type="html"><![CDATA[<blockquote><p> scrapy在请求网站的时候必须经过这个下载中间件</p><p>一些网站反爬虫措施做的比较严谨的时候，如果你并发过高就会封你ip等反爬虫操作，这个时候就可以使用一些代理、随机请求头来躲避这些反爬虫措施</p></blockquote><h2 id="常见的反爬虫策略"><a href="#常见的反爬虫策略" class="headerlink" title="常见的反爬虫策略"></a>常见的反爬虫策略</h2><ul><li><p>动态设置User-Agent（随机切换User-Agent，模拟不同用户的浏览器信息）</p></li><li><p>禁用Cookies（也就是不启用cookies middleware，不向Server发送cookies，有些网站通过cookie的使用发现爬虫行为）</p><ul><li>可以通过<code>COOKIES_ENABLED</code> 控制 CookiesMiddleware 开启或关闭</li></ul></li><li><p>设置延迟下载（防止访问过于频繁，设置为 2秒 或更高）</p></li><li><p>Google Cache 和 Baidu Cache：如果可能的话，使用谷歌/百度等搜索引擎服务器页面缓存获取页面数据。</p></li><li><p>使用IP地址池：VPN和代理IP，现在大部分网站都是根据IP来ban的。</p></li><li><p>使用 <a href="https://scrapinghub.com/crawlera" target="_blank" rel="noopener">Crawlera</a>（专用于爬虫的代理组件），正确配置和设置下载中间件后，项目所有的request都是通过crawlera发出（也就是爬虫代理商，直接使用他们给你的账号密码就可以不停地切换IP来反爬虫）</p><pre class=" language-python"><code class="language-python">  DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">'scrapy_crawlera.CrawleraMiddleware'</span><span class="token punctuation">:</span> <span class="token number">600</span>  <span class="token punctuation">}</span>  CRAWLERA_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>  CRAWLERA_USER <span class="token operator">=</span> <span class="token string">'注册/购买的UserKey'</span>  CRAWLERA_PASS <span class="token operator">=</span> <span class="token string">'注册/购买的Password'</span></code></pre></li></ul><h2 id="设置下载中间件（Downloader-Middlewares）"><a href="#设置下载中间件（Downloader-Middlewares）" class="headerlink" title="设置下载中间件（Downloader Middlewares）"></a>设置下载中间件（Downloader Middlewares）</h2><p>下载中间件是处于引擎(crawler.engine)和下载器(crawler.engine.download())之间的一层组件，可以有多个下载中间件被加载运行。</p><ol><li>当引擎传递请求给下载器的过程中，下载中间件可以对请求进行处理 （例如增加http header信息，增加proxy信息等）；</li><li>在下载器完成http请求，传递响应给引擎的过程中， 下载中间件可以对响应进行处理（例如进行gzip的解压等）</li></ol><p>要激活下载器中间件组件，将其加入到 DOWNLOADER_MIDDLEWARES 设置中。 该设置是一个字典(dict)，键为中间件类的路径，值为其中间件的顺序(order)。</p><h2 id="下载中间件字段"><a href="#下载中间件字段" class="headerlink" title="下载中间件字段"></a>下载中间件字段</h2><h3 id="process-request-self-request-spider"><a href="#process-request-self-request-spider" class="headerlink" title="process_request(self, request, spider)"></a>process_request(self, request, spider)</h3><ul><li><p>当每个request通过下载中间件时，该方法被调用。</p></li><li><p>process_request() 必须返回以下其中之一：一个 None 、一个 Response 对象、一个 Request 对象或 raise IgnoreRequest:</p><ul><li>如果其返回 None ，Scrapy将继续处理该request，执行其他的中间件的相应方法，直到合适的下载器处理函数(download handler)被调用， 该request被执行(其response被下载)。</li><li>如果其返回 Response 对象，Scrapy将不会调用 任何 其他的 process_request() 或 process_exception() 方法，或相应地下载函数； 其将返回该response。 已安装的中间件的 process_response() 方法则会在每个response返回时被调用。</li><li>如果其返回 Request 对象，Scrapy则停止调用 process_request方法并重新调度返回的request。当新返回的request被执行后， 相应地中间件链将会根据下载的response被调用。</li><li>如果其raise一个 IgnoreRequest 异常，则安装的下载中间件的 process_exception() 方法会被调用。如果没有任何一个方法处理该异常， 则request的errback(Request.errback)方法会被调用。如果没有代码处理抛出的异常， 则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li><p>参数:</p><ul><li><p><code>request (Request 对象)</code> – 处理的request</p></li><li><p><code>spider (Spider 对象)</code> – 该request对应的spider</p></li></ul></li></ul><h3 id="process-response-self-request-response-spider"><a href="#process-response-self-request-response-spider" class="headerlink" title="process_response(self, request, response, spider)"></a>process_response(self, request, response, spider)</h3><p>当下载器完成http请求，传递响应给引擎的时候调用</p><ul><li>process_request() 必须返回以下其中之一: 返回一个 Response 对象、 返回一个 Request 对象或raise一个 IgnoreRequest 异常。<ul><li>如果其返回一个 Response (可以与传入的response相同，也可以是全新的对象)， 该response会被在链中的其他中间件的 process_response() 方法处理。</li><li>如果其返回一个 Request 对象，则中间件链停止， 返回的request会被重新调度下载。处理类似于 process_request() 返回request所做的那样。</li><li>如果其抛出一个 IgnoreRequest 异常，则调用request的errback(Request.errback)。 如果没有代码处理抛出的异常，则该异常被忽略且不记录(不同于其他异常那样)。</li></ul></li><li>参数:<ul><li><code>request (Request 对象)</code> – response所对应的request</li><li><code>response (Response 对象)</code> – 被处理的response</li><li><code>spider (Spider 对象)</code> – response所对应的spider</li></ul></li></ul><h2 id="编写中间件字段"><a href="#编写中间件字段" class="headerlink" title="编写中间件字段"></a>编写中间件字段</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先先设置你的UserAgent和PROXIES的数据，可以在setting里面设置，也可以在中间件里面设置，但是setting直接导入就好了更方便，在类里面设置还得用个self。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如我的setting.py文件</p><pre class=" language-python"><code class="language-python">USER_AGENTS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/9.27 (Windows NT 5.2; U; zh-cn)'</span><span class="token punctuation">,</span>    <span class="token string">'Opera/8.0 (Macintosh; PPC Mac OS X; U; en)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Linux; U; Android 4.0.3; zh-cn; M032 Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13'</span><span class="token punctuation">]</span>PROXIES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"ip_port"</span><span class="token punctuation">:</span> <span class="token string">"IP地址:端口号"</span><span class="token punctuation">,</span> <span class="token string">"user_passwd"</span><span class="token punctuation">:</span> <span class="token string">"账号:密码"</span><span class="token punctuation">}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token comment" spellcheck="true"># {"ip_prot" :"121.42.140.113:16816", "user_passwd" : ""}</span>           <span class="token punctuation">]</span></code></pre><p>然后编写中间件字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> base64<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> USER_AGENTS<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>settings <span class="token keyword">import</span> PROXIES<span class="token comment" spellcheck="true"># 随机的User-Agent</span><span class="token keyword">class</span> <span class="token class-name">RandomUserAgent</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        useragent <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>USER_AGENTS<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print useragent</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> useragent<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RandomProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        proxy <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>PROXIES<span class="token punctuation">)</span>        <span class="token keyword">if</span> proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 没有代理账户验证的代理使用方式</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 对账户密码进行base64编码转换</span>            base64_userpasswd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>proxy<span class="token punctuation">[</span><span class="token string">'user_passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对应到代理服务器的信令格式里</span>            request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Proxy-Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Basic '</span> <span class="token operator">+</span> base64_userpasswd            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> proxy<span class="token punctuation">[</span><span class="token string">'ip_port'</span><span class="token punctuation">]</span></code></pre><p>HTTP代理登陆的时候是要使用登陆验证的，原因如下：</p><blockquote><p>为什么HTTP代理要使用base64编码：</p><p>HTTP代理的原理很简单，就是通过HTTP协议与代理服务器建立连接，协议信令中包含要连接到的远程主机的IP和端口号，如果有需要身份验证的话还需要加上授权信息，服务器收到信令后首先进行身份验证，通过后便与远程主机建立连接，连接成功之后会返回给客户端200，表示验证通过，就这么简单，下面是具体的信令格式：</p></blockquote><pre class=" language-python"><code class="language-python">CONNECT <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> <span class="token number">59.64</span><span class="token punctuation">.</span><span class="token number">128.198</span><span class="token punctuation">:</span><span class="token number">21</span>Proxy<span class="token operator">-</span>Authorization<span class="token punctuation">:</span> Basic bGV2I1TU5OTIzUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> OpenFetion</code></pre><blockquote><p>其中<code>Proxy-Authorization</code>是身份验证信息，Basic后面的字符串是用户名和密码组合后进行base64编码的结果，也就是对username:password进行base64编码。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy模拟登陆的方法</title>
      <link href="/2019/10/10/scrapy3/"/>
      <url>/2019/10/10/scrapy3/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 以下三个策略以人人网作为案例来描述</p></blockquote><h2 id="策略一：使用保存的cookie登陆（100-成功）"><a href="#策略一：使用保存的cookie登陆（100-成功）" class="headerlink" title="策略一：使用保存的cookie登陆（100%成功）"></a>策略一：使用保存的cookie登陆（100%成功）</h2><h3 id="登陆后查看自己的cookie信息"><a href="#登陆后查看自己的cookie信息" class="headerlink" title="登陆后查看自己的cookie信息"></a>登陆后查看自己的cookie信息</h3><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570770626349.png" alt="cookie信息"></p><h3 id="重写Spider类的start-requests方法"><a href="#重写Spider类的start-requests方法" class="headerlink" title="重写Spider类的start_requests方法"></a>重写Spider类的start_requests方法</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为所有的爬虫类都是继承于Spider的，所以重写start_requests方法可以适用于所有的爬虫类</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最重要记得要把setting.py的COOKIES_ENABLED开启起来</p><p>&emsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我的setting.py文件关键配置如下：</p><pre class=" language-python"><code class="language-python">COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span>DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>  <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><p>然后使用命令创建一个新的爬虫文件(renren.py)</p><h3 id="编写爬虫字段"><a href="#编写爬虫字段" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>renren.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    cookies <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"JSESSIONID"</span><span class="token punctuation">:</span> <span class="token string">"abc6L9jo347Dw9fWUf52w"</span><span class="token punctuation">,</span>    <span class="token string">"anonymid"</span> <span class="token punctuation">:</span> <span class="token string">"k1lmx3wm-pdg03r"</span><span class="token punctuation">,</span>    <span class="token string">"_r01_"</span> <span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token string">"depovince"</span> <span class="token punctuation">:</span> <span class="token string">"GW"</span><span class="token punctuation">,</span>    <span class="token string">"springskin"</span> <span class="token punctuation">:</span> <span class="token string">"set"</span><span class="token punctuation">,</span>    <span class="token string">"jebe_key"</span> <span class="token punctuation">:</span> <span class="token string">"09e48352-6a6a-490c-a137-d78928ffe419%7C18edbeb77a97f6145ca4db5e06940ded%7C1570768484510%7C1%7C1570768487369"</span><span class="token punctuation">,</span>    <span class="token string">"t"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"societyguester"</span> <span class="token punctuation">:</span> <span class="token string">"7e803da6e1d3c6ce4421d9adc13a20390"</span><span class="token punctuation">,</span>    <span class="token string">"id"</span> <span class="token punctuation">:</span> <span class="token string">"972451360"</span><span class="token punctuation">,</span>    <span class="token string">"xnsid"</span> <span class="token punctuation">:</span> <span class="token string">"46d5aac1cccccccc"</span><span class="token punctuation">,</span>    <span class="token string">"loginfrom"</span> <span class="token punctuation">:</span> <span class="token string">"null"</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"deng.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>爬取得到的结果如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570776253453.png" alt></p><p>这个方法虽然麻烦，但是肯定是可以成功的</p><h2 id="策略二：使用post请求来模拟登陆"><a href="#策略二：使用post请求来模拟登陆" class="headerlink" title="策略二：使用post请求来模拟登陆"></a>策略二：使用post请求来模拟登陆</h2><h3 id="找到表单登陆请求地址"><a href="#找到表单登陆请求地址" class="headerlink" title="找到表单登陆请求地址"></a>找到表单登陆请求地址</h3><p>如果使用post请求的话就一定要找到人人网登陆表单的请求地址，人人网的请求地址如图所示：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570769345282.png" alt="人人网表单"></p><p>得到的地址就为’<a href="http://www.renren.com/PLogin.do&#39;" target="_blank" rel="noopener">http://www.renren.com/PLogin.do&#39;</a></p><h3 id="编写爬虫字段-1"><a href="#编写爬虫字段-1" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.renren.com/972451360/newsfeed/photo']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.renren.com/972451360/newsfeed/photo/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/PLogin.do'</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        request <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">(</span>url<span class="token punctuation">,</span> formdata<span class="token operator">=</span>data<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_page<span class="token punctuation">)</span>        <span class="token keyword">yield</span> request    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>这个方法其实就先访问登陆页面的表单，然后登陆成功之后再去爬取想要的页面</p><h2 id="策略三：模拟正规的登陆流程来模拟登陆"><a href="#策略三：模拟正规的登陆流程来模拟登陆" class="headerlink" title="策略三：模拟正规的登陆流程来模拟登陆"></a>策略三：模拟正规的登陆流程来模拟登陆</h2><h3 id="编写爬虫字段-2"><a href="#编写爬虫字段-2" class="headerlink" title="编写爬虫字段"></a>编写爬虫字段</h3><p>这个方法不同于前两种，前两种是重写start_requests方法，这个方法是模拟用户的登陆流程：先访问登陆页面，输入账号密码之后再访问详情页面</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"你的邮箱"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"你的密码"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page            <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 处理响应内容</span>    <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>            filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h2 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单单爬取人人网这类的简单网站用以上三个方法是没问题的，但是类似于知乎这种使用<code>Django</code>作为后台的网站，登陆注册都有个<code>_xsrf</code>字段放在form表单的末尾，这个字段是Django为了防止 跨站域请求伪造攻击而添加的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以在使用模拟登陆前一定要查看表单有没有这个字段，如果有就用xpath或者正则表达式提取出来，然后一起提交。比如我这里拿最后一个方法来说明：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RenrenSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'renren'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'renren.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://renren.com/'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 处理start_urls里的登录url的响应内容，提取登陆需要的参数（如果需要的话)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 提取登陆需要的参数</span>        _xsrf <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//_xsrf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 发送请求参数，并调用指定回调函数处理</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>FormRequest<span class="token punctuation">.</span>from_response<span class="token punctuation">(</span>            response<span class="token punctuation">,</span>            formdata<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"xxx@163.com"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token string">"_xsrf"</span> <span class="token punctuation">:</span> _xsrf <span class="token punctuation">}</span><span class="token punctuation">,</span>        callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_page        <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取登录成功状态，访问需要登录后才能访问的页面</span>        <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/422167102/profile"</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_newpage<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 处理响应内容</span>        <span class="token keyword">def</span> <span class="token function">parse_newpage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"renren.html"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> filename<span class="token punctuation">:</span>                filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之CrawlSpider类</title>
      <link href="/2019/10/09/crawlspider/"/>
      <url>/2019/10/09/crawlspider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>爬虫文件继承的类不仅只有scrapy.Spider类，还有很多类，但是Spider是所有爬虫类的基类。这里我介绍一下CrawlSpider类的使用、说明和spider类和CrawlSpider类的对比</p></blockquote><h2 id="Spider与CrawlSpider案例对比"><a href="#Spider与CrawlSpider案例对比" class="headerlink" title="Spider与CrawlSpider案例对比"></a>Spider与CrawlSpider案例对比</h2><h3 id="Spider爬取有页码的数据"><a href="#Spider爬取有页码的数据" class="headerlink" title="Spider爬取有页码的数据"></a>Spider爬取有页码的数据</h3><p>Spider在爬取有页码的数据的时候要使用回调函数，在请求完一页的数据之后使用回调函数继续执行下一个页面</p><p>比如我这要爬取的是csdn的论坛网站</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570709064975.png" alt></p><p>下面有五页数据，从第二页开始url地址就会增加个pages，所以在每次请求完页面的时候都给pages+1去重新爬取新的页面。</p><p>部分源码如下：</p><p>scdemo.py（爬虫文件）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ScdemoSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'scdemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://sou.zhaopin.com/?jl=763']</span>    pages<span class="token operator">=</span><span class="token number">1</span>    url<span class="token operator">=</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page='</span>    start_urls <span class="token operator">=</span><span class="token punctuation">[</span>url<span class="token operator">+</span>str<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pages<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>pages<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pages<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># with open("bbs.html", "wb+") as f:</span>        <span class="token comment" spellcheck="true">#     f.write(response.body)</span></code></pre><p>pipelines.py（管道文件）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">ZlzhaopingPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"zp.json"</span><span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>里面代码关键的就是确定爬取的页码是多少，然后每一次请求玩一页的数据都让pages+1，这样就可以循环出所有的页码的数据了。不过使用CrawlSpider会更简单，CrawlSpider可以创建自己的规则,比如只要存在还有跳转到下一页页码的url字段，就反复请求。</p></blockquote><h3 id="CrawlSpider爬取有页码的数据"><a href="#CrawlSpider爬取有页码的数据" class="headerlink" title="CrawlSpider爬取有页码的数据"></a>CrawlSpider爬取有页码的数据</h3><p>crawlSpider我先演示一下同样是爬取同一个网页</p><p>使用如下命令快捷创建CrawlSpider</p><pre class=" language-python"><code class="language-python">$ scrapy genspider <span class="token operator">-</span>t crawl clidemo https<span class="token punctuation">:</span><span class="token operator">//</span>bbs<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>forums<span class="token operator">/</span>OL_Script?page<span class="token operator">=</span><span class="token number">0</span></code></pre><p>clidemo.py:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> ZLzhaoping<span class="token punctuation">.</span>items <span class="token keyword">import</span> ZlzhaopingItem<span class="token keyword">class</span> <span class="token class-name">ClidemoSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'clidemo'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['https://bbs.csdn.net/forums/OL_Script?page=2']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://bbs.csdn.net/forums/OL_Script?page=0'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span>r<span class="token string">'page=\d+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        zhilian <span class="token operator">=</span> ZlzhaopingItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        list<span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//td[@class='forums_topic']"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> list<span class="token punctuation">:</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"./a[contains(@class,'forums_title ')]/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            zhilian<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> zhilian</code></pre><blockquote><p>运行之后就可以直接把所有的页面全部爬完了,方法比Spider来写方便很多。</p><p>唯一不足的地方就是CrawlSpider一次性把全部的页码请求完，而Spider可以设置一个停止条件，不必全部爬完。</p></blockquote><h2 id="CrawlSpider的字段详解"><a href="#CrawlSpider的字段详解" class="headerlink" title="CrawlSpider的字段详解"></a>CrawlSpider的字段详解</h2><p>CrawlSpider源码没啥好解释的，写的挺清楚的，这里解释一下CrawlSpider的匹配规则和提取规则</p><p><strong>LinkExtractor：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> allow<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deny_domains<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restrict_xpaths<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 tags<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'area'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> canonicalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> process_value<span class="token operator">=</span>None<span class="token punctuation">,</span> deny_extensions<span class="token operator">=</span>None<span class="token punctuation">,</span> restrict_css<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>其中主要的参数如下：</p><ul><li><code>allow</code>：满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</li><li><code>deny</code>：与这个正则表达式(或正则表达式列表)不匹配的URL一定不提取。</li><li><code>allow_domains</code>：会被提取的链接的domains。</li><li><code>deny_domains</code>：一定不会被提取链接的domains。</li><li><code>restrict_xpaths</code>：使用xpath表达式，和allow共同作用过滤链接。</li></ul><p><strong>Rule：</strong></p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> link_extractor<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> cb_kwargs<span class="token operator">=</span>None<span class="token punctuation">,</span> follow<span class="token operator">=</span>None<span class="token punctuation">,</span> process_links<span class="token operator">=</span>None<span class="token punctuation">,</span> process_request<span class="token operator">=</span>identity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>link_extractor <span class="token operator">=</span> link_extractor        self<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback        self<span class="token punctuation">.</span>cb_kwargs <span class="token operator">=</span> cb_kwargs <span class="token operator">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>process_links <span class="token operator">=</span> process_links        self<span class="token punctuation">.</span>process_request <span class="token operator">=</span> process_request        <span class="token keyword">if</span> follow <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token keyword">if</span> callback <span class="token keyword">else</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>follow <span class="token operator">=</span> follow</code></pre><ul><li><p><code>link_extractor</code>：是一个Link Extractor对象，用于定义需要提取的链接。</p></li><li><p><code>callback</code>： 从link_extractor中每获取到链接时，参数所指定的值作为回调函数，该回调函数接受一个response作为其第一个参数。</p><blockquote><p>注意：当编写爬虫规则时，避免使用parse作为回调函数。由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</p></blockquote></li><li><p><code>follow</code>：是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进(就是是否根据爬取到的页面继续点进去爬取)。 如果callback为None，follow 默认就为True。如果写了callback，follow默认就为False</p></li><li><p><code>process_links</code>：指定该spider中哪个的函数将会被调用，从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。（比如一些网站，在你快速爬取的时候回给你一些错误的链接让你中断爬取，通常会修改url地址的某些参数，比如说&amp;改成？，但是使用CrawlSpider的话，只要写一个函数来修改就可以了，方法如 process_links=”deal_links”）</p></li><li><p><code>process_request</code>：指定该spider中哪个的函数将会被调用， 该规则提取到每个request时都会调用该函数。 (用来过滤request)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕爬虫之scrapy框架初识</title>
      <link href="/2019/10/07/scrapy/"/>
      <url>/2019/10/07/scrapy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p><p>​        我们原生爬虫需要使用urllib、requests等库去请求指定的网址，然后通过正则表达式、xpath、css选择等去解析网址，得到自己想要的信息，然后再写一个函数存储到数据库或者本地文件中，这样思路虽然说很清晰，但是流程总归而言还是比较麻烦的，而scrapy框架则帮我们封装好了所有的流程，我们只需要编写几行代码就可以爬取我们需要的资源。</p></blockquote><h2 id="scrapy架构图"><a href="#scrapy架构图" class="headerlink" title="scrapy架构图"></a>scrapy架构图</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/scrapy_all.png" alt="scrapy架构图"></p><ul><li><p><code>Scrapy Engine</code>就是爬虫的引擎，负责<code>Spider</code>、<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>之间的通讯</p></li><li><p><code>Scheduler(调度器)</code>：负责引擎传递过来的request请求，并且按照一定的方式整理排列</p></li><li><p><code>Downloader（下载器）</code>：负责下载引擎传递过来的所有request请求，然后将得到的Responses还给引擎，由引擎交给<code>spiders</code>处理</p></li><li><p><code>Downloader Middlewares（下载中间件）</code>：自定义扩展下载功能的地方，比如需要添加下载的代理等</p></li><li><p><code>Spider（爬虫）</code>：负责从Responses分析提取出所要的数据，如果Responses还有需要的URL数据，就把这些数据交给引擎，由引擎传递给<code>Scheduler(调度器)</code>去处理</p></li><li><p><code>Spider Middlewares（Spider中间件）</code>：一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests），这个很少用到</p></li><li><p><code>Item Pipeline(管道)</code>：负责处理spiders获取到的item，并且对这些数据进行存储、分析、过滤等处理</p></li></ul><h2 id="scrapy文件配置详解"><a href="#scrapy文件配置详解" class="headerlink" title="scrapy文件配置详解"></a>scrapy文件配置详解</h2><p>创建项目：</p><pre><code>scrapy startproject demo(你的项目名)</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570425985011.png" alt></p><p>然后就可以进入刚刚创建的demo项目了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426136366.png" alt></p><p>scrapy.cfg里面是确定项目的配置文件是哪个</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426236269.png" alt></p><p>如图，项目的配置文件就是<code>demo/setting.py</code></p><p>项目的所有文件如下：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570426417062.png" alt></p><p><code>items.py</code>是根据要爬取的数据的字段进行设置</p><p><code>pipelines.py</code>是管道文件，即把爬取下来的数据进行存储和过滤等操作</p><p><code>setting.py</code>是核心配置文件</p><pre class=" language-python"><code class="language-python"><span class="token number">12</span><span class="token punctuation">.</span> BOT_NAME <span class="token operator">=</span> <span class="token string">'demo'</span>                            <span class="token comment" spellcheck="true">#项目名字</span><span class="token number">14</span><span class="token punctuation">.</span> SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'demo.spiders'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#项目模板位置</span><span class="token number">15</span><span class="token punctuation">.</span> NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'demo.spiders'</span>            <span class="token comment" spellcheck="true">#新爬虫模板位置</span><span class="token number">22</span><span class="token punctuation">.</span> ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span>                         <span class="token comment" spellcheck="true">#是否遵守robots协议</span><span class="token number">25</span><span class="token punctuation">.</span> CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">32</span>                    <span class="token comment" spellcheck="true">#爬虫的并发量</span><span class="token number">30</span><span class="token punctuation">.</span> DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span>                            <span class="token comment" spellcheck="true">#爬虫延迟</span><span class="token number">36</span><span class="token punctuation">.</span> COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token comment" spellcheck="true">#是否启用cookie，不想爬虫留下自己的痕迹就不用开启</span><span class="token number">42</span><span class="token punctuation">.</span> DEFAULT_REQUEST_HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">#42-45 默认的请求头</span><span class="token number">43</span><span class="token punctuation">.</span>   <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">.</span>   <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token number">49</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#SPIDER_MIDDLEWARES = {                        #爬虫中间件设置，数字越小优先级越大</span><span class="token number">50</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoSpiderMiddleware': 543,</span><span class="token number">51</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">55</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#DOWNLOADER_MIDDLEWARES = {                    #下载中间件</span><span class="token number">56</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.middlewares.DemoDownloaderMiddleware': 543,</span><span class="token number">57</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span><span class="token number">67</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#ITEM_PIPELINES = {                            #管道文件</span><span class="token number">68</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#    'demo.pipelines.DemoPipeline': 300,</span><span class="token number">69</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">#}</span></code></pre><p>更多的详细配置可见<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref" target="_blank" rel="noopener">官方文档</a></p><h2 id="第一个scrapy爬虫"><a href="#第一个scrapy爬虫" class="headerlink" title="第一个scrapy爬虫"></a>第一个scrapy爬虫</h2><p>scrapy的所有命令都可以用cmd看到</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570517173800.png" alt></p><p>创建爬虫文件：</p><pre><code>scrapy genspider bilibili(爬虫文件名) https://www.bilibili.com/(要爬虫的网站)</code></pre><p>刚刚创建的爬虫项目内容如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true">#允许访问的域</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://https://www.bilibili.com//'</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#开始爬取的网站地址</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>                                        <span class="token comment" spellcheck="true">#解析方法</span>        <span class="token keyword">pass</span></code></pre><p>现在编写一些请求函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibiliSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibili'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/v/game/stand_alone/?spm_id_from=333.6.b_7072696d6172795f6d656e75.41#/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"demo.html"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><p>然后执行命令</p><pre class=" language-python"><code class="language-python">scrapy crawl bilibili</code></pre><p>就可以请求bilibili的页面，然后把源代码写到demo.html文件了</p><h2 id="将scrapy得到的结果保存到第三方格式"><a href="#将scrapy得到的结果保存到第三方格式" class="headerlink" title="将scrapy得到的结果保存到第三方格式"></a>将scrapy得到的结果保存到第三方格式</h2><p>scrapy是默认有xpath解析库的，所以可以直接使用xpath，这里拿传播智客的讲师页面来演示</p><p>创建一个爬虫文件</p><pre class=" language-python"><code class="language-python">scrapy genspider itcast http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>cn<span class="token operator">/</span></code></pre><p>首先先编写要确定爬取的部分</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570469433346.png" alt></p><p>得到如上页面说明爬取的内容正确</p><p>然后在<code>items.py</code>编写要存储的字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">DemoItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    title<span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后再编写爬虫文件，将爬取的内容存储到这些字段中</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        teacherItem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            teacherItem<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Item<span class="token punctuation">)</span>        <span class="token keyword">return</span> teacherItem</code></pre><p>最后再执行命令：</p><pre><code>$ scrapy crawl itcast -o itcast.csv</code></pre><p>可以保存为（json，csv，xml）等格式</p><h2 id="使用管道来存储文件"><a href="#使用管道来存储文件" class="headerlink" title="使用管道来存储文件"></a>使用管道来存储文件</h2><p>管道就是在爬取数据之后的处理过程，这里拿个案例来说明</p><p>与上面不同的是爬取的结果不是直接return返回，因为return之后程序就结束了，所以使用yield返回</p><p>itcast.py文件(你的爬虫文件)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> demo<span class="token punctuation">.</span>items <span class="token keyword">import</span> DemoItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    <span class="token comment" spellcheck="true"># allowed_domains = ['http://www.itcast.cn/']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.itcast.cn/channel/teacher.shtml#ajavaee'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        teacher_list <span class="token operator">=</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="li_txt"]'</span><span class="token punctuation">)</span>        Item<span class="token operator">=</span>DemoItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># teacherItem = []</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> teacher_list<span class="token punctuation">:</span>            name<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h3/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            title<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./h4/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            info<span class="token operator">=</span>each<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            Item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            Item<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span><span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># teacherItem.append(Item)</span>            <span class="token keyword">yield</span> Item        <span class="token comment" spellcheck="true"># return teacherItem</span></code></pre><p>然后在piplines.py编写存储的方式，这里我用的是存储到json文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">DemoPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"teacher.json"</span><span class="token punctuation">,</span><span class="token string">"wb+"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        jsontext<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>write<span class="token punctuation">(</span>jsontext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="scrapy-shell的使用"><a href="#scrapy-shell的使用" class="headerlink" title="scrapy shell的使用"></a>scrapy shell的使用</h2><p>scrapy shell可以帮助我们快速查看网页的请求，一般我们在爬取网站的时候，可以先试一下使用scrapy shell启动，因为有些网页是使用ajax或者js来显示的，直接以上面演示的方式请求只能请求到一个空的网页，比如我现在要爬取一个智联招聘的页面：</p><pre class=" language-python"><code class="language-python">$ scrapy shell  https<span class="token punctuation">:</span><span class="token operator">//</span>sou<span class="token punctuation">.</span>zhaopin<span class="token punctuation">.</span>com<span class="token operator">/</span>?jl<span class="token operator">=</span><span class="token number">763</span><span class="token operator">&amp;</span>kw<span class="token operator">=</span>python<span class="token operator">&amp;</span>kt<span class="token operator">=</span><span class="token number">3</span><span class="token operator">&amp;</span>sf<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>st<span class="token operator">=</span><span class="token number">0</span></code></pre><p> 进入shell命令行之后输入命令</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> view<span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>然后就可以通过你的默认浏览器看到请求后的结果，如果爬取后的网页是跟浏览器输入地址访问的一样的话，那么就可以直接像我上面演示的方式请求。如果请求后发现重要数据为空的话，比如我这样：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1570623395604.png" alt="scrapy直接爬取智联招聘页面"></p><p>因为智联招聘的页面是通过js去请求的，所以这些数据都没有显示在request请求的页面上，因为这部分的数据都是使用js去加载的，所以只要打开调试网页查看js的请求地址，然后去请求js的请求地址就可以获取这部分的数据了。</p><p>更多关于如何提取异步加载的数据可以在《scrapy爬取动态网页》博客可以详解</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五大数据结构的介绍及基本命令使用</title>
      <link href="/2019/09/28/redis2/"/>
      <url>/2019/09/28/redis2/</url>
      
        <content type="html"><![CDATA[<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><h3 id="String的限制"><a href="#String的限制" class="headerlink" title="String的限制"></a>String的限制</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String类型可以存储任何形式的字符串，比如整型，数字，二进制数据，json对象等，但是在有一个内存大小限制，最大只能存储512M</p><h3 id="字符串的API"><a href="#字符串的API" class="headerlink" title="字符串的API"></a>字符串的API</h3><ul><li>赋值：<ul><li>set ：<code>set key value</code>，加键值对，无论key是否存在都设置</li><li>setnx ：<code>setnx key value</code>，key不存在才添加键值对</li><li>set  xx：<code>set key value xx</code>，key存在才设置键值对</li><li>mset ：<code>mset key1 value1 key2 value2</code>，设置多个键值对，时间复杂度为O(n)</li><li>getset ：<code>getset key newvalue</code>，添加新的值并且返回老的值</li><li>append ：<code>append key value</code>，将value追加到旧的value</li><li>setrange ：<code>setrange key index value</code>，设置指定下标所有对应的值，比如hello的值为world，setrange hello 0 L就是得到Lorld</li></ul></li><li>查询：<ul><li>get ：<code>get key</code>，获取键值对</li><li>mget ：<code>mget key1 key2</code>，批量获取key，原子操作，时间复杂度为O(n)</li><li>strlen ：<code>strlen key</code>，返回字符串的长度(中文一个字占两个字符)</li><li>getrange ：<code>getrange key start end</code>，获取字符串指定下标的所有值，比如hello的值为world，getrange hello 0 2就是得到wor</li></ul></li><li>删除：<ul><li>del：<code>del key</code>，删除键值对</li></ul></li><li>自增：<ul><li>incr ：<code>incr key</code>，key自增1，如果key不存在，自增后get(key)=1</li><li>incrby ：<code>incrby key</code>，key自增k，如果key不存在，自增后get(key)=k</li><li>incrbyfloat ：<code>incrbyfloat key</code>，是浮点数的自增操作</li></ul></li><li>自减：<ul><li>decrby ：<code>decrby key</code>，key自减k，如果key不存在，自增后get(key)=-k</li><li>decr ：<code>decr key</code>，key自减1，如果key不存在，自增后get(key)=-1</li></ul></li></ul><h3 id="String的使用场景"><a href="#String的使用场景" class="headerlink" title="String的使用场景"></a>String的使用场景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String一般适用于缓存（网站记录用户登录状态、视频缓存等）、计数器（比如每次观看视频，次数就+1，而且因为redis是单线程的，计数器是完全不会出错的），分布式锁等等</p><h2 id="hash-哈希"><a href="#hash-哈希" class="headerlink" title="hash(哈希)"></a>hash(哈希)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash其实还是一个key-value结构，但是跟String有不同，hash类似于mysql的一个表的结构数据，每一个key都有一个field和value，field不能相同。就相当于key是mysql的一个表，filed是一个字段，value是值</p><h3 id="哈希的API"><a href="#哈希的API" class="headerlink" title="哈希的API"></a>哈希的API</h3><ul><li>赋值：<ul><li>hset：哈希赋值，比如hset user:1:info age 23</li><li>hmset ：<code>hmset key1 vaule 1 key2 value2</code>批量设置一批key和value</li><li>hsetnx ：<code>hsetnx key field value</code>设置hash key对应field的value（如果存在就设置失败）</li></ul></li><li>查询：<ul><li>hget：哈希取值，比如hget user:1:info age</li><li>hgetall：获取所有的属性和值，比如hgetall user:1:info，时间复杂度O(n)</li><li>hvals：<code>hvals key</code>返回hash key对应所有的field的value，比如hvals user:1:info，时间复杂度O(n)</li><li>hkeys ：<code>hkeys key</code>：返回hash key对应所有的field，时间复杂度O(n)</li><li>hexists ：<code>hexists key field</code>：判断 hash key是否存在field，比如hlen user:1:info name</li><li>hlen：<code>hlen key</code>：获取hash key field数量，比如hlen user:1:info</li><li>hmget ：<code>hmget key field1 field2</code>：批量获取key一批的field值</li></ul></li><li>删除：<ul><li>hdel：删除哈希的值，比如hdel user:1:info</li></ul></li><li>自增：<ul><li>hincrby ：<code>hincrby key field intCounter</code>hash key对应的field的value自增intCounter</li><li>hincrbyfloat ：<code>hincrbyfloat key field floatCounter</code>增加浮点数</li></ul></li></ul><h2 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h2><p>list是有序的列表，可以接受重复值</p><h3 id="列表的API"><a href="#列表的API" class="headerlink" title="列表的API"></a>列表的API</h3><ul><li>覆盖值：<ul><li>lset：<code>lset key index newValue</code>设置列表索引值为newValue</li></ul></li><li>插入值：<ul><li>lpush：从左端插入值</li><li>rpush：从右端插入值，如rpushlistkey c b a，就是从右边插入c b a</li><li>linsert：<code>linsert key before|after value newValue</code>，时间复杂度O(n)</li></ul></li><li>弹出值：<ul><li>rpop：从右端弹出值</li><li>lpop：从左端弹出值</li></ul></li><li>删除：<ul><li>lrem：<code>lrem key count value</code>根据count来删除所有value相等的项，时间复杂度为O(n)<ul><li>count&gt;0，从左到右，删除最多的count个value相等的项</li><li>count&lt;0，从右到左，删除最多的Math.abs(count)个value相等的项</li><li>count=0，删除所有的value相等的项</li></ul></li><li>ltrim：<code>ltrim key start end</code>，时间复杂度为O(n)，即只保留下标start到end的，时间复杂度为O(n)</li></ul></li><li>查询：<ul><li>lrange：<code>lrange key start end(包含end)</code>，这是一个查询的API，只查询start到end的，负号就是从右边开始，时间复杂度为O(n)</li><li>lindex：<code>lindex key index</code>获取列表指定索引的value，时间复杂度为O(n)</li><li>llen：<code>llen key</code>获取列表的长度</li></ul></li><li>阻塞版：b就是阻塞，比如一个空队列的话使用lpop会立刻弹出，但是使用blpop就会等待有值再弹出<ul><li>blpop：<code>blpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li><li>brpop：<code>brpop key timeout</code>，timeout是阻塞超时时间，=0代表永不阻塞</li></ul></li></ul><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h2><h3 id="集合特征"><a href="#集合特征" class="headerlink" title="集合特征"></a>集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合是一个<strong>无序和无重复元素</strong>的的，还可以使用<strong>集合操作</strong>，集合就相当于我们高中学的数学的那个集合，两个集合可以交、并、补操作，同时集合是无序和不能重复的</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集合的value是由field和value组成</p><h3 id="集合的API"><a href="#集合的API" class="headerlink" title="集合的API"></a>集合的API</h3><ul><li>添加：<ul><li>sadd：<code>sadd key element1 [element2]</code>向集合添加element，如果element已存在就添加失败，返回结果为0</li></ul></li><li>删除：<ul><li>srem：<code>srem key element</code>将集合key中的element删掉</li><li>spop：<code>spop key [count]</code>随机弹出集合的随机count个元素，如果没填就默认是1，改变原有的集合</li></ul></li><li>查询<ul><li>scard：<code>scard key</code>返回集合元素的数量</li><li>sismember：<code>SISMEMBER KEY VALUE</code> 计算元素是否在集合当中，是就返回1，不存在返回0</li><li>srandmember：<code>srandmember count</code> 返回集合中随便count 个元素，如果count没填就默认为1，不改变原有的集合</li><li>smembers：<code>smembers key [count]</code> 取出集合中所有的元素</li></ul></li><li>集合间的操作：<ul><li>sdiff：也就是数学集合中的差集  <code>sdiff key1 key2</code> </li><li>sinter：数学中的交集 <code>sinter key1 key2</code></li><li>sunion：数学中的并集 <code>sunion key1 key2</code></li></ul></li><li>保存集合操作的结果：<ul><li>sdiffstore：<code>sdiffstore newValue key1 key2</code>,保存key1和key2的差集结果在newValue中</li><li>sinterstore：<code>sinterstore newValue key1 key2</code>,保存key1和key2的交集结果在newValue中</li><li>sunionstore：<code>sunionstore newValue key1 key2</code>,保存key1和key2的并集结果在newValue中</li></ul></li></ul><h2 id="sorted-set-有序集合"><a href="#sorted-set-有序集合" class="headerlink" title="sorted set(有序集合)"></a>sorted set(有序集合)</h2><h3 id="有序集合特征"><a href="#有序集合特征" class="headerlink" title="有序集合特征"></a>有序集合特征</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序集合是无重复元素的、有序，有序集合的的value是由element和score共同组成，有序集合所有的API都是z开头</p><p>有序集合的score可以重复，element不可以重复</p><h3 id="zset跟list和set的区别"><a href="#zset跟list和set的区别" class="headerlink" title="zset跟list和set的区别"></a>zset跟list和set的区别</h3><table><thead><tr><th>集合(set)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>无重复元素</td><td>无重复元素</td></tr><tr><td>无序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><table><thead><tr><th>列表(list)</th><th>有序集合(zset)</th></tr></thead><tbody><tr><td>可以有重复元素</td><td>无重复元素</td></tr><tr><td>有序</td><td>有序</td></tr><tr><td>value是由element组成</td><td>value由score+element组成</td></tr></tbody></table><h3 id="有序集合API"><a href="#有序集合API" class="headerlink" title="有序集合API"></a>有序集合API</h3><ul><li>zadd：<code>zadd key score element(可以是多个)</code>O(logN)</li><li>zrem：<code>zrem key element</code> 删除元素(可以是多个)</li><li>zscore：<code>zscore key element</code>查询分数</li><li>zincrby：<code>zincrby key increScore element</code>，给key增加increScore 分数</li><li>zcard：<code>zcard key</code>返回元素总个数</li><li>zrank：</li><li>zrange：<code>zrange key start end [withscore]</code>，返回指定范围内的排名数，时间复杂度为O(log(n)+m)</li><li>zrangebyscore：<code>zrangebyscore key minScore maxScore [withscore]</code>，返回指定范围的分数段，时间复杂度为O(log(n)+m)</li><li>zcount：<code>zcount key minScore maxScore</code>，返回指定分数范围内的个数</li><li>zremrangebyrank：<code>zremrangebyrank key start end</code>，删除指定排名内的升序元素，时间复杂度为O(log(n)+m)</li><li>zrevrank：从高到低的排名</li><li>zrevrange：</li><li>zrevrangebyscore</li><li>zunionstore：</li><li>zinterstore：</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis初步认识</title>
      <link href="/2019/09/27/redis1/"/>
      <url>/2019/09/27/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的五大数据结构"><a href="#Redis的五大数据结构" class="headerlink" title="Redis的五大数据结构"></a>Redis的五大数据结构</h2><ul><li>String</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="Redis的特性"><a href="#Redis的特性" class="headerlink" title="Redis的特性"></a>Redis的特性</h2><ol><li>速度快：因为redis是保存在内存当中的</li><li>持久化：Redis的数据保存在内存中，一般的保存在内存中突然断电内存就会丢失，所以redis在保存数据的时候会异步的保存在硬盘中</li><li>支持多种数据结构：Redis支持(字符串、列表、哈希、集合、有序集合)这五种数据结构，在新版本中也支持BitMaps(位图，使用很小的内存来实现高效的存储)、HyperLoglog(超小内存唯一计数，即使用12K)、GEO(地理信息定位 )这三种衍生的数据结构</li><li>支持多种语言：基本上现在的主流语言都是支持redis的</li><li>功能丰富：支持发布订阅、Lua脚本、事物，pipeline(提高客服端的并发效率)</li><li>简单性：Redis不依赖任何外部库和使用的是单线程模型</li><li>主从复制：主服务器的数据可以同步到从服务器上，给高可用和分布式提供了一个很好的基础</li><li>高可用、分布式：Redis单单靠主从复制是不能进行高可用分布式的，所以Redis2.8版本提供了Redis-Sentinel来支持高可用，Redis3.0版本提供了Redis-Cluster来支持分布式</li></ol><h2 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis应用场景十分的广泛，缓存(比如在网站中可以使用Redis缓存来代替session和cookie)、计数器(比如微博的转发、评论数)、消息队列(比如Celery和redis结合来使用异步任务)、排行榜、实时系统(垃圾邮件过滤功能)、社交系统(比如youtube那些社交网站的共同关注数、粉丝数)等，大多数企业都使用了Redis</p><h2 id="Redis的常用命令"><a href="#Redis的常用命令" class="headerlink" title="Redis的常用命令"></a>Redis的常用命令</h2><ul><li><code>keys</code>：这个一般不在生产环境中使用，其一是因为key是一个很重的命令，时间复杂度为O(n)如果有上万个键值对一下子遍历出来会很慢，这个可以在不在生产环境中使用的从节点使用比较重的命令，不会对生产环境产生危害即可<ul><li><code>keys *</code>：查看所有的键</li><li><code>keys [pattern]</code>：keys支持正则表达式，比如<code>keys he*</code>,就可以选择出所有he开头的key</li></ul></li><li><code>dbsize</code>：计算keys的总数，这个是可以在生产环境中使用的，因为这个不是遍历所有的表，而是内置的一个计数器，所以时间复杂度是O(1)</li><li><code>exists keys</code>：判断一个key是否存在，存在返回1，不存在返回0</li><li><code>del key</code>：删除制定的key-value，成功删除返回1，不成功返回0</li><li><code>expire key seconds</code>：(设置过期时间)，一般用于网站记录用户缓存，seconds就是秒数，seconds为30就是30秒后过期<ul><li><code>ttl key</code>：查看key的过期时间，返回值为-2代表key不存在了，-1表示没有过期时间</li><li><code>persist key</code>：去除key过期时间</li></ul></li><li><code>type key</code>：查看key的数据类型</li><li><code>select number</code>：选择使用第number个数据库</li><li><code>info</code>：查看客户端的所有信息</li></ul><table><thead><tr><th>命令</th><th>时间复杂度</th></tr></thead><tbody><tr><td>keys</td><td>O(n)</td></tr><tr><td>dbsize</td><td>O(1)</td></tr><tr><td>exists keys</td><td>O(1)</td></tr><tr><td>del key</td><td>O(1)</td></tr><tr><td>expire key seconds</td><td>O(1)</td></tr><tr><td>type key</td><td>O(1)</td></tr></tbody></table><h2 id="Redis的数据结构和内部编码"><a href="#Redis的数据结构和内部编码" class="headerlink" title="Redis的数据结构和内部编码"></a>Redis的数据结构和内部编码</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个数据结构都有自己的内部编码，在开发过程中，如果一些元素比较小的时候可以通过空间换时间的操作，这些得看开发中的具体要求和操作来定制</p><h2 id="Redis-的单线程操作"><a href="#Redis-的单线程操作" class="headerlink" title="Redis 的单线程操作"></a>Redis 的单线程操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redis的单线程就像一个队列，每一个瞬间只能执行一个命令，所以在开发中，一定要注意不要轻易使用很长时间的命令，不然后面的命令都会阻塞在那</p><p>Redis单线程还这么快的原因跟node.js部分很像，快的原因如下</p><ul><li>Redis采用的是纯内存的存储，内存的存储是非常的快的(这个是主要的原因)</li><li>非阻塞IO</li><li>避免了线程的切换和竞态的消耗</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全文搜索方法的使用</title>
      <link href="/2019/09/26/sou-suo-fang-fa/"/>
      <url>/2019/09/26/sou-suo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="基于-haystack来使用whoosh检索引擎"><a href="#基于-haystack来使用whoosh检索引擎" class="headerlink" title="基于 haystack来使用whoosh检索引擎"></a>基于 haystack来使用whoosh检索引擎</h2><p>这篇博客是基于Django来编写的案例，haystack可以自定义搜索，开发者可以通过haystack间接使用搜索引擎，并且他可以像DJango的ORM一样，只需改少量代码就可以自由切换引擎</p><p>这里拿haystack使用whoosh引擎来作为案例</p><h3 id="基本安装和配置"><a href="#基本安装和配置" class="headerlink" title="基本安装和配置"></a>基本安装和配置</h3><p>首先先安装这两个包</p><pre><code>pip install django-haystackpip install whoosh</code></pre><p>然后在setting.py注册应用haystack</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/18.png" alt></p><p>并且在setting.py文件添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全文检索框架配置</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 使用whoosh引擎</span>        <span class="token comment" spellcheck="true"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.whoosh_backend.WhooshEngine'</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 索引文件路径</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 当添加、修改、删除数据时，自动生成索引</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><p>以上的是默认的配置，如果要添加jieba文字的话要另外配置</p><h3 id="生成索引文件"><a href="#生成索引文件" class="headerlink" title="生成索引文件"></a>生成索引文件</h3><p>在你要检索的模型类的那个包中，添加一个文件</p><p>如我要检索的是所有的商品文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/19.png" alt></p><p>里面的search_indexes.py就是我写的文件</p><p>内容如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> goods<span class="token punctuation">.</span>models <span class="token keyword">import</span> GoodsSKU<span class="token keyword">class</span> <span class="token class-name">GoodsSKUIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#索引字段document=True指定根据表的哪些字段简历索引文件制定在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author = indexes.CharField(model_attr='user')</span>    <span class="token comment" spellcheck="true"># pub_date = indexes.DateTimeField(model_attr='pub_date')</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> GoodsSKU    <span class="token comment" spellcheck="true"># 建立索引数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回所有数据就是对所有的数据进行索引</span></code></pre><p>然后要定义你检索出来的那个界面</p><p>创建如下文件：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/20.png" alt></p><p>goodssku_text.txt就是定义你可以检索的字段，我的检索字段如下：</p><pre><code># 指定根据表中的哪些字段建立索引数据{{ object.name }}  # 根据商品的名称建立索引{{ object.desc }}  # 根据商品的简介建立索引{{ object.goods.detail }}  # 根据商品的详情建立索引</code></pre><p>然后使用命令</p><pre><code>python manage.py rebuild_index</code></pre><p>这样会生成索引文件</p><p>如图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/21.png" alt></p><h3 id="使用搜索功能"><a href="#使用搜索功能" class="headerlink" title="使用搜索功能"></a>使用搜索功能</h3><p>在搜索的那个表单上，填写内容如下</p><pre><code>&lt;form action=&quot;/search&quot; method=&quot;get&quot;&gt;&lt;/form&gt;</code></pre><p>然后要添加url路径</p><pre><code>url(&#39;search/&#39;, include(&#39;haystack.urls&#39;)),  # 全文检索框架</code></pre><p>搜索完后结果会提交到一个search.html页面，会传递这几个变量</p><pre><code>query：搜索关键字page：当前页的page对象 –&gt;遍历page对象，获取到的是SearchResult类的实例对象，对象的属性object才是模型类的对象。paginator：分页paginator对象</code></pre><p>然后自定义一个搜索列表的模板，将这三个变量使用Django传递变量的方式添加进去即可</p><h3 id="汉语分词检索"><a href="#汉语分词检索" class="headerlink" title="汉语分词检索"></a>汉语分词检索</h3><p>如果是英文的话一个单词就是一个商品，但是汉语远远比英语复杂的多，比如搜索你好，可以分为你和好</p><p>Python有个jieba包可以帮助我们进行汉语分词</p><p>首先先安装jieba包</p><pre><code>pip install jieba</code></pre><p>要对原来的分词结果使用汉语分词的话就要对下载下来的包进行jieba分词</p><p>进入对pip下载的haystack包里面添加ChineseTokenizer.py文件，内容如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>analysis <span class="token keyword">import</span> Tokenizer<span class="token punctuation">,</span> Token<span class="token keyword">class</span> <span class="token class-name">ChineseTokenizer</span><span class="token punctuation">(</span>Tokenizer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">,</span> positions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> chars<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 keeporiginal<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> removestops<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 start_pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> start_char<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Token<span class="token punctuation">(</span>positions<span class="token punctuation">,</span> chars<span class="token punctuation">,</span> removestops<span class="token operator">=</span>removestops<span class="token punctuation">,</span> mode<span class="token operator">=</span>mode<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        seglist <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>value<span class="token punctuation">,</span> cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seglist<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>original <span class="token operator">=</span> t<span class="token punctuation">.</span>text <span class="token operator">=</span> w            t<span class="token punctuation">.</span>boost <span class="token operator">=</span> <span class="token number">1.0</span>            <span class="token keyword">if</span> positions<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>pos <span class="token operator">=</span> start_pos <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">if</span> chars<span class="token punctuation">:</span>                t<span class="token punctuation">.</span>startchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                t<span class="token punctuation">.</span>endchar <span class="token operator">=</span> start_char <span class="token operator">+</span> value<span class="token punctuation">.</span>find<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token keyword">yield</span> t<span class="token keyword">def</span> <span class="token function">ChineseAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> ChineseTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后拷贝原来的whoosh_backend.py文件，改名为whoosh_cn_backend.py</p><p>添加如下字段：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#对原来导入的包添加</span><span class="token keyword">from</span> <span class="token punctuation">.</span>ChineseAnalyzer <span class="token keyword">import</span> ChineseAnalyzer<span class="token comment" spellcheck="true"># 第163行的</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=StemmingAnalyzer(),      </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span><span class="token comment" spellcheck="true"># 改为</span><span class="token comment" spellcheck="true"># schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),  </span><span class="token comment" spellcheck="true"># field_boost=field_class.boost, sortable=True)</span></code></pre><p>然后回去setting.py修改成’ENGINE’: ‘haystack.backends.whoosh_cn_backend.WhooshEngine’</p><p>然后再进行一次索引就可以使用汉语的jieba分词了</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 全文检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastDFS安装及在Django中的部署</title>
      <link href="/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/"/>
      <url>/2019/09/25/fastdfs-de-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS在阿里云服务器的安装和配置"><a href="#FastDFS在阿里云服务器的安装和配置" class="headerlink" title="FastDFS在阿里云服务器的安装和配置"></a>FastDFS在阿里云服务器的安装和配置</h2><p>FastDFS安装在这篇<a href="https://blog.csdn.net/busishenren/article/details/83584885" target="_blank" rel="noopener">博客</a>讲解的很清楚了，这里我就不再赘述，只作为补充</p><p>如果你是在轻量云服务器安装的话，方法跟esc服务器一样的，直接在控制台开启防火墙规则端口</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/15.png" alt></p><p>开启了防火墙端口还不够</p><p>在进入服务器下，使用这条命令查看防火墙的状态</p><pre><code>firewall-cmd --state</code></pre><p>如果防火墙已开启，则看开放的所有端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果防火墙关闭，那么开启防火墙</p><pre><code>systemctl start firewalld.service</code></pre><p>如果嫌麻烦就把防火墙关了也行，但是不建议这么做</p><p>查看开放的所有端口后，如果没有开启22122和23000端口，那么开启他</p><pre><code>firewall-cmd --zone=public --add-port=22122/tcp --permanent #开启22122端口firewall-cmd --zone=public --add-port=23000/tcp --permanent #开启23000端口firewall-cmd --reload   # 配置立即生效</code></pre><p>再一次查看端口是否开启</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>在部署完FastDFS并且开启storage和tracker服务后，看一下端口是否被监听</p><pre><code>netstat -lnpt</code></pre><p>能看到23000和22122端口被监听那么就说明成功</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/16.png" alt></p><h2 id="FastDFS在Django中的使用"><a href="#FastDFS在Django中的使用" class="headerlink" title="FastDFS在Django中的使用"></a>FastDFS在Django中的使用</h2><p>在Django中，所有资源都是来自于后台的部署，Django后台数据库采用的是ORM模式，Django默认文件的上传是上传到指定的文件夹下面的，如果要修改的话要在一个文件中自定义文件的存储类，也就是继承django.core.files.storage.Storage</p><p>关于文件存储官网文档有很清楚的描述</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/17.png" alt></p><p>在setting.py配置你服务器的fastDFS的ip和端口号</p><pre><code># 设置Django的文件存储类DEFAULT_FILE_STORAGE = &#39;utils.fdfs.storage.FDFSStorage&#39;# 设置fdfs使用的client.conf文件路径FDFS_CLIENT_CONF = &#39;./utils/fdfs/client.conf&#39;# 设置fdfs存储服务器上nginx的IP和端口号FDFS_URL = &#39;&#39;</code></pre><p>然后在一个单独的文件夹(比如utils)里面加入以下两个文件</p><p>storage.py</p><pre><code>from django.core.files.storage import Storagefrom django.conf import settingsfrom fdfs_client.client import *class FDFSStorage(Storage):    def __init__(self, client_conf=None, base_url=None):        &quot;&quot;&quot;初始化&quot;&quot;&quot;        if client_conf is None:            client_conf = settings.FDFS_CLIENT_CONF        self.client_conf = client_conf        if base_url is None:            base_url = settings.FDFS_URL        self.base_url = base_url    def _open(self, name, mode=&#39;rb&#39;):        # 打开文件时使用        pass    def _save(self, name, content):        client=Fdfs_client(&#39;./utils/fdfs/client.conf&#39;)        res = client.upload_by_buffer(content.read())        if res.get(&#39;Status&#39;) != &#39;Upload successed.&#39;:            raise Exception(&#39;上传文件到FastDFS失败&#39;)        filename = res.get(&#39;Remote file_id&#39;)        return filename    def exists(self, name):        &quot;&quot;&quot;Django判断文件名是否可用&quot;&quot;&quot;        return False    def url(self, name):        &quot;&quot;&quot;返回访问文件url路径，不然后台保存的时候会报错&quot;&quot;&quot;        return self.base_url + name</code></pre><p>client.conf(修改相应的字段)</p><pre><code># connect timeout in seconds# default value is 30sconnect_timeout=30# network timeout in seconds# default value is 30snetwork_timeout=60# the base path to store log files# 你的个人电脑的存储日志，必须要有这个路径base_path=/Users/LY/Python_log# tracker_server can ocur more than once, and tracker_server format is#  &quot;host:port&quot;, host can be hostname or ip addresstracker_server=你服务器的IP:22122#standard log level as syslog, case insensitive, value list:### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debuglog_level=info# if use connection pool# default value is false# since V4.05use_connection_pool = false# connections whose the idle time exceeds this time will be closed# unit: second# default value is 3600# since V4.05connection_pool_max_idle_time = 3600# if load FastDFS parameters from tracker server# since V4.05# default value is falseload_fdfs_parameters_from_tracker=false# if use storage ID instead of IP address# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# default value is false# since V4.05use_storage_id = false# specify storage ids filename, can use relative or absolute path# same as tracker.conf# valid only when load_fdfs_parameters_from_tracker is false# since V4.05storage_ids_filename = storage_ids.conf#HTTP settingshttp.tracker_server_port=80#use &quot;#include&quot; directive to include HTTP other settiongs##include http.conf</code></pre><p>文件上传的路径可以随便写，因为这个都没用，上传后Django会自动按照你自己写的自定义存储方法去上传文件</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celery异步框架的使用</title>
      <link href="/2019/09/24/celery/"/>
      <url>/2019/09/24/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="Celery是什么"><a href="#Celery是什么" class="headerlink" title="Celery是什么"></a>Celery是什么</h2><p>​    Celery是一个实时处理和任务调度的分布式任务队列，简单的说所就是分布式应用队列，队列的意思就是把任务放在队列中执行，通常应用是把一些耗时的任务放在队列里面，主任务继续执行，耗时任务在队列中执行。</p><p>​    Celery本身只是一个任务队列，或者严格的说是管理分布式任务队列的工具，封装了常用的任务队列操作，通过Celery来管理任务队列的执行和管理，celery本身不含消息服务，它使用第三方消息服务来传递任务，目前，celery支持的消息服务RabbitMQ,redis甚至是数据库，redis是最佳选择，RabbitMQ(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#broker-rabbitmq</a>)、Redis(<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html#broker-redis</a>)处理任务队列的方式，两者的使用文档写的很清楚</p><p>​    在实际应用中，可以把一些比如邮件注册、手机注册、网站页面静态化等耗时操作交给Celery队列中，然后让Redis或者RabbitMQ去执行。下面我拿我项目中的案例来演示一下，也便于自己加深印象</p><h2 id="Celery演示"><a href="#Celery演示" class="headerlink" title="Celery演示"></a>Celery演示</h2><p>这里我拿的都是我最熟悉的Django框架和redis来演示</p><p>首先要导入Celery包</p><p>一般第三方的处理文件都会专门放到一个文件夹里面，我的直接命名Celery_tasks</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>直接使用装饰器就可以使得普通的方法变成异步方法</p><p>上面的是uwsgi使用的服务器的代码，在运行异步方法的服务器还要加上这一行代码， 整体代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'任务名字'</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">'redis://你的服务器IP/数据库名'</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'dailyfreshshop.settings'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#dailyfreshshop是我的项目名</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> 你的要运行的耗时任务<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>把原本的同步的方法转换为Celery异步的代码运行即可</p><p>如果你在linux系统上运行Celery代码，就在linux服务器端运行<code>celery -A celery_tasks.tasks worker -l info</code></p><p>如果是windows系统上运行Celery代码，就运行<code>celery -A celery_tasks.tasks worker -l info -P eventlet</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维人员的gitlab基本操作</title>
      <link href="/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/"/>
      <url>/2019/09/22/yun-wei-ren-yuan-de-gitlab-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本篇讲解了运维人员在后端的基本使用：创建开发项目、定义开发总监、开发人员等</p></blockquote><h2 id="管理员的操作"><a href="#管理员的操作" class="headerlink" title="管理员的操作"></a>管理员的操作</h2><p>点击上面的扳手图标可以进入后台管理界面<br><img src="https://img-blog.csdnimg.cn/20190922092307422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>点击左边的monitoring标签<br><img src="https://img-blog.csdnimg.cn/20190922092435431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>第一个system info是服务器的资源使用情况<br><img src="https://img-blog.csdnimg.cn/20190922092634854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>logs就是gitlab的应用日志和使用日志</p><h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>以下两种方法都可以添加账号<br>点击overview的new user按钮，可以为使用者创建账号<br><img src="https://img-blog.csdnimg.cn/20190922093118594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190922093433289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击右上角的new user按钮就可以给项目主负责人创建账号</p><h2 id="给项目添加人员"><a href="#给项目添加人员" class="headerlink" title="给项目添加人员"></a>给项目添加人员</h2><p>我这里原先就已经创建好了一个名为test的仓库<br>我这里给test仓库添加人员<br>点击project1<br><img src="https://img-blog.csdnimg.cn/20190922093735602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>再点击你需要操作的仓库<br><img src="https://img-blog.csdnimg.cn/20190922093800821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点击manage access<br><img src="https://img-blog.csdnimg.cn/20190922093832764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里你要给项目添加的是什么权限可以自定义<br><img src="https://img-blog.csdnimg.cn/20190922094119996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>master就是有合并分支的权限，developer就是可以用自己的分支写代码的权限<br><img src="https://img-blog.csdnimg.cn/20190922094248435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="给人员修改自己的密码"><a href="#给人员修改自己的密码" class="headerlink" title="给人员修改自己的密码"></a>给人员修改自己的密码</h2><p>点击扳手按钮重回管理界面，点击user<br><img src="https://img-blog.csdnimg.cn/20190922094452932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以给人员信息进行修改了<br><img src="https://img-blog.csdnimg.cn/20190922094506428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>可以修改密码<br><img src="https://img-blog.csdnimg.cn/20190922094616363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><h2 id="模拟企业开发者和负责人的使用流程"><a href="#模拟企业开发者和负责人的使用流程" class="headerlink" title="模拟企业开发者和负责人的使用流程"></a>模拟企业开发者和负责人的使用流程</h2><p>这里我不用git原始命令操作，因为比较麻烦，我贪方便就用sourcetree操作，原理是一样的</p><p>开发者使用自己的分支来编写代码</p><p>黏贴这个地址<br><img src="https://img-blog.csdnimg.cn/20190922095222895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>我随便写了一个test文件，我上传上去的时候会让我给账号密码，就是你刚刚设置的devloper账号密码<br><img src="https://img-blog.csdnimg.cn/20190922104059340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>这里就可以显示我刚刚上传的分支了<br><img src="https://img-blog.csdnimg.cn/20190922104108895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>然后点右上角蓝色的create merge request<br><img src="https://img-blog.csdnimg.cn/20190922104243370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>assign是项目负责人的账号就行了，其他的你随便填<br>然后用同样的方法打开负责人账号lead<br><img src="https://img-blog.csdnimg.cn/20190922104425940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>右上角有个橙色的消息，点开<br><img src="https://img-blog.csdnimg.cn/20190922104503516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>就可以看到开发者提交的申请<br><img src="https://img-blog.csdnimg.cn/20190922104537582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt><br>点击merge就可以合并分支<br>这里还可以给开发者回复<br><img src="https://img-blog.csdnimg.cn/20190922104737164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>重新返回项目，就可以看到你刚刚操作的文件合并到主分支了<br><img src="https://img-blog.csdnimg.cn/20190922104839441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab部署与使用</title>
      <link href="/2019/09/21/gitlab/"/>
      <url>/2019/09/21/gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="gitlab的安装"><a href="#gitlab的安装" class="headerlink" title="gitlab的安装"></a>gitlab的安装</h2><p>gitlab和github的区别想必大家都懂，这里我就不再赘述</p><p>这里我来用阿里云学生服务器centos7来演示gitlab的安装过程</p><p>首先打开你的防火墙控制台，开启防火墙规则</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE6.png" alt></p><p><strong>注(这里我用的是服务器安装，一般的服务器都默认安装了ssh的，服务器ssh这里可以输入命令也可以不用，如果是用虚拟机的就要一定要安装ssh，并且在命令前加上sudo)</strong></p><p>首先安装ssh，</p><pre><code>yum install -y curl policycoreutils-pythonopenssh-server</code></pre><p>将SSH服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable sshd</code></pre><p>启动SSH服务，安装命令：</p><pre><code>systemctl start sshd</code></pre><p>安装防火墙：</p><pre><code>yum install firewalld systemd -y</code></pre><p>开启防火墙：</p><pre><code>service firewalld  start</code></pre><p>添加http服务到防火墙：</p><pre><code>firewall-cmd --permanent --add-service=http</code></pre><p>然后重启防火墙：</p><pre><code>systemctl reload firewalld</code></pre><p>安装Postfix以发送通知邮件：</p><pre><code>yum install postfix</code></pre><p>将postfix服务设置成开机自启动，安装命令：</p><pre><code>systemctl enable postfix</code></pre><p>启动postfix</p><pre><code>systemctl start postfix</code></pre><p><strong>注意：这里如果成功那么没啥，可能会出现以下这个问题</strong></p><p><code>Job for postfix.service failed because the control process exited with error code. See &quot;systemctl st</code></p><p>这个时候不要慌</p><p>修改/etc/postfix/main.cf这个文件</p><pre><code>vim /etc/postfix/main.cf</code></pre><p>修改这两个字段为：</p><pre><code>inet_interfaces = allinet_protocols = ipv4</code></pre><p>接下来添加gitlab镜像：(这里的我用的是centos7的，centos6的话另外找资料)</p><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>安装gitlab 安装命令：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p><strong>注意，这里可能出现如下错误</strong></p><p><code>warning: gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</code> </p><p>这个是缺少gitlab 的依赖</p><p>下载依赖：</p><pre><code>yum -y install policycoreutils openssh-server openssh-clients postfix</code></pre><p>然后再执行：</p><pre><code>rpm -i gitlab-ce-10.0.0-ce.0.el7.x86_64.rpm</code></pre><p>然后修改gitlab的配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p>找到external_url这个字段，把里面的值修改为<code>http://你的服务器ip:你的端口</code>，比如<code>http://36.102.3.26:8899</code>，然后保存退出</p><p><strong>这里注意啦！！！</strong></p><p>这里我用的是开启防火墙配置的，所以要先看看防火墙开启没有</p><pre><code>firewall-cmd --state</code></pre><p>如果没开启就开启防火墙：<code>systemctl stop firewalld.service</code></p><p>然后看一下你有没有开启你配置的端口</p><pre><code>firewall-cmd --zone=public --list-ports</code></pre><p>如果没有就添加端口，并且重启</p><pre><code>firewall-cmd --zone=public --add-port=8899/tcp --permanent   # 开放8899端口firewall-cmd --reload   # 配置立即生效</code></pre><p>然后执行命令</p><pre><code>gitlab-ctl reconfigure</code></pre><p>然后</p><pre><code>gitlab-ctl restart</code></pre><p>这样就可以通过你的服务器ip:你的端口就可以访问gitlab了，这个是成功画面</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE7.png" alt></p><p>这个是要你重新配置你的密码，默认的账号是root</p><h2 id="502错误解决和优化"><a href="#502错误解决和优化" class="headerlink" title="502错误解决和优化"></a>502错误解决和优化</h2><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE9.png" alt></p><p><strong>注意，第一时间是看错误日志，而不是立马去谷歌百度，因为每一个人的错误都是不同的</strong></p><p>第一时间要查看错误日志，而不是查百度，因为每个人的错误都不同</p><pre><code># 看看unicorn启动日志cat /var/log/gitlab/unicorn/unicorn_stderr.log# 然后再看看gitlab日志，看看是哪里出错tail -100 /var/log/gitlab/gitlab-rails/production.log</code></pre><p><strong>每个人的错误都不同，根据错误日志的问题再去百度谷歌才是正道理</strong></p><h3 id="端口错误问题"><a href="#端口错误问题" class="headerlink" title="端口错误问题"></a>端口错误问题</h3><p><strong>端口错误都是端口被占用，当然按照我上面的方法是不会出现这个情况的</strong></p><p>此时继续修改配置文件</p><pre><code>vim  /etc/gitlab/gitlab.rb</code></pre><p><strong>看看你的错误日志，我的是8080端口被占用，改端口就行了</strong></p><p>找到以下字段取消注释并且修改：</p><pre><code># unicorn[&#39;port&#39;] = 8090   #千万不要是原来的8899端口啊，8090也是我打开过的端口，一样的话好像会报404的</code></pre><h3 id="内存爆满和内存消耗过大的问题"><a href="#内存爆满和内存消耗过大的问题" class="headerlink" title="内存爆满和内存消耗过大的问题"></a>内存爆满和内存消耗过大的问题</h3><p>但是最大的问题就是内存爆满，用命令看看<code>free -h</code>,或者用<code>htop</code>没有htop命令就下载一下<code>yum install htop</code></p><p>看一下结果我相信大部分人都跟我一样，物理内存爆满，然后发现swap居然是0有点奇怪</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE10.png" alt></p><p>然后我去去谷歌找了一下原因，发现阿里云默认情况下是不启用swap的，所以我们要自己添加swap来解决</p><h4 id="使用swap分区来减少内存消耗"><a href="#使用swap分区来减少内存消耗" class="headerlink" title="使用swap分区来减少内存消耗"></a>使用swap分区来减少内存消耗</h4><ol><li>查看当前系统中是否已经启用swap分区</li></ol><pre><code>cat /proc/swaps</code></pre><ol start="2"><li>如果没有启用swap分区功能，则新建一个专门的文件用于swap分区</li></ol><pre><code>dd if=/dev/zero of=/data/swap bs=512 count=8388616</code></pre><p><strong>swap的大小是count的大小乘以bs大小，上面命令的大小是4294971392，即4GB</strong></p><ol start="3"><li>通过mkswap命令将上面新建出的文件做成swap分区</li></ol><pre><code>mkswap /data/swap</code></pre><ol start="4"><li>查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调整成30或者60</li></ol><pre><code>cat /proc/sys/vm/swappinesssysctl -w vm.swappiness=60#永久修改若想永久修改，则编辑/etc/sysctl.conf文件，改文件中有vm.swappiness变量配置，默认为0</code></pre><p><strong>注：若想永久修改，则编辑/etc/sysctl.conf文件</strong></p><ol start="5"><li>启用此交换分区的交换功能</li></ol><pre><code>swapon /data/swapecho “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</code></pre><ol start="6"><li>然后再看看swap分区是否启动</li></ol><pre><code>cat /proc/swaps </code></pre><ol start="7"><li>然后重启gitlab看看</li></ol><pre><code>gitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE11.png" alt></p><p>哦吼，这不就，好起来了吗</p><p>再运行gitlab看看</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE12.png" alt></p><p>运行速度如丝般顺滑，刚部署好不知道多少倍，除此之外可能还有其他的bug，但是这个看错误日志修改就好了</p><p><strong>注意：如果修改了配置文件，一定要执行以下命令</strong></p><pre><code>gitlab-ctl reconfiguregitlab-ctl restart</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%9B%BE8.png" alt></p><p><strong>如果配置了还是502，耐心等一等，等那么一分钟左右就好了</strong></p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>​    这个运行速度慢折腾了我一下午，问题归根结底就是…..服务器配置太烂了，性能差就会经常出现502，因为官方推荐的服务器性能是最低 双核 + 8GB RAM，所以这里只能使用swap才能正常使用</p><p>​    gitlab的使用方法是和github差不多的，可以用git命令行执行，也可以用sourcetree直接clone下来</p><p><strong>解决问题使用到的博客</strong></p><blockquote><p><a href="https://blog.csdn.net/qq_25283709/article/details/78207881" target="_blank" rel="noopener">gitlab服务器经常出现502(阿里云搭建)</a></p></blockquote><blockquote><p><a href="https://blog.51cto.com/dgd2010/1762907?spm=a2c4e.10696291.0.0.2d4919a42dBKR8" target="_blank" rel="noopener">阿里云云主机添加swap分区与swap性能优化</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/wanchaopeng/article/details/84771195" target="_blank" rel="noopener">gitlab占用内存过大</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitbook搭建github上的书城</title>
      <link href="/2019/09/21/gitbook/"/>
      <url>/2019/09/21/gitbook/</url>
      
        <content type="html"><![CDATA[<h2 id="gitbook的安装和使用"><a href="#gitbook的安装和使用" class="headerlink" title="gitbook的安装和使用"></a>gitbook的安装和使用</h2><p>安装Gitbook前应该先安装node.js，安装这里就不赘述了，直接进入node交互界面</p><pre><code>$ npm install gitbook-cli -g</code></pre><p>检验是否安装成功</p><pre><code>$ gitbook -V</code></pre><p>进入一个空文件夹</p><pre><code>$ gitbook init</code></pre><p>然后会创建 <code>README.md</code> 和 <code>SUMMARY.md</code> 这两个文件， <code>README.md</code> 是说明文件， <code>SUMMARY.md</code>是书的章节目录，然后输入</p><pre><code>$ gitbook serve</code></pre><p>就可以创建gitbook了，默认端口是4000，地址输入<a href="http://localhost:4000就可以进入页面，可以用一些markdown编辑器来写，然后就可以在网页上看到实时编辑的内容了。" target="_blank" rel="noopener">http://localhost:4000就可以进入页面，可以用一些markdown编辑器来写，然后就可以在网页上看到实时编辑的内容了。</a></p><p>目录结构如图</p><p><img src="https://img-blog.csdnimg.cn/20190720225822792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20190720225836562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>gitbook的目录结构就是缩进，语法结构一看就懂</p><p>gitbook写完后可以输入命令</p><pre><code>$ gitbook build</code></pre><p>使用这个命令后在本地会生成一个_book的文件夹，里面是自动生成的html文件，这些htm文件在本地打开是不具备跳转效果的，要部署到网上才可以具备全部效果</p><h2 id="部署gitbook到github上"><a href="#部署gitbook到github上" class="headerlink" title="部署gitbook到github上"></a>部署gitbook到github上</h2><p>根据上面的操作，通过 <code>$ gitbook build</code> 把</p><p>先在自己的github上创建一个新的仓库，然后把刚刚_book里面的文件上传到github上，这部分的方法是个程序员都应该掌握，这里不再赘述，上传完之后点击setting，拉倒最下面有个github page的，如图</p><p><img src="https://img-blog.csdnimg.cn/20190720230934856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTM3NzI3Mw==,size_16,color_FFFFFF,t_70" alt></p><p>上面绿色这个地址就是你的网上书籍地址了</p><p>如果要给你自己的gitbook设置一个域名，方法如我上一篇<a href="https://www.ly-blog.top/2019/09/05/hello-world/" target="_blank" rel="noopener">博客</a>的自定义域名部分</p><h2 id="gitbook-安装插件"><a href="#gitbook-安装插件" class="headerlink" title="gitbook 安装插件"></a>gitbook 安装插件</h2><p>单单使用gitbook来写，写出来的界面不是特别的好看，功能也没有那么多，gitbook是可以添加插件的，比如返回顶部、折叠、添加版权信息、分享等功能</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客并部署域名</title>
      <link href="/2019/09/05/hexo/"/>
      <url>/2019/09/05/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ol><li><p>安装node</p><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p><p>(电脑是多少位的就下载多少位)</p><p>安装成功之后在cmd输入命令</p><pre><code>node -v</code></pre><p>可以看到版本就安装成功</p></li><li><p>安装Git</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>git配置百度查一查，这里不多说</p></li><li><p>安装Hexo</p><pre><code>$ npm install -g hexo</code></pre><p>输入 <code>hexo -v</code>可以看到版本就安装成功</p></li></ol><h2 id="开始第一个博客"><a href="#开始第一个博客" class="headerlink" title="开始第一个博客"></a>开始第一个博客</h2><p>在命令行模式下进入个空文件夹，输入</p><pre><code>hexo init</code></pre><p>就开始创建hexo博客文件(可能需要一定时间)</p><p>然后输入命令安装博客所需要的包</p><pre><code>npm install</code></pre><p>此时博客就已经安装好了</p><p>输入命令开启你的第一个博客</p><pre><code>hexo server#或者hexo s</code></pre><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/01.png" alt></p><p>如图所示，第一个博客就已经搭建好了</p><p>​    博客的主题是可以修改的，可以参照网上流传的主题，有很多很漂亮的主题可以使用，比如我这里使用的是<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">hexo-theme-matery-1.0.1</a>,主题可以参照这个网站</p><p>​    需要修改主题的话只需要把下载下来的主题文件,放到刚刚搭建的博客文件夹的theme文件夹下,然后修改博客根目录的_config.yml文件的theme字段修改成主题的名字即可</p><pre><code>theme: hexo-theme-matery-1.0.1</code></pre><p>这里我用的是上面提到的主题，效果如下</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/05.png" alt></p><h3 id="添加markdown文章"><a href="#添加markdown文章" class="headerlink" title="添加markdown文章"></a>添加markdown文章</h3><p>接下来我要添加自己的字段</p><p>在根目录的<code>_posts</code>文件夹就是首页展示的文章</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/02.png" alt></p><p>直接在<code>_posts</code>文件夹添加markdown文件就可以在前端展示文章</p><h3 id="添加标签tags页"><a href="#添加标签tags页" class="headerlink" title="添加标签tags页"></a>添加标签tags页</h3><p>(如果你的source目录没有<code>tags/index.md</code> 文件，那么就看以下步骤)</p><p>就使用命令添加<code>tags</code>文件夹</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>然后在<code>tags</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: tagsdate: 2019-09-4 18:37.25type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><p>然后在<code>_posts</code>文件夹下的markdown文件的头部添加tags字段</p><p>例如：</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - github---</code></pre><p>tags最好用这种方法来写，多个标签就填多个</p><p>效果截图：</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/06.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/07.png" alt></p><h3 id="添加分类categories页"><a href="#添加分类categories页" class="headerlink" title="添加分类categories页"></a>添加分类categories页</h3><p>(如果你的source目录没有<code>categories/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>然后在<code>categories</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: categoriesdate: 2019-09-4 18:39.36type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><p>然后在markdown文件的头部添加<code>categories</code>字段</p><p>例如</p><pre><code>---title: hello worldauthor: LYtags:    - Hexo    - githubcategories:    - hexo---</code></pre><p>效果如图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/08.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/09.png" alt></p><h3 id="新建关于我about页"><a href="#新建关于我about页" class="headerlink" title="新建关于我about页"></a>新建关于我about页</h3><p>(如果你的source目录没有<code>about/index.md</code> 文件，那么就看以下步骤)</p><p>使用命令添加<code>categories</code>文件夹</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>然后在<code>about</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre><code>---title: aboutdate: 2019-09-4 18:41.56type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><p>效果截图:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/11.png" alt></p><p>about页面的内容是可以通过<code>themes\hexo-theme-matery-1.0.1\_config.yml</code>来修改</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/12.png" alt></p><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>然后在<code>friends</code>文件夹下添加<code>index.md</code>文件，并且至少添加内容，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> 2019<span class="token punctuation">-</span>09<span class="token punctuation">-</span>4 18<span class="token punctuation">:</span><span class="token number">45.36</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p><strong>文章还有一个description字段，是显示在主页的摘要，如果不填就是默认取内容的前70个字</strong></p><h2 id="Hexo-Theme-Matery主题的配置"><a href="#Hexo-Theme-Matery主题的配置" class="headerlink" title="Hexo-Theme-Matery主题的配置"></a>Hexo-Theme-Matery主题的配置</h2><p>Hexo-Theme-Matery主题的其他配置可以看他们的<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">主题文档</a></p><p>如果要对Hexo-Theme-Matery主题进行个性化的修改的话，可以参考这个<a href="https://www.jianshu.com/p/2e6ae2123d57" target="_blank" rel="noopener">大神的文章</a></p><p>这里对上面主题修改的文章有说不明白的地方进行补充说明</p><h3 id="自定义每日一言"><a href="#自定义每日一言" class="headerlink" title="自定义每日一言"></a>自定义每日一言</h3><p>如果你不喜欢文章里面的每日一言，想换一个比如<a href="https://api.ooopn.com/ciba/api.php?type=json" target="_blank" rel="noopener">金山每日一言</a>那些的话，就直接在主题文件里面的hexo-theme-matery-1.0.1/layout/index.exj文件添加个ajax代码<br>例如:</p><pre><code>&lt;script&gt;(function () {        $.ajax({            url: &quot;https://api.ooopn.com/ciba/api.php?type=json&quot;,//向本地的json文件发送请求            type: &quot;GET&quot;,            success: function (data) {                ciba=data.ciba  #ciba就是你插入片段的id                document.getElementById(&quot;ciba&quot;).innerHTML=ciba            },            error: function (error) {                document.getElementById(&quot;ciba&quot;).innerHTML=error            }        })    })();&lt;/script&gt;</code></pre><h3 id="评论的gittalk配置"><a href="#评论的gittalk配置" class="headerlink" title="评论的gittalk配置"></a>评论的gittalk配置</h3><p>gittalk主题配置说明没有说清楚，我这里补充一下，因为主题配置说推荐gittalk，所以我这里也拿gittalk来说明</p><p>首先要申请github授权，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">申请地址</a></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/1.png" alt></p><ul><li>Application name：项目名，随便填</li><li>Homepage URL：博客地址，也就是要访问的地址，我的是<a href="https://373005226.github.io">https://373005226.github.io</a></li><li>Application description：应用描述，这个随便填</li><li>Authorization callback URL:这个如果你有自己的域名就填自己的域名，没有就和上面的Homepage URL一样就好了</li></ul><p>输入完后会给你一个Client ID和Client Secret</p><p>打开主题配置文件的_config.yml，找到gittalk的这一行</p><pre><code>gitalk:  enable: true        #默认是false，改为true才可以开启评论  owner:             #这里是你的github用户名&#39;  repo:             #这里是你的博客地址  oauth:    clientId:         #刚刚申请的id    clientSecret:     #刚刚申请的密码  admin:             #一般都是你的github用户名了</code></pre><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>上传到你的博客就可以看到评论地址搞定了</p><h2 id="hexo的常见命令"><a href="#hexo的常见命令" class="headerlink" title="hexo的常见命令"></a>hexo的常见命令</h2><p>常见命令</p><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>缩写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>组合命令：</p><pre><code>hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h2 id="将hexo博客部署到github上"><a href="#将hexo博客部署到github上" class="headerlink" title="将hexo博客部署到github上"></a>将hexo博客部署到github上</h2><p>首先要注册一个github账号，注册步骤就跳过了</p><p>新建一个仓库，名字格式最好如下:</p><p>账号名.github.io</p><p>比如我的账号是373005226，仓库的名字就是373005226.github.io</p><p>然后新建一个index.html文件，内容随便写，如图</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/13.png" alt></p><p>然后输入刚刚的仓库名就可以看到自己刚刚写的东西了</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/14.png" alt></p><p>紧接着在博客源文件的_config.yml文件下修改如下字段:</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/15.png" alt></p><p>!!!格式要像我这样一样啊，或者填<a href="https://github.com/373005226/373005226.github.io.git" target="_blank" rel="noopener">https://github.com/373005226/373005226.github.io.git</a></p><p>然后再命令行输入这三行代码</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>根据上述步骤就可以上传到github了</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>github可以绑定自己买的域名</p><p>域名可以去各大服务商买，这里我用的是阿里云</p><p>购买完域名后，进入域名解析</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/16.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/17.png" alt></p><p>这里的记录值好像是不一定的，记录值就是你打开cmd命令行，ping 你的账号.github.io</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/18.png" alt></p><p>先使用<code>hexo d</code>上传好代码到github上之后，然后在github上新建一个CNAME(没有后缀)文件，里面填写你购买的域名(加不加www都可以)<br><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/19.png" alt></p><p>然后点击settings找到Github Pages填写自己的域名</p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/21.png" alt></p><p><img src="https://txy-tc-ly-1256104767.cos.ap-guangzhou.myqcloud.com/hexo/22.png" alt></p><p>然后就可以绑定自己的域名了</p><h2 id="写markdown注意事项"><a href="#写markdown注意事项" class="headerlink" title="写markdown注意事项"></a>写markdown注意事项</h2><p>写markdown有时候本地编辑没问题，但是上传到服务器的图片有时候是失效的，所以最好图片之类的媒体资源放到腾讯云、七牛云等服务商上面。他们都有对象存储功能，可以把媒体文件上传到他们的服务器，然后再通过URL地址来访问，这样就不用怕自己本地写的markdown文件上传到服务器的图片资源访问不了的问题了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
